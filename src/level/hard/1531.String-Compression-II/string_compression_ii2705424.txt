// https://leetcode.com/problems/string-compression-ii/solutions/2705424/dp-soln-in-rust/
impl Solution {
    pub fn get_length_of_optimal_compression(s: String, k: i32) -> i32 {
        let as_chars = s.chars().collect::<Vec<char>>();
        
        let str_len = as_chars.len() as usize;
        let k = k as usize;
        
        // dp[i][j] = best soln up to s[i] with k chars removed
        let mut dp = vec![vec![str_len; k + 1]; str_len + 1];
        dp[0][0] = 0;
                
        for i in 1..=str_len {
            for j in 0..=k {
                // if we have a char to remove, take the last optimal
                if j > 0 { dp[i][j] = dp[i - 1][j - 1] };
                
                let (mut r, mut c) = (0, 0);
                
                for ptr in (0..i).rev() {   
                    // increment counter if ptr equivalent to the current
                    // else remove the value
                    if as_chars[ptr] == as_chars[i - 1] {
                        c += 1;
                    } else {
                        r += 1;
                    }
                    
                    // 'removed' values greater than the max allotted removals
                    if r > j { break };
                    
                    // return max of
                    // 1.) just removing the current value
                    // 2.) the best soln from before the current pointer
                    //     +
                    //     the char itself
                    //     +
                    //     the # of chars added by their count
                    //
                    //     NOTE: this assumes we removed all non-x values, hence the [j - r]
                    dp[i][j] = std::cmp::min(
                        dp[i][j],
                        dp[ptr][j - r]
                        +
                        if c == 0 || c == 1 {
                            c
                        } else if c < 10 {
                            2
                        } else if c < 100 {
                            3
                        } else {
                            4
                        }
                    );
                    
                }
            }
        }

        dp[str_len][k] as _
    }
}