// https://leetcode.com/problems/string-compression-ii/solutions/2705611/rust-top-down-dp-with-comments/
use std::collections::HashMap;

impl Solution {
    fn dp(s: &[u8], k: usize, i: usize, last: u8, cnt: usize, j: usize, memo: &mut HashMap<(usize, u8, usize, usize), i32>) -> i32 {
        if i == s.len() {
            0
        } else if let Some(additional_len) = memo.get(&(i, last, cnt, j)) {
            *additional_len
        } else {
            let b = s[i];
            let mut rez = 1 + Self::dp(s, k, i + 1, b, 1, j, memo);
            if last == b {
                let comp = if cnt != 1 && cnt != 9 && cnt != 99 {
                    Self::dp(s, k, i + 1, b, cnt + 1, j, memo)
                } else {
                    1 + Self::dp(s, k, i + 1, b, cnt + 1, j, memo)
                };
                rez = rez.min(comp);
            }
            if j < k {
                rez = rez.min(Self::dp(s, k, i + 1, last, cnt, j + 1, memo));
            }
            memo.insert((i, last, cnt, j), rez);
            rez
        }
    }

    pub fn get_length_of_optimal_compression(s: String, k: i32) -> i32 {
        Self::dp(s.as_bytes(), k as usize, 0, b'A', 0, 0, &mut HashMap::new())
    }
}