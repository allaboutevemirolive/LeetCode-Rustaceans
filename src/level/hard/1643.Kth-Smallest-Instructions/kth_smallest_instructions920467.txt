// https://leetcode.com/problems/kth-smallest-instructions/solutions/920467/rust-translated-0ms-100/
impl Solution {
    pub fn kth_smallest_path(destination: Vec<i32>, k: i32) -> String {
        fn helper(dp: &Vec<Vec<i32>>, mut i: usize, mut j: usize, k: usize, ans: &mut String) {
            if i == dp.len() - 1 {
                loop {
                    j += 1;
                    if j < dp[0].len() {
                        ans.push('H');
                    } else {
                        break;
                    }
                }
                return;
            }
            if j == dp[0].len() - 1 {
                loop {
                    i += 1;
                    if i < dp.len() {
                        ans.push('V');
                    } else {
                        break;
                    }
                }
                return;
            }
            if dp[i][j + 1] >= k as i32 {
                ans.push('H');
                helper(dp, i, j + 1, k, ans);
            } else {
                ans.push('V');
                helper(dp, i + 1, j, k - dp[i][j + 1] as usize, ans);
            }
        }

        let m = destination[0] as usize;
        let n = destination[1] as usize;
        let mut dp = vec![vec![0; n + 1]; m + 1];
        for i in (0..m + 1).rev() {
            for j in (0..n + 1).rev() {
                if i == m && j == n {
                    dp[i][j] = 1;
                } else if i == m {
                    dp[i][j] = dp[i][j + 1];
                } else if j == n {
                    dp[i][j] = dp[i + 1][j];
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j + 1];
                }
            }
        }
        let mut ans = String::new();
        helper(&dp, 0, 0, k as usize, &mut ans);
        ans
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_kth_smallest_path() {
        assert_eq!(
            Solution::kth_smallest_path(vec![2, 3], 1),
            "HHHVV".to_owned()
        );
    }

    #[test]
    fn test_kth_smallest_path_02() {
        assert_eq!(
            Solution::kth_smallest_path(vec![2, 3], 2),
            "HHVHV".to_owned()
        );
    }

    #[test]
    fn test_kth_smallest_path_03() {
        assert_eq!(
            Solution::kth_smallest_path(vec![2, 3], 3),
            "HHVVH".to_owned()
        );
    }
}