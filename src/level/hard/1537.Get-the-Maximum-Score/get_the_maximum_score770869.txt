// https://leetcode.com/problems/get-the-maximum-score/solutions/770869/rust-translated/
impl Solution {
    pub fn max_sum(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {
        let mut i = 0;
        let mut j = 0;
        let n = nums1.len();
        let m = nums2.len();
        let mut a = 0i64;
        let mut b = 0i64;
        let MOD = 1_000_000_007i64;
        while i < n || j < m {
            if i < n && (j == m || nums1[i] < nums2[j]) {
                a += nums1[i] as i64;
                i += 1;
            } else if j < m && (i == n || nums1[i] > nums2[j]) {
                b += nums2[j] as i64;
                j += 1;
            } else {
                a = std::cmp::max(a, b) + nums1[i] as i64;
                b = a;
                i += 1;
                j += 1;
            }
        }
        (std::cmp::max(a, b) % MOD) as i32
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_max_sum() {
        assert_eq!(
            Solution::max_sum(vec![2, 4, 5, 8, 10], vec![4, 6, 8, 9]),
            30
        );
    }

    #[test]
    fn test_max_sum_02() {
        assert_eq!(Solution::max_sum(vec![1, 3, 5, 7, 9], vec![3, 5, 100]), 109);
    }

    #[test]
    fn test_max_sum_03() {
        assert_eq!(
            Solution::max_sum(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9, 10]),
            40
        );
    }

    #[test]
    fn test_max_sum_04() {
        assert_eq!(
            Solution::max_sum(vec![1, 4, 5, 8, 9, 11, 19], vec![2, 3, 4, 11, 12]),
            61
        );
    }
}