// https://leetcode.com/problems/minimum-cost-to-split-an-array/solutions/3083943/rust-dp/
use std::collections::HashMap;

impl Solution {
    pub fn min_cost(nums: Vec<i32>, k: i32) -> i32 {
        let n = nums.len();
        let mut dp = vec![i32::MAX; n];
        
        for i in 0 .. n {
            let mut mp = HashMap::<i32, i32>::new();
            let mut sum = 0;
            for j in (0 ..= i).rev() {
                if let Some(cnt) = mp.get(&nums[j]) {
                    sum += 1;
                    if *cnt == 1 { sum += 1; }
                }
                *mp.entry(nums[j]).or_insert(0) += 1;
                let mut temp = k + sum;
                if j > 0 { temp += dp[j - 1]; }
                dp[i] = dp[i].min(temp);
            }
        }
        dp[n - 1]
    }
}