// https://leetcode.com/problems/max-value-of-equation/solutions/710088/rust-36ms/
// https://leetcode.com/problems/max-value-of-equation/discuss/709859/Java-Monotonic-Deque-O(n)

use std::cmp::max;
use std::collections::VecDeque;

pub fn find_max_value_of_equation(points: Vec<Vec<i32>>, k: i32) -> i32 {
    let mut ans = std::i32::MIN;
    let mut deque = VecDeque::<Vec<i32>>::new();
    for p in points {
        while !deque.is_empty() && p[0] > deque.front().unwrap()[1] + k {
            deque.pop_front();
        }
        if !deque.is_empty() {
            ans = max(ans, deque.front().unwrap()[0] + p[0] + p[1])
        }
        while !deque.is_empty() && p[1] - p[0] >= deque.back().unwrap()[0] {
            deque.pop_back();
        }
        deque.push_back(vec![p[1] - p[0], p[0]]);
    }
    ans
}
