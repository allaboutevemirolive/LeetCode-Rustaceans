// https://leetcode.com/problems/longest-increasing-subsequence-ii/solutions/2560878/rust-segment-tree-solution/
impl Solution {
    pub fn length_of_lis(nums: Vec<i32>, k: i32) -> i32 {
        let mut tree = [0; 2 * 100_000 + 2];
        
        let mut res = 0;
        for &val in &nums {
            let left = i32::max(0, val - k);     
            
            let curr = Self::query(&mut tree, left, val) + 1;
            res = res.max(curr);
            Self::update(&mut tree, val, curr);
        }
        res
    }
    fn update(tree: &mut [i32], idx: i32, val: i32) {
        let mut idx = idx as usize + 100_001;
        tree[idx] = val;  
        
        while idx > 1 {
            tree[idx >> 1] = tree[idx].max(tree[idx ^ 1]);
            idx >>= 1;
        }
    }
    fn query(tree: &[i32], left: i32, right: i32) -> i32 {
        let mut left = left as usize + 100_001;
        let mut right = right as usize + 100_001;
        
        let mut res = 0;
        while left < right {
            if left & 1 == 1 {
                res = res.max(tree[left]);
                left += 1;
            }
            if right & 1 == 1 {
                right -= 1;
                res = res.max(tree[right]);
            }
            left /= 2;
            right /= 2;
        }
        res
    }
}