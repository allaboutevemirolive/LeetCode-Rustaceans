// https://leetcode.com/problems/largest-color-value-in-a-directed-graph/solutions/3397737/rust-topological-sort-dp-solution/
impl Solution {
    pub fn largest_path_value(colors: String, edges: Vec<Vec<i32>>) -> i32 {
        let n = colors.len();
        let chars: Vec<char> = colors.chars().collect();

        let mut adj_list = vec![vec![]; n as usize];
        let mut in_degree = vec![0; n];

        for edge in edges {
            let (u, v) = (edge[0] as usize, edge[1] as usize);
            adj_list[u].push(v);
            in_degree[v] += 1;
        }

        let mut queue = vec![];
        let mut f = vec![vec![0; 26]; n];
        let mut count = 0;

        for i in 0..n {
            if in_degree[i] == 0 {
                queue.push(i);
            }
        }

        while !queue.is_empty() {
            let u = queue.pop().unwrap();
            count += 1;

            f[u][chars[u] as usize - 'a' as usize] += 1;

            for &v in adj_list[u].iter() {
                in_degree[v] -= 1;

                if in_degree[v] == 0 {
                    queue.push(v);
                }

                for c in 0..26 as usize {
                    f[v][c] = f[v][c].max(f[u][c]);
                }
            }
        }

        if count != n {
            return -1;
        }

        let mut res = 0;

        for i in 0..n {
            for j in 0..26 as usize {
                res = res.max(f[i][j]);
            }
        }

        res
    }
}