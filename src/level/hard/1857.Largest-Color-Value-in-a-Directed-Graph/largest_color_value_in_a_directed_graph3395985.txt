// https://leetcode.com/problems/largest-color-value-in-a-directed-graph/solutions/3395985/rust-with-topological-sort/
use std::collections::VecDeque;

impl Solution {
    pub fn largest_path_value(colors: String, edges: Vec<Vec<i32>>) -> i32 {
        let mut degree = vec![0; colors.len()];
        let mut adj = vec![Vec::new(); colors.len()];
        for v in edges.iter() {
            adj[v[0] as usize].push(v[1] as usize);
            degree[v[1] as usize] += 1;
        }

        let mut queue = VecDeque::new();
        for i in 0..adj.len() {
            if degree[i] == 0 {
                queue.push_back(i);
            }
        }

        let mut dp = vec![[0; 26]; adj.len()];
        let mut ans = 1;
        while let Some(i) = queue.pop_front() {
            let c = (colors.as_bytes()[i] - b'a') as usize;
            dp[i][c] += 1;
            ans = ans.max(*dp[i].iter().max().unwrap());

            for &j in adj[i].iter() {
                degree[j] -= 1;
                for c in 0..26 {
                    dp[j][c] = dp[j][c].max(dp[i][c]);
                }
                if degree[j] == 0 {
                    queue.push_back(j);
                }
            }
        }
        if degree.iter().any(|&d| d > 0) {
            return -1;
        }
        ans
    }
}