// https://leetcode.com/problems/largest-color-value-in-a-directed-graph/solutions/3395829/rust-toposort/
impl Solution {
    pub fn largest_path_value(colors: String, edges: Vec<Vec<i32>>) -> i32 {
        use std::collections::VecDeque;

        let n = colors.len();

        let mut next = vec![vec![]; n];
        let mut prev = vec![0; n];
        for edge in edges {
            next[edge[0] as usize].push(edge[1] as usize);
            prev[edge[1] as usize] += 1;
        }

        let mut queue = VecDeque::new();
        for i in 0..n {
            if prev[i] == 0 {
                queue.push_back(i);
            }
        }

        let mut topo = Vec::with_capacity(n);        
        while let Some(i) = queue.pop_front() {
            topo.push(i);
            for &j in &next[i] {
                prev[j] -= 1;
                if prev[j] == 0 {
                    queue.push_back(j);
                }
            }
        }
        if topo.len() < n {
            return -1;
        }

        let mut count = vec![vec![0; 26]; n];
        for i in topo.into_iter().rev() {
            let idx = (colors.as_bytes()[i] - b'a') as usize;
            count[i][idx] += 1;

            for &j in &next[i] {
                for k in 0..26 {
                    count[i][k] = count[i][k].max(count[j][k]);
                }
            }
        }

        *count.iter().map(|v| v.iter().max().unwrap()).max().unwrap()
    }
}