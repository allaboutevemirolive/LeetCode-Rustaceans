// https://leetcode.com/problems/largest-color-value-in-a-directed-graph/solutions/3397335/rust-runtime-and-memory-beat-100/
use std::collections::VecDeque;

impl Solution {
    pub fn largest_path_value(colors: String, edges: Vec<Vec<i32>>) -> i32 {
        let n = colors.len();
        let mut adj: Vec<Vec<usize>> = vec![Vec::new(); n];
        let mut indegree: Vec<usize> = vec![0; n];

        for edge in edges {
            adj[edge[0] as usize].push(edge[1] as usize);
            indegree[edge[1] as usize] += 1;
        }

        let mut count: Vec<Vec<i32>> = vec![vec![0; 26]; n];
        let mut q: VecDeque<usize> = VecDeque::new();

        for i in 0..n {
            if indegree[i] == 0 {
                q.push_back(i);
            }
        }

        let mut answer = 0;
        let mut nodes_seen = 0;

        while !q.is_empty() {
            let node = q.pop_front().unwrap();
            count[node][colors.as_bytes()[node] as usize - b'a' as usize] += 1;
            answer = std::cmp::max(answer, count[node][colors.as_bytes()[node] as usize - b'a' as usize]);
            nodes_seen += 1;

            for &neighbor in &adj[node] {
                for i in 0..26 {
                    count[neighbor][i] = std::cmp::max(count[neighbor][i], count[node][i]);
                }

                indegree[neighbor] -= 1;
                if indegree[neighbor] == 0 {
                    q.push_back(neighbor);
                }
            }
        }

        if nodes_seen < n {
            -1
        } else {
            answer
        }
    }
}