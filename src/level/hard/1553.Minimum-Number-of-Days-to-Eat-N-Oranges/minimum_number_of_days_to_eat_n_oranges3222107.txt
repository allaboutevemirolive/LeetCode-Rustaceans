// https://leetcode.com/problems/minimum-number-of-days-to-eat-n-oranges/solutions/3222107/rust-dp-solution/
impl Solution {
    pub fn min_days(n: i32) -> i32 {
        use std::collections::*;
        let mut dp = HashMap::new();
        fn dfs(n: i32, dp: &mut HashMap<i32, i32>) -> i32 {
            if n <= 1 {
                return n;
            }
            if !dp.contains_key(&n) {
                let mid_days_to_eat = 1 + (n % 2 + dfs(n / 2, dp)).min(n % 3 + dfs(n / 3, dp));
                dp.insert(n, mid_days_to_eat);
            }
            dp.get(&n).copied().unwrap()
        }
        dfs(n, &mut dp)
    }
}