// https://leetcode.com/problems/sum-of-k-mirror-numbers/solutions/1589285/rust-brute-force-64ms/
impl Solution {
    pub fn k_mirror(k: i32, n: i32) -> i64 {
        let mut basek = vec![1];
        let mut base10 = vec![1];
        let mut ret = 0;
        let mut i = 0;
        while i != n {
            let bk = Solution::to_number(&basek, k);
            let b10 = Solution::to_number(&base10, 10);
            if bk < b10 {
                Solution::next(&mut basek, k);
            } else if b10 < bk {
                Solution::next(&mut base10, 10);
            } else {
                ret += bk;
                Solution::next(&mut basek, k);
                i += 1;
            }
        }
        ret
    }

    fn to_number(vec: &[i32], base: i32) -> i64 {
        vec.iter().rev().fold(0, |acc, &v| acc * base as i64 + v as i64)
    }

    fn next(vec: &mut Vec<i32>, base: i32) {
        let mut i = (vec.len() - 1) / 2;
        let mut j = vec.len() / 2;
        while j != vec.len() {
            if vec[i] + 1 == base {
                vec[i] = 0;
                vec[j] = 0;
                i -= 1;
                j += 1;
            } else {
                vec[i] += 1;
                vec[j] = vec[i];
                return;
            }
        }
        vec.push(1);
        vec[0] = 1;
    }
}