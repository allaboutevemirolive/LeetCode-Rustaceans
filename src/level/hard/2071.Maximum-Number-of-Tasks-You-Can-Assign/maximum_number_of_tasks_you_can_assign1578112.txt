// https://leetcode.com/problems/maximum-number-of-tasks-you-can-assign/solutions/1578112/rust-binary-search-btreemap/
// @robertkingnz
fn possible(tasks: &[i32], workers: &[i32], mut pills: i32, strength: i32) -> bool {
    let mut m: BTreeMap<i32, i32> = BTreeMap::new();
    for &t in tasks {
        let e = m.entry(t).or_insert(0);
        *e += 1;
    }
    for &w in workers {
        let (&first, &first_count) = m.iter().next().unwrap();
        if w >= first {
            if first_count == 1 {
                m.remove(&first);
            } else {
                m.insert(first, first_count - 1);
            }
        } else if pills == 0 {
            return false;
        } else if let Some((&x, &x_count)) = m.range(..=(w+strength)).next_back() {
            pills -= 1;
            if x_count == 1 {
                m.remove(&x);
            } else {
                m.insert(x, x_count - 1);
            }
        } else {
            return false;
        }
    }
    true
}

impl Solution {
    pub fn max_task_assign(mut tasks: Vec<i32>, mut workers: Vec<i32>, pills: i32, strength: i32) -> i32 {
        tasks.sort();
        workers.sort();
        let n = tasks.len().min(workers.len());
        tasks.drain(n..tasks.len());
        workers.drain(..(workers.len()-n));
        let mut a = 0;
        let mut b = n+1;
        while a < b {
            let i = a + (b-a)/2;
            let ok = possible(
                &tasks[..i],
                &workers[n-i..],
                pills,
                strength);
            if ok {
                a = i+1;
            } else {
                b = i;
            }
        }
        if a > 0 {
            return (a-1) as i32;
        }
        0
    }
}