// https://leetcode.com/problems/maximize-the-minimum-powered-city/solutions/3016148/rust-binary-search-sliding-window/
impl Solution {
    pub fn max_power(stations: Vec<i32>, r: i32, k: i32) -> i64 {
        let (mut left, mut right) = (0, i64::MAX); 

        while left < right {
            let mid = right - (right - left) / 2;
            if Self::check(&stations, r, k as i64, mid) { left = mid; }
            else { right = mid - 1; }
        }
        left
    }

    fn check(stations: &Vec<i32>, r: i32, k: i64, amt: i64) -> bool {
        let mut stations = stations.clone();
        let (n, mut sum, mut k) = (stations.len(), 0, k);
        let (mut left, mut right) = (0, r as usize);

        for i in left ..= right { sum += stations[i] as i64; }
        for i in 0 .. n {
            if amt > sum {
                if amt > sum + k { return false }
                k -= amt - sum;
                stations[right] += (amt - sum) as i32;
                sum = amt;
            }
            if left as i32 == i as i32 - r {
                sum -= stations[left] as i64;
                left += 1;
            }

            if right + 1 < n {
                right += 1;
                sum += stations[right] as i64;
            }
        }
        
        true       
    }
}