// https://leetcode.com/problems/palindrome-partitioning-iv/solutions/2519372/rust-pre-calculate-palindrome-sub-strings/
impl Solution {
    pub fn check_partitioning(s: String) -> bool {
        let n = s.len();
        let mut dp = vec![vec![false; n]; n];
        let s = s.chars().collect::<Vec<char>>();
        
        for i in 0..n { dp[i][i] = true; }
        
        for k in 1..n {
            for i in 0..n {
                if i + k >= n {  continue }
                dp[i][i + k] = if s[i] == s[i + k] { true } else { false };
                if k > 2 { dp[i][i + k] = dp[i][i + k] && dp[i + 1][ i + k - 1]; }
            }
        }
        
        for i in 0..n {
            for j in i + 2..n {
                if dp[0][i] && dp[i + 1][j - 1] && dp[j][n - 1] { return true }
            }
        }
        
        false
    }
}