// https://leetcode.com/problems/palindrome-partitioning-iv/solutions/2417730/rust-solution-using-rolling-hash/
impl Solution {
    pub fn check_partitioning(s: String) -> bool {
        const MOD:usize = 2usize.pow(61)-1;
        let n = s.len();
        let s = s.chars().map(|v| (v as u8 - 'a' as u8) as usize).collect::<Vec<usize>>();
        let mut rs = s.clone();
        rs.reverse();
        let value_pattern = 26; // a-z
        let mut memo = vec![vec![0;n];n];
        let mut memo_r = vec![vec![0;n];n];
        for i in 0..n {
            let mut hash = 0usize;
            for j in i..n {
                let c = s[j];
                hash = (hash * (value_pattern+1) + c+1) % MOD;
                memo[i][j] = hash;
            }
            let mut hash = 0usize;
            for j in i..n {
                let c = rs[j];
                hash = (hash * (value_pattern+1) + c+1) % MOD;
                memo_r[i][j] = hash;
            }
        }

        let mut routes = vec![vec![];n];
        for i in 0..n {
            for j in i..n {
                let len = j - i + 1;
                let half = len / 2;
                if len == 1 {
                    routes[i].push(i+1);
                } else if len % 2 == 0 {
                    let rs = n - 1 - (i+len-1);
                    let re = n - 1 - (i+half);
                    if memo[i][i+half-1] == memo_r[rs][re] {
                        routes[i].push(j+1);
                    }
                } else {
                    let rs = n - 1 - (i+len-1);
                    let re = n - 1 - (i+half+1);
                    if memo[i][i+half-1] == memo_r[rs][re] {
                        routes[i].push(j+1);
                    }
                }
            }
        }

        for &i in &routes[0] {
            if n == i { continue }
            for &ni in &routes[i] {
                if n == ni { continue }
                if !routes[ni].is_empty() {
                    let li = routes[ni].len() - 1;
                    if routes[ni][li] == n {
                        return true
                    }
                }
            }
        }

        false
    }
}