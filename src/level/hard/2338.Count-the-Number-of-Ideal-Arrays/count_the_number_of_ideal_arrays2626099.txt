// https://leetcode.com/problems/count-the-number-of-ideal-arrays/solutions/2626099/rust-solution/

//https://leetcode.com/problems/count-the-number-of-ideal-arrays/


mod m {
    pub const M : i64 = 1_000_000_007;
    pub fn factor(n:i32) -> Vec<(i32,i32)> {
        let mut factors = Vec::new();
        let sq= f64::sqrt(n as f64) as i32;
        let mut r = n;

        for p in 2..=(sq+1) {
            let mut cnt=0;
            while r % p == 0 {
                cnt+=1;
                r/=p;
            }
            if(cnt > 0) {
                factors.push((p,cnt));
            }
        }
        if(r > 1) {
            factors.push((r,1))
        }
        factors
    }
    pub         fn nchoosek(n:i32,k:i32) -> i64 {
        fn gcd_extended(a:i64,b:i64) -> (i64,i64,i64) {
            if(a==0) {
                return (b,0,1);
            }
            let r = gcd_extended(b%a, a);

            return (r.0,r.2 - (b/a)*r.1,r.1);
        }
        
        let mut ret :i64 = 1;
        let mut div :i64 = 1;
        let o=n%k;
        for i in 1..=k {
            ret*=(n-i+1) as i64;
            div*=i as i64;
            if ret >= M {
                ret %=M;
            }
            if div >= M {
                div %=M;
            }
        }
        
        ret*=(gcd_extended(div,M).1 + M)%M;
        ret+=M;
        ret % M
    }

}

use self::m::*;
#[allow(unused)]
impl Solution {
    pub fn ideal_arrays(n: i32, max_value: i32) -> i32 {
 
        let mut ret : i64=1;

        for a in 2..=max_value {
            
            let mut t=1;
            for (_,k) in factor(a) {
                t*=nchoosek(n+k-1, k);
                t+=M;
                t%=M;
            }
//            println!("{} : {}",a,t);
            ret+=t;
            ret%=M;
        }
  //      println!("{} {} => {}",n,max_value,ret);


        ret as i32
    }
}
struct Solution { }

#[cfg(test)]
mod tests {
    // Note this useful idiom: importing names from outer (for mod tests) scope.
    use super::*;

    #[test]
    fn test135() {
        assert_eq!(Solution::ideal_arrays(2,5), 10);
    }

    #[test]
    fn test1315() {
        assert_eq!(Solution::ideal_arrays(5,3), 11);
    }
    #[test]
    fn test13115() {
        assert_eq!(Solution::ideal_arrays(184,389), 510488787
    );
    }

}