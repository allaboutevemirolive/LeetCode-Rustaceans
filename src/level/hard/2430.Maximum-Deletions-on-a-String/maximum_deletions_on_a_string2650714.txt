// https://leetcode.com/problems/maximum-deletions-on-a-string/solutions/2650714/c-rust-concise-dp-solution-runtime-100-space-100/
//C++ -- First Submission in the Contest
class Solution {
    void eval(string &s, vector<int> &dp, int i) {
        dp[i] = 1;
        
        for (int j = i - 1; i >= 0; --j) {
            if (i - j > j + 1) break;
            if (dp[j] + 1 <= dp[i]) continue;
            
            bool good = true;
            for (int k = 0; k < i - j; ++k) {
                if (s[i - k] == s[j - k]) continue;
                good = false;
                break;
            }
            if (not good) continue;
            dp[i] = dp[j] + 1;
        }
    }
    
public:
    int deleteString(string s) {
        int n = s.size();
        reverse(s.begin(), s.end());
        vector<int> dp(n);
        
        for (int i = 0; i < n; ++i) eval(s, dp, i);
        
        return dp[n - 1];
    }
};