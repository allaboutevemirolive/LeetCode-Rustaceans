// https://leetcode.com/problems/allocate-mailboxes/solutions/2877587/rust-dp/
impl Solution {
    pub fn min_distance(houses: Vec<i32>, k: i32) -> i32 {
        let (n, k) = (houses.len(), k as usize);
        let mut dp = vec![vec![0; k]; n];
        let mut houses = houses;

        houses.sort();
        Self::calculate(&houses, n - 1, k - 1, &mut dp)
    }

    fn calculate(houses: &Vec<i32>, i: usize, j: usize, dp: &mut Vec<Vec<i32>>) -> i32 {
        if i <= j || dp[i][j] > 0 { return dp[i][j] }
        if j == 0 {
            dp[i][j] = Self::one_box(houses, 0, i);
            return dp[i][j]
        }

        dp[i][j] = i32::MAX;
        for k in j ..= i {
            let temp = Self::one_box(houses, k, i);
            dp[i][j] = dp[i][j].min(temp + Self::calculate(houses, k - 1, j - 1, dp));
        }

        dp[i][j]
    }

    fn one_box(houses: &Vec<i32>, l: usize, r: usize) -> i32 {
        let mut ret = i32::MAX;
        for i in l ..= r {
            let mut temp = 0;
            for j in l ..= r { temp += i32::abs(houses[i] - houses[j]); }
            ret = ret.min(temp);
        }
        ret
    }
}