// https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/solutions/826501/rust-translated-56ms-100/
impl Solution {
    pub fn num_of_ways(nums: Vec<i32>) -> i32 {
        const MOD: i64 = 1_000_000_007;
        fn triangle(n: usize) -> Vec<Vec<i64>> {
            let mut ans = vec![];
            ans.push(vec![1]);
            ans.push(vec![1, 1]);
            for i in 2..n {
                ans.push(vec![1; i + 1]);
                for j in 1..i {
                    ans[i][j] = (ans[i - 1][j] + ans[i - 1][j - 1]) % MOD;
                }
            }
            ans
        }

        fn get_combination(v: Vec<i32>, combs: &Vec<Vec<i64>>) -> i64 {
            let n = v.len();
            if n <= 2 {
                return 1;
            }
            let root = v[0];
            let mut left = vec![];
            let mut right = vec![];
            for i in 1..n {
                if v[i] > root {
                    right.push(v[i])
                } else {
                    left.push(v[i])
                }
            }
            (combs[left.len() + right.len()][left.len()] * (get_combination(left, combs) % MOD)
                % MOD)
                * get_combination(right, combs)
                % MOD
        }
        let tri = triangle(nums.len() + 1);
        get_combination(nums, &tri) as i32 - 1
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_num_of_ways() {
        assert_eq!(Solution::num_of_ways(vec![2, 1, 3]), 1)
    }

    #[test]
    fn test_num_of_ways_02() {
        assert_eq!(Solution::num_of_ways(vec![3, 4, 5, 1, 2]), 5)
    }

    #[test]
    fn test_num_of_ways_03() {
        assert_eq!(Solution::num_of_ways(vec![1, 2, 3]), 0)
    }

    #[test]
    fn test_num_of_ways_04() {
        assert_eq!(Solution::num_of_ways(vec![3, 1, 2, 5, 4, 6]), 19)
    }

    #[test]
    fn test_num_of_ways_05() {
        assert_eq!(
            Solution::num_of_ways(vec![
                9, 4, 2, 1, 3, 6, 5, 7, 8, 14, 11, 10, 12, 13, 16, 15, 17, 18
            ]),
            216212978
        )
    }
}