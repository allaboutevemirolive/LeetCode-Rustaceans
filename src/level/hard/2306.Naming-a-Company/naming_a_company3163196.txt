// https://leetcode.com/problems/naming-a-company/solutions/3163196/rust-dp-solution/
impl Solution {
    pub fn distinct_names(ideas: Vec<String>) -> i64 {
        let mut set = std::collections::HashSet::new();

        ideas.iter().for_each(|idea| { set.insert(idea); });

        // f[i][j] means the number of first char of idea
        // replaced by char c that is not in ideas
        let mut f = vec![vec![0; 26]; 26];
        let mut res: i64 = 0;

        ideas.iter().for_each(|idea| {
            let i = idea.chars().nth(0).unwrap() as usize - 'a' as usize;

            for j in 0..26 {
                let c = char::from(('a' as usize + j) as u8);
                let swap = c.to_string() + &idea[1..].to_string();

                if !set.contains(&swap) {
                    f[i][j] += 1;
                    
                    // count the number not contains swap, which is f[j][i]
                    res += f[j][i];
                }
            }
        });

        2 * res
    }
}