// https://leetcode.com/problems/naming-a-company/solutions/3164731/rust-100/
impl Solution {
    pub fn distinct_names(ideas: Vec<String>) -> i64 {
        use std::collections::*;
        let mut ans = 0;
        // Group idea by their initials.
        let mut groups = vec![HashSet::<String>::new(); 26];
        for w in ideas {
            let x = w.chars().collect::<Vec<_>>();
            groups[x[0] as usize - 'a' as usize].insert(x.into_iter().skip(1).collect::<String>());
        }
        // Calculate number of valid names from every pair of groups.
        for i in 0..25 {
            for j in i + 1..26 {
                let s1 = &groups[i];
                let s2 = &groups[j];
                if !s1.is_empty() && !s2.is_empty() {
                    // Valid names are only from distinct suffixes in both groups.
                    let count_of_intersections = s1.intersection(s2).count();
                    // Since we can swap a with b and swap b with a to create two valid names, multiple answer by 2.
                    ans += ((s1.len() as i64 - count_of_intersections as i64)
                        * (s2.len() as i64 - count_of_intersections as i64))
                        * 2_i64;
                }
            }
        }
        ans      
    }
}