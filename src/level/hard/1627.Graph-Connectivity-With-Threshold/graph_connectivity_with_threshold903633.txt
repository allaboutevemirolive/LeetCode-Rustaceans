// https://leetcode.com/problems/graph-connectivity-with-threshold/solutions/903633/rust-translated-32ms-90/
impl Solution {
    pub fn are_connected(n: i32, threshold: i32, queries: Vec<Vec<i32>>) -> Vec<bool> {
        fn find(ds: &mut [i32], i: i32) -> i32 {
            if ds[i as usize] < 0 {
                i
            } else {
                ds[i as usize] = find(ds, ds[i as usize]);
                ds[i as usize]
            }
        }
        let mut ds = vec![-1; n as usize + 1];
        let mut i = threshold;
        while 2 * i < n {
            i += 1;
            if ds[i as usize] != -1 {
                continue;
            }
            let mut p1 = i;
            for j in (2 * i..=n).step_by(i as usize) {
                let mut p2 = find(&mut ds, j);
                if p1 != p2 {
                    if ds[p1 as usize] > ds[p2 as usize] {
                        std::mem::swap(&mut p1, &mut p2);
                    }
                    ds[p1 as usize] += ds[p2 as usize];
                    ds[p2 as usize] = p1;
                }
            }
        }
        let mut ans = Vec::<bool>::new();
        for q in &queries {
            ans.push(find(&mut ds, q[0]) == find(&mut ds, q[1]));
        }
        ans
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_are_connected() {
        assert_eq!(
            Solution::are_connected(6, 2, vec![vec![1, 4], vec![2, 5], vec![3, 6]]),
            vec![false, false, true]
        );
    }

    #[test]
    fn test_are_connected_02() {
        assert_eq!(
            Solution::are_connected(
                6,
                0,
                vec![vec![4, 5], vec![3, 4], vec![3, 2], vec![2, 6], vec![1, 3]]
            ),
            vec![true, true, true, true, true]
        );
    }

    #[test]
    fn test_are_connected_03() {
        assert_eq!(
            Solution::are_connected(
                5,
                1,
                vec![vec![4, 5], vec![4, 5], vec![3, 2], vec![2, 3], vec![3, 4]]
            ),
            vec![false, false, false, false, false,]
        );
    }
}