// https://leetcode.com/problems/stone-game-v/solutions/812578/rust-translated/
// https://leetcode.com/problems/stone-game-v/discuss/806745/Java-Top-down-DP
impl Solution {
    pub fn stone_game_v(stone_value: Vec<i32>) -> i32 {
        fn dfs(lo: usize, hi: usize, dp: &mut Vec<Vec<i32>>, acc: &mut Vec<i32>) -> i32 {
            if lo == hi {
                return 0;
            }
            if dp[lo][hi] > 0 {
                return dp[lo][hi];
            }
            for d in lo + 1..=hi {
                let first = acc[d] - acc[lo];
                let second = acc[hi + 1] - acc[d];
                if first == second {
                    dp[lo][hi] = std::cmp::max(
                        dp[lo][hi],
                        first + std::cmp::max(dfs(lo, d - 1, dp, acc), dfs(d, hi, dp, acc)),
                    );
                } else if first > second {
                    dp[lo][hi] = std::cmp::max(dp[lo][hi], second + dfs(d, hi, dp, acc));
                } else {
                    dp[lo][hi] = std::cmp::max(dp[lo][hi], first + dfs(lo, d - 1, dp, acc));
                }
            }

            dp[lo][hi]
        }
        let n = stone_value.len();
        let mut dp = vec![vec![0; n]; n];
        let mut acc = vec![0; n + 1];
        for i in 0..n {
            acc[i + 1] = acc[i] + stone_value[i];
        }
        dfs(0, n - 1, &mut dp, &mut acc)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_stone_game_v() {
        assert_eq!(Solution::stone_game_v(vec![6, 2, 3, 4, 5, 5]), 18)
    }

    #[test]
    fn test_stone_game_v_02() {
        assert_eq!(Solution::stone_game_v(vec![7, 7, 7, 7, 7, 7, 7]), 28)
    }

    #[test]
    fn test_stone_game_v_03() {
        assert_eq!(Solution::stone_game_v(vec![4]), 0)
    }
}