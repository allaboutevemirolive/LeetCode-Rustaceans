// https://leetcode.com/problems/minimize-deviation-in-array/solutions/1782862/rust-iterators-heap/
use std::cmp;
use std::collections::BinaryHeap;

impl Solution {
  pub fn minimum_deviation(nums: Vec<i32>) -> i32 {
    let mut heap: BinaryHeap<i32> = BinaryHeap::with_capacity(nums.len());
    let mut min_even: i32 = 
      nums.iter().map(|&n| {
        if n % 2 == 1 { heap.push(n * 2); n * 2 }
        else { heap.push(n); n }
    }).min().unwrap();
    
    let mut diff: i32 = i32::MAX;

    loop {
      if let Some(next_max) = heap.pop() {
        diff = cmp::min(diff, next_max - min_even);
        if next_max % 2 == 1 {
          break;
        }
        min_even = cmp::min(min_even, next_max / 2);
        heap.push(next_max / 2);
      }
    }
    diff
  }
}

/*
test cases
[1,2,3,4]
[1,1,1,1,1,1,1]
[4,9,4,5]
[3,5]
[9,4,3,6,2]
*/