// https://leetcode.com/problems/check-if-there-is-a-valid-parentheses-string-path/solutions/2024304/rust-dfs-hashmap-o-rows-cols-rows-cols/
use std::collections::HashMap;
impl Solution {
    pub fn has_valid_path(grid: Vec<Vec<char>>) -> bool {
        fn dfs(r: usize, c: usize, mut cnt: i32, grid: &Vec<Vec<char>>, f: &mut HashMap<(usize, usize, i32), bool>) -> bool {
            let rows = grid.len();
            let cols = grid[0].len();
            let mut ans = false;
            
            if r >= rows || c >= cols {
                f.insert((r,c,cnt), false);
                return false;
            }
            if grid[r][c] == '(' {
                cnt += 1;
            } else {
                cnt -= 1;
            }
            if cnt < 0 {
                f.insert((r,c,cnt), false);
                return false;
            }
            if r == rows - 1 && c == cols - 1 && cnt == 0 {
                f.insert((r,c,cnt), true);
                return true;
            }
            
            if f.contains_key(&(r, c, cnt)) {
                return f[&(r, c, cnt)];
            }

            let ans = dfs(r+1, c, cnt, &grid, f) || dfs(r, c+1, cnt, &grid, f);
            f.insert((r,c,cnt), ans);
            ans
        }
        
        let mut f: HashMap<(usize, usize, i32), bool> = HashMap::new();
        
        let ans = dfs(0, 0, 0, &grid, &mut f);
        ans
    }
}