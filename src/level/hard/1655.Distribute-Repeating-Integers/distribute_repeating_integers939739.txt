// https://leetcode.com/problems/distribute-repeating-integers/solutions/939739/rust-backtracking/
use std::collections::HashMap;

impl Solution {
    fn backtrack(counts: &mut Vec<i32>, quantity: &Vec<i32>, index: usize) -> bool {
        if index == quantity.len() {
            return true;
        }
        for i in 0..counts.len() {
            if counts[i] >= quantity[index] {
                let p = quantity[index];
                counts[i] -= p;
                if (Self::backtrack(counts, quantity, index+1)) {
                    return true;
                }
                counts[i] += p;
            }
        }
        false
    }
    
    
    pub fn can_distribute(nums: Vec<i32>, mut quantity: Vec<i32>) -> bool {
        let mut counts = HashMap::new();
        for n in nums.iter() {
            let mut entry = counts.entry(*n).or_insert(0);
            *entry += 1;
        }
        let mut counts = counts.values().map(|x| *x).collect::<Vec<_>>();
        counts.sort_by(|a,b| b.cmp(a));
        quantity.sort_by(|a,b| b.cmp(a));
        
        Self::backtrack(&mut counts, &quantity, 0)
        
    }
}