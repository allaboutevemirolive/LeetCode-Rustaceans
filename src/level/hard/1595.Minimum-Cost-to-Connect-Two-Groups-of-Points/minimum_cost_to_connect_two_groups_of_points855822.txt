// https://leetcode.com/problems/minimum-cost-to-connect-two-groups-of-points/solutions/855822/rust-translated-24ms-100/
impl Solution {
    pub fn connect_two_groups(cs: Vec<Vec<i32>>) -> i32 {
        let m = cs.len();
        let n = cs[0].len();
        let msk = 1 << m;
        let mut dp = vec![std::i32::MAX; msk];
        dp[0] = 0;
        for i in 0..n {
            let mut tmp = vec![std::i32::MAX; msk];
            // tmp[0] = 0; // you can not leave the previous lines without connections.
            for k in 0..msk {
                for j in 0..m {
                    let mask = k | (1 << j);
                    if dp[k] != std::i32::MAX {
                        tmp[mask] = std::cmp::min(tmp[mask], dp[k] + cs[j][i]);
                    }
                    if (k & (1 << j)) == 0 && tmp[k] != std::i32::MAX {
                        tmp[mask] = std::cmp::min(tmp[mask], tmp[k] + cs[j][i]);
                    }
                }
            }
            dp = tmp;
        }
        dp[msk - 1]
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_connect_two_groups() {
        assert_eq!(
            Solution::connect_two_groups(vec![vec![15, 96], vec![36, 2]]),
            17
        );
    }

    #[test]
    fn test_connect_two_groups_02() {
        assert_eq!(
            Solution::connect_two_groups(vec![vec![1, 3, 5], vec![4, 1, 1], vec![1, 5, 3]]),
            4
        );
    }

    #[test]
    fn test_connect_two_groups_03() {
        assert_eq!(
            Solution::connect_two_groups(vec![
                vec![2, 5, 1],
                vec![3, 4, 7],
                vec![8, 1, 2],
                vec![6, 2, 4],
                vec![3, 8, 8]
            ]),
            10
        );
    }
}