// https://leetcode.com/problems/paint-house-iii/solutions/2253802/rust-dp-with-o-target-n-space/
impl Solution {
    pub fn min_cost(houses: Vec<i32>, cost: Vec<Vec<i32>>, m: i32, n: i32, target: i32) -> i32 {
        let mut dp = vec![vec![None; n as usize]; target as usize];
        if houses[0] == 0 {
            for k in 0..n as usize {
                dp[0][k] = Some(cost[0][k]);
            }
        }
        else {
            dp[0][houses[0] as usize - 1] = Some(0);
        }

        for i in 1..m as usize {
            let mut dp2 = vec![vec![None; n as usize]; target as usize];
            for j in 0..target as usize {
                for k in 0..n as usize {
                    if let Some(c) = dp[j][k] {
                        if houses[i] == 0 {
                            for color in 0..n as usize {
                                Self::paint(color, c + cost[i][color],
                                    j, k, &mut dp2);
                            }
                        }
                        else {
                            Self::paint(houses[i] as usize - 1, c,
                                j, k, &mut dp2);
                        }
                    }
                }
            }
            dp = dp2;
        }
        dp[target as usize - 1].iter()
            .filter_map(|&opt| opt)
            .min().unwrap_or(-1)
    }

    fn paint(color: usize, set_cost: i32,
    j: usize, k: usize, dp2: &mut Vec<Vec<Option<i32>>>) {
        let neigh = if color == k { j } else { j + 1 };
        if neigh < dp2.len() {
            dp2[neigh][color] = match dp2[neigh][color] {
                Some(c) => Some(c.min(set_cost)),
                None => Some(set_cost),
            };
        }
    }
}