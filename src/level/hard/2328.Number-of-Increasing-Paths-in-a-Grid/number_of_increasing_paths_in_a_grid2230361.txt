// https://leetcode.com/problems/number-of-increasing-paths-in-a-grid/solutions/2230361/rust-top-down-dp/
const MOD: i64 = 1000000007;

impl Solution {
    pub fn count_paths(grid: Vec<Vec<i32>>) -> i32 {
        let mut grid = grid.clone();
        let m = grid.len();
        let n = grid[0].len();

        for i in 0..m {
            grid[i].insert(0, 0);
            grid[i].push(0);
        }
        grid.insert(0, vec![0; n + 2]);
        grid.push(vec![0; n + 2]);

        let mut dp = vec![vec![1i64; n + 2]; m + 2];
        let dx = [1, 0, (1usize).wrapping_neg(), 0];
        let dy = [0, 1, 0, (1usize).wrapping_neg()];

        let mut node = vec![];
        for i in 1..=m {
            for j in 1..=n {
                node.push((grid[i][j], i, j));
            }
        }
        node.sort();

        for &(v, x, y) in node.iter().rev() {
            for i in 0..4 {
                let xn  = x + dx[i];
                let yn  = y + dy[i];
                if grid[xn][yn] != 0 && grid[xn][yn] < v {
                    dp[xn][yn] = (dp[xn][yn] + dp[x][y]) % MOD
                }
            }
        }

        let mut tot = 0i64;
        for i in 1..=m {
            for j in 1..=n {
                tot += dp[i][j];
                tot %= MOD;
            }
        }
        tot as i32
    }
}
