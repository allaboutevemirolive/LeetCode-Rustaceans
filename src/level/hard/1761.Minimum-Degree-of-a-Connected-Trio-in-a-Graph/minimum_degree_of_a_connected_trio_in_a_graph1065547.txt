// https://leetcode.com/problems/minimum-degree-of-a-connected-trio-in-a-graph/solutions/1065547/rust-precompute-adjacency-matrix/
const N: usize = 401;

impl Solution {
    pub fn min_trio_degree(n: i32, edges: Vec<Vec<i32>>) -> i32 {
        let mut conn = [[false; N]; N];
        let mut deg = [0; N];
        for (_i, e) in edges.iter().enumerate() {
            let (u, v) = (e[0] as usize, e[1] as usize);
            deg[u] += 1;
            deg[v] += 1;
            conn[u][v] = true;
            conn[v][u] = true;
        }
        let mut res = std::i32::MAX;
        for i in 0..N {
            for j in i + 1..N {
                if conn[i][j] {
                    for k in j + 1..N {
                        if conn[i][k] && conn[j][k] {
                            res = std::cmp::min(res, deg[i] + deg[j] + deg[k] - 6);
                        }
                    }
                }
            }
        }
        if res == std::i32::MAX {
            -1
        } else {
            res
        }
    }
}