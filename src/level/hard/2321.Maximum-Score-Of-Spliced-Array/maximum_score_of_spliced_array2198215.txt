// https://leetcode.com/problems/maximum-score-of-spliced-array/solutions/2198215/rust-linear-scan-actually-sliding-window/
/// @author: Leon
/// https://leetcode.com/problems/check-if-matrix-is-x-matrix/
/// Time Complexity:    O(`len_n`)
/// Space Complexity:   O(1)
impl Solution {
    pub fn maximums_spliced_array(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {
        std::cmp::max(
            Self::get_max_sum(&nums1, &nums2),
            Self::get_max_sum(&nums2, &nums1),
        )
    }
    fn get_max_sum(nums1: &Vec<i32>, nums2: &Vec<i32>) -> i32 {
        let len_n: usize = nums1.len();
        let sum_total: i32 = nums1.iter().sum::<i32>();
        let mut sum = sum_total;
        // the running and accumulated extra
        let mut extra: i32 = 0;
        let mut largest: i32 = sum_total;
        for idx in 0..len_n {
            let diff: i32 = nums2[idx] - nums1[idx];
            extra += diff;
            if extra < 0 {
                // to reset everything
                extra = 0;
                sum = sum_total;
            } else {
                sum += diff;
                largest = std::cmp::max(largest, sum);
            }
        }
        largest
    }
}