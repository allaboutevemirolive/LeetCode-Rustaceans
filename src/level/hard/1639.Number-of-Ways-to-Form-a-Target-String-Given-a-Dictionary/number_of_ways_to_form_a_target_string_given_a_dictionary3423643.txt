// https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/solutions/3423643/rust-space-and-time-optimized/
impl Solution {
    pub fn num_ways(words: Vec<String>, target: String) -> i32 {
        if words.len() == 0 {
            return 0;
        }
        let n = words[0].len();
        let m = target.len();
        let target: Vec<_> = target.chars().map(|x| x as usize).collect();
        if m > n {
            return 0;
        }

        let a = 'a' as usize;
        let mut counts = vec![vec![0; 26]; n];
        for i in words.iter() {
            for (ind, j) in i.chars().enumerate() {
                counts[ind][j as usize - a] += 1;
            }
        }

        let mut dp = vec![vec![0i64; m + 1]; 2];
        for i in 0..2 {
            dp[i][m] = 1;
        }


        let mut cur = 0;
        let mut prev = 1;
        for k in (0..n).rev() {
            for i in (m-(n-k).min(m)..m.min(k+1)).rev() {
                dp[cur][i] = counts[k][target[i] - 'a' as usize] * dp[prev][i + 1] + dp[prev][i];
                dp[cur][i] %= 1_000_000_007
            }
            prev = cur;
            cur = 1 - cur;
        }

        return dp[prev][0] as i32;
    }
}