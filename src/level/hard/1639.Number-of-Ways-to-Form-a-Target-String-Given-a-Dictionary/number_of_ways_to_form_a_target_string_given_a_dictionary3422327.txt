// https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/solutions/3422327/rust-dp/
impl Solution {
    pub fn num_ways(words: Vec<String>, target: String) -> i32 {
        let n = words[0].len();
        let m = target.len();
        let target: Vec<_> = target.bytes().map(|c| (c - b'a') as usize).collect();

        let mut count = vec![vec![0; 26]; n];
        for word in words {
            for (j, b) in word.bytes().enumerate() {
                count[j][(b - b'a') as usize] += 1;
            }
        }

        let mut dp = vec![vec![0u64; m]; n];
        dp[0][0] = count[0][target[0]];
        let mm = 1_000_000_007;

        for i in 1..n {
            dp[i][0] = (count[i][target[0]] + dp[i - 1][0]) % mm;
            for j in 1..m {
                dp[i][j] = (dp[i - 1][j - 1] * count[i][target[j]] + dp[i - 1][j]) % mm;
            }
        }

        dp[n - 1][m - 1] as i32
    }
}