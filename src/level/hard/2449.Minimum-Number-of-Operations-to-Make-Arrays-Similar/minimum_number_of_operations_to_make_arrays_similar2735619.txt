// https://leetcode.com/problems/minimum-number-of-operations-to-make-arrays-similar/solutions/2735619/rust-sort-count/
impl Solution {
    pub fn make_similar(nums: Vec<i32>, target: Vec<i32>) -> i64 {
        let (mut v1_even, mut v1_odd) = (vec![], vec![]);
        let (mut v2_even, mut v2_odd) = (vec![], vec![]);

        for a in nums {
            if a % 2 == 0 { v1_even.push(a); }
            else          { v1_odd.push(a); }
        }
        for a in target {
            if a % 2 == 0 { v2_even.push(a); }
            else          { v2_odd.push(a); }
        }
        
        v1_even.sort();
        v1_odd.sort();
        v2_even.sort();
        v2_odd.sort();

        let mut ret = 0;

        while v1_even.is_empty() == false {
            let b = v1_even[v1_even.len() - 1] - v2_even[v2_even.len() - 1];
            if b > 0 { ret += b as i64 / 2; }
            v1_even.pop();
            v2_even.pop();
        }
        while v1_odd.is_empty() == false {
            let b = v1_odd[v1_odd.len() - 1] - v2_odd[v2_odd.len() - 1];
            if b > 0 { ret += b as i64 / 2; }
            v1_odd.pop();
            v2_odd.pop();
        }
         
        ret
    }
}