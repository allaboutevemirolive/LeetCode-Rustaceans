// https://leetcode.com/problems/paths-in-matrix-whose-sum-is-divisible-by-k/solutions/2679025/rust-dp/
impl Solution {
    pub fn number_of_paths(grid: Vec<Vec<i32>>, k: i32) -> i32 {
        let (m,n) = (grid.len(), grid[0].len());
        let k = k as usize;
        let modulo = 1_000_000_007;
        
        let mut dp = vec![vec![vec![0;k]; n]; m];
        dp[0][0][grid[0][0] as usize % k] = 1;
        
        let mut result = 0;
        
        for i in 0..m {
            for j in 0..n {
                if i > 0 {
                    for m in 0..dp[i-1][j].len() {
                        if dp[i-1][j][m] > 0 {
                            let sum_mod = (m + grid[i][j] as usize) % k;
                            
                            dp[i][j][sum_mod] = (dp[i][j][sum_mod] + dp[i-1][j][m]) % modulo;
                        }
                    }
                }
                if j > 0 {
                    for m in 0..dp[i][j-1].len() {                        
                        if dp[i][j-1][m] > 0 {
                            let sum_mod = (m + grid[i][j] as usize) % k;
                            
                            dp[i][j][sum_mod] = (dp[i][j][sum_mod] + dp[i][j-1][m]) % modulo;
                        }
                    }
                }
            }
        }
        
        return dp[m-1][n-1][0] as i32;
    }
}