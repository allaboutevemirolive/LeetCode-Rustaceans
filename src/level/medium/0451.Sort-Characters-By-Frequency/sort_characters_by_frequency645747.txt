// https://leetcode.com/problems/sort-characters-by-frequency/solutions/645747/rust-o-n-4ms/
use std::collections::HashMap;
use std::iter;

impl Solution {
    fn char_counter(s: &String) -> HashMap<char, usize> {
        let mut counter = HashMap::new();

        s.chars().for_each(|c| {
            counter
                .entry(c)
                .and_modify(|e| { *e += 1 })
                .or_insert(1);
        });

        counter
    }
    
    pub fn frequency_sort(s: String) -> String {
        if s.is_empty() { return String::from("") }
        
        let char_freq = Self::char_counter(&s);
        let (min, max) = (
            char_freq.values().min().unwrap(),
            char_freq.values().max().unwrap(),
        );
        let group = char_freq
            .iter()
            .fold(vec![Vec::<char>::new(); max - min + 1], |mut acc, (k, v)| {
                acc[*v - min].push(*k);
                acc
            });

        group
            .iter()
            .enumerate()
            .rev()
            .filter(|(i, chars)| !chars.is_empty())
            .map(|(i, chars)| {
                chars
                    .iter()
                    .map(|c| iter::repeat(c).take(i+min).collect::<String>())
                    .collect::<Vec<String>>()
                    .concat()
            })
            .collect::<Vec<String>>()
            .concat()
    }
}