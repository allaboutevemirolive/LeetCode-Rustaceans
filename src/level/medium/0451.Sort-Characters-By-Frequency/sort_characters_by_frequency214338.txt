// https://leetcode.com/problems/sort-characters-by-frequency/solutions/214338/rust-solution-using-hashmap-to-count-frequency/
use std::collections::HashMap;

impl Solution {
    pub fn frequency_sort(s: String) -> String {
        let mut counter = HashMap::new();
        for ch in s.chars() {
            let count = counter.entry(ch).or_insert(0);
            *count += 1
        }
        let mut l = counter.iter().collect::<Vec<(&char, &i32)>>();
        l.sort_unstable_by(|a, b| b.1.cmp(a.1));
        
        let mut rtn = vec![];
        for (&ch, &count) in l {
            for _ in 0..count {
                rtn.push(ch);
            }
        }
        return rtn.iter().collect::<String>();
    }
}