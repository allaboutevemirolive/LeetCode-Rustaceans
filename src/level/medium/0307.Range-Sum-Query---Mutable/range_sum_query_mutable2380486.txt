// https://leetcode.com/problems/range-sum-query-mutable/solutions/2380486/rust-segment-tree-with-bitwise-operator/
struct NumArray {
    tree: Vec<i32>,
    n: usize,
}


/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
impl NumArray {

    fn new(nums: Vec<i32>) -> Self {
        let n = nums.len();
        let mut tree = vec![0; n * 2];
        
        for i in 0..n {
            tree[i + n] = nums[i];
        }
        
        for i in (1..n).rev() {
            tree[i] = tree[i << 1] + tree[i << 1 | 1];
        }
        Self {
            tree,
            n
        }
    }
    
    fn update(&mut self, index: i32, val: i32) {
        let mut index = self.n + index as usize; 
        
        self.tree[index] = val;
        while index > 0 {
            self.tree[index >> 1] = self.tree[index] + self.tree[index ^ 1];
            index >>= 1;
        }
    }
    
    fn sum_range(&self, left: i32, right: i32) -> i32 {
        let mut left = self.n + left as usize;
        let mut right = self.n + right as usize;
        let mut sum = 0;
        while left <= right {
            if left & 1 == 1 {
                sum += self.tree[left];
                left += 1;
            }
            if right & 1 == 0 {
                sum += self.tree[right];
                right -= 1;
            }
            left >>= 1;
            right >>= 1;
        }
        sum
    }
}
