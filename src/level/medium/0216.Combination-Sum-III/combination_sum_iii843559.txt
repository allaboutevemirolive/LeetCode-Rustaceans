// https://leetcode.com/problems/combination-sum-iii/solutions/843559/backtracking-in-rust/
impl Solution {
    pub fn combination_sum3(k: i32, n: i32) -> Vec<Vec<i32>> {
        let mut combs = vec![];
        fn backtrack(target: i32, mut combs: &mut Vec<Vec<i32>>, mut comb: &mut Vec<i32>, limit: usize, start: i32) {
            if target == 0 && comb.len() == limit {
                combs.push(comb.to_vec());
            } else if target > 0 && comb.len() < limit {
                for i in start..=9 {
                    comb.push(i);
                    backtrack(target-i, &mut combs, &mut comb, limit, i+1);
                    comb.pop();
                }
            }
        }
        let mut comb = vec![];
        backtrack(n, &mut combs, &mut comb, k as usize, 1);
        combs
    }
}