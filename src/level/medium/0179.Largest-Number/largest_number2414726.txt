// https://leetcode.com/problems/largest-number/solutions/2414726/rust-two-solutions-sorting-numbers-sorting-strings/
use std::fmt::Write as _;

pub fn largest_number(mut nums: Vec<i32>) -> String {
    nums.sort_unstable_by(|&a, &b| {
        let la = len(a);
        let lb = len(b);

        let x = (a as i64) * 10i64.pow(lb) + b as i64;
        let y = (b as i64) * 10i64.pow(la) + a as i64;

        x.cmp(&y).reverse()
    });

    // If the first element is 0, then all the rest are zeroes as well
    if nums[0] == 0 {
        return "0".to_owned();
    }

    let mut answer = String::with_capacity(nums.len() * 2);
    for n in nums {
        // use the write macro in order to avoid
        // allocating new strings just to write them 
        // in another string
        write!(answer, "{}", n).unwrap();
    }

    answer
}

// replacement for the not yet stable "integer log10"
fn len(mut x: i32) -> u32 {
    if x == 0 {
        return 1;
    }

    let mut l = 0;
    while x > 0 {
        x /= 10;
        l += 1;
    }
    l
}