// https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/1989410/rust/
pub fn length_of_longest_substring(s: String) -> i32 {
    let mut map = HashMap::<char, usize>::new();
    let mut result = 0;
    let mut sum = 0;
    for (i, ch) in s.chars().into_iter().enumerate() {
        let entry = map.entry(ch).or_insert(i);

		// It's either first occurance or it happened earlier.
        if i == *entry || i - *entry > sum {
            sum += 1;
        } else { // We found duplicate, we need to update result
            result = std::cmp::max(sum, result);
			// a b c b d f
			//       1 2
			// We found dublicate b (2), but we have to start new counting from the moment after first b occurance, it means we have to count from c(1)
            sum = i - *entry;
        }

        *entry = i;
    }
    std::cmp::max(result, sum) as i32
}