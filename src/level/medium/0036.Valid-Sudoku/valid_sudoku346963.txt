// https://leetcode.com/problems/valid-sudoku/solutions/346963/constructive-rust/
use std::collections::HashSet;
impl Solution {
    pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {
        let mut col_sets = vec![HashSet::with_capacity(9); 9];
        let mut box_sets = vec![HashSet::with_capacity(9); 3];

        for (ri, r) in board.iter().enumerate() {
            let mut row_set = HashSet::with_capacity(9);
            if ri != 0 && ri % 3 == 0 {
                box_sets = vec![HashSet::with_capacity(9); 3];
            }
            for (ci, c) in r.iter().enumerate() {
                if *c == '.' {
                    continue
                }
                // Rule 1
                if !row_set.insert(c) {
                    // println!("duplicate in row {}, {}", ri, c);
                    return false
                }

                // Rule 2
                if !col_sets[ci].insert(c) {
                    // println!("duplicate in col {}, {}", ci, c);
                    return false
                }

                // Rule 3
                let box_i = ci / 3;
                if !box_sets[box_i].insert(c) {
                    // println!("duplicate in box {}, {}", box_i, c);
                    return false
                }
            }
        }
        return true
    }
}
