// https://leetcode.com/problems/valid-sudoku/solutions/2231935/rust-solution/
use std::collections::{HashSet};

impl Solution {
    pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {
        check_rows(&board) && check_columns(&board) && check_blocks(&board)
    }
}

fn check_blocks(board: &[Vec<char>]) -> bool {
    for row_begin in (0..7).step_by(3) {
        for column_begin in (0..7).step_by(3) {
            let block = iter_block(&board, row_begin, column_begin);
            if !is_valid_set(&block) {
                return false;
            }
        }
    }
    true
}

fn iter_block(board: &[Vec<char>], row_begin: usize, column_begin: usize) -> Vec<char> {
    let mut set = Vec::new();
    for r in 0..3 {
        for c in 0..3 {
            let row = row_begin + r;
            let column = column_begin + c;
            set.push(board[row][column]);
        }
    }
    set
}

fn check_columns(board: &[Vec<char>]) -> bool {
    (0..board.len())
        .all(|column| is_valid_set(&board.iter().map(|x| x[column]).collect::<Vec<char>>()))
}

fn check_rows(board: &Vec<Vec<char>>) -> bool {
    board.iter().all(|row| is_valid_set(row))
}

fn is_valid_set(chars: &[char]) -> bool {
    chars.iter().filter(|x| **x != '.').count()
        == chars
            .iter()
            .filter(|x| **x != '.')
            .cloned()
            .collect::<HashSet<char>>()
            .len()
}
