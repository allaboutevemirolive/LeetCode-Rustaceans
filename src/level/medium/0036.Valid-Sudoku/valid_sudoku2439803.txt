// https://leetcode.com/problems/valid-sudoku/solutions/2439803/rust-simple/
use core::ops::Range;
use std::collections::HashSet;

impl Solution {
    pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {
        Self::validate_rows(&board) && Self::validate_cols(&board)
            && Self::validate_blocks(&board)
    }

    fn validate(board: &[Vec<char>], rows: Range<usize>, cols: Range<usize>) -> bool {
        let mut seen = HashSet::new();
        for i in rows {
            for j in cols.clone() {
                if board[i][j] != '.' && seen.contains(&board[i][j]) {
                    return false;
                } else {
                    seen.insert(board[i][j]);
                }
            }
        }

        true
    }

    fn validate_rows(board: &[Vec<char>]) -> bool {
        (0..9).into_iter().all(|i| Self::validate(board, i..i+1, 0..9))
    }

    fn validate_cols(board: &[Vec<char>]) -> bool {
        (0..9).into_iter().all(|i| Self::validate(board, 0..9, i..i+1))
    }

    fn validate_blocks(board: &[Vec<char>]) -> bool {
        for i in 0..3 {
            let row = i * 3;
            for j in 0..3 {
                let col = j * 3;
                if !Self::validate(board, row..row+3, col..col+3) {
                    return false
                }
            }
        }

        true
    }
}
