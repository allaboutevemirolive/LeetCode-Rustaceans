// https://leetcode.com/problems/number-of-islands/solutions/336565/rust-solution/
impl Solution {
    pub fn num_islands(grid: Vec<Vec<char>>) -> i32 {
        let mut grid = grid;
        if grid.is_empty() {
            return 0;
        }
        
        let mut res = 0;
        let m = grid.len();
        let n = grid[0].len();
        
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == '1' {
                    res += 1;
                    Self::sink_island(&mut grid, i, j, m, n);
                }
            }
        }
        res
    }
    
    fn sink_island(grid: &mut Vec<Vec<char>>, i: usize, j: usize, m: usize, n: usize) {
        if grid[i][j] == '0' {
            return;
        }
        grid[i][j] = '0';
        
        if i > 0 {
            Self::sink_island(grid, i-1, j, m, n);
        }
        if j > 0 {
            Self::sink_island(grid, i, j-1, m, n);
        }
        if i < m - 1 {
            Self::sink_island(grid, i+1, j, m, n);
        }
        if j < n - 1 {
            Self::sink_island(grid, i, j+1, m, n);
        }
        
    }
}