// https://leetcode.com/problems/number-of-islands/solutions/384785/4ms-rust/
impl Solution {
    pub fn num_islands(mut grid: Vec<Vec<char>>) -> i32 {
        // BFS all land tiles
        let (row, col) = (grid.len(), if grid.is_empty() { 0 } else { grid[0].len() });
        let mut result = 0;
        for i in 0..row {
            for j in 0..col {
                if grid[i][j] == '0' {
                    continue;
                }
                result += 1;
                Solution::dfs(&mut grid, i, j);
            }
        }
        result
    }
    
    fn dfs(grid: &mut Vec<Vec<char>>, row_idx: usize, col_idx: usize) {
        use std::collections::VecDeque;
        let mut v: Vec<(usize, usize)> = vec![];
        v.push((row_idx, col_idx));
        while !v.is_empty() {
            let (i, j) = v.pop().unwrap();
            grid[i][j] = '0';
            if i+1 < grid.len() {
                if grid[i+1][j] == '1' {
                    v.push((i+1, j));
                }
            }
            if j+1 < grid[0].len() {
                 if grid[i][j+1] == '1' {
                     v.push((i, j+1));
                }
            }
            if i > 0 {
                if grid[i-1][j] == '1' {
                    v.push((i-1, j));
                }
            }
            if j > 0 {
                 if grid[i][j-1] == '1' {
                     v.push((i, j-1));
                }
            }
        }
    }
}