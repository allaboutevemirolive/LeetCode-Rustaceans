// https://leetcode.com/problems/kth-largest-element-in-an-array/solutions/408941/rust-solution/
impl Solution {
    pub fn find_kth_largest(nums: Vec<i32>, k: i32) -> i32 {
        let mut nums = nums;
        let length = nums.len();
        Self::select(&mut nums, k as usize - 1, 0, length - 1)
    }
    
    fn select(nums: &mut Vec<i32>, k: usize, left: usize, right: usize) -> i32 {
        let pivot = nums[(left+right)/2];
        
        let mut l = left;
        let mut r = right;
        
        'outer: while l <= r {
            while nums[l] > pivot {
                l += 1;
            }
            while nums[r] < pivot {
                if r == 0 {
                    break 'outer;
                }
                r -= 1;
            }
            
            
            if l <= r {
                nums.swap(l, r);
                l += 1;
                if r == 0 {
                    break 'outer;
                }
                r -= 1;
            }
        }
        
        if left < r && k <= r {
            return Self::select(nums, k, left, r);
        } else if l < right && k >= left {
            return Self::select(nums, k, l, right);
        }
        nums[k]
    }
}