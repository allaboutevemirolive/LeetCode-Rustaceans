// https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/solutions/548343/rust-clean-solution-dfs-0ms/
use std::cell::RefCell;
use std::rc::Rc;
impl Solution {
    pub fn zigzag_level_order(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
        let mut result: Vec<Vec<i32>> = vec![];
        dfs(&root, &mut result, 0);
        reverse_odd(&mut result);

        result
    }
}

fn dfs(node: &Option<Rc<RefCell<TreeNode>>>, arr: &mut Vec<Vec<i32>>, depth: usize) {
    let node = match node {
        Some(x) => Rc::clone(x),
        None => return,
    };

    if arr.len() <= depth {
        arr.push(vec![]);
    }

    arr[depth].push(node.borrow().val);
    dfs(&node.borrow().left, arr, depth + 1);
    dfs(&node.borrow().right, arr, depth + 1);
}

fn reverse_odd(arr: &mut Vec<Vec<i32>>) {
    for ind in (1..arr.len()).step_by(2) {
        arr[ind].reverse();
    }
}