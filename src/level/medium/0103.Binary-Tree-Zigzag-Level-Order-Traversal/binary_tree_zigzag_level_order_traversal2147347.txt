// https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/solutions/2147347/rust-bfs/
use std::cell::RefCell;
use std::collections::VecDeque;
use std::rc::Rc;

pub fn zigzag_level_order(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
    let mut res = vec![];
    if root.is_none() {
        return res;
    }

    let mut queue = VecDeque::with_capacity(1);
    queue.push_back((root, 0));

    let mut current_layer = VecDeque::new();
    let mut current_level = 0;

    while let Some((node, level)) = queue.pop_front() {
        if current_level != level {
            let mut v = current_layer.clone();
            v.shrink_to_fit();
            res.push(Vec::from(v));
            current_layer.clear();
            current_level = level;
        }

        match node {
            Some(rc_node) => {
                let val = rc_node.borrow().val;
                if level % 2 == 0 {
                    current_layer.push_back(val);
                } else {
                    current_layer.push_front(val);
                }

                queue.push_back((rc_node.borrow().left.clone(), level + 1));
                queue.push_back((rc_node.borrow().right.clone(), level + 1));
            }
            None => {
                continue;
            }
        }
    }
    res
}