// https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/solutions/1187587/rust-0ms-2-2mb/
use std::rc::Rc;
use std::cell::RefCell;
use std::collections::VecDeque;

struct Solution;

impl Solution {
    pub fn zigzag_level_order(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
        let mut res = Vec::new();
        if root.is_none() {
            return res;
        }
		let mut zig = false;
        let mut queue = VecDeque::new();
        queue.push_front(root.unwrap());
        while !queue.is_empty() {
            let mut tmp = Vec::new();
            let len = queue.len();
            for _ in 0..len {
                let node = queue.pop_front().unwrap();
                tmp.push(node.borrow().val);
                if node.borrow().left.is_some() {
                    queue.push_back(node.borrow().left.clone().unwrap());
                }
                if node.borrow().right.is_some() {
                    queue.push_back(node.borrow().right.clone().unwrap());
                }
            }
			if zig {
				tmp.reverse();
			}
			zig = !zig;
            res.push(tmp);
        }

        res
    }
}
