// https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/solutions/2075396/rust-0ms-2-2mb/
use std::rc::Rc;
use std::collections::VecDeque;
use std::cell::RefCell;
type Node = Option<Rc<RefCell<TreeNode>>>;
impl Solution {
    pub fn zigzag_level_order(root: Node) -> Vec<Vec<i32>> {
        let (mut res, mut queue) = (vec![], VecDeque::new());
        queue.push_back((root, 0));
        while let Some((node, lvl)) = queue.pop_front() { 
            if let Some(rc) = node { 
                
                let TreeNode { val, left, right} = Rc::try_unwrap(rc)
                    .unwrap().into_inner();
                if lvl >= res.len() { 
                    res.resize(lvl + 1, vec![]);
                }
                res[lvl].push(val);
                queue.push_back((left, lvl + 1));
                queue.push_back((right, lvl + 1));
            }  
        }
        for i in 0..res.len() { 
            if i % 2 == 1 { 
                res[i].reverse();
            } else { 
                continue
            }
        }        
        res
    }
}