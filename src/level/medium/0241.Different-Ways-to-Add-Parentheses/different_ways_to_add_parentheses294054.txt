// https://leetcode.com/problems/different-ways-to-add-parentheses/solutions/294054/rust-0ms-solution-divide-and-conquer/
impl Solution {
    pub fn diff_ways_to_compute(input: String) -> Vec<i32> {
        Solution::helper(&input)
    }

    pub fn helper(input: &str) -> Vec<i32> {
        if input.is_empty() { return vec![] }
        if let Ok(digit) = input.parse::<i32>() {
            return vec![digit]
        }
        let mut res: Vec<i32> = Vec::new();
        for (i, ch) in input.chars().enumerate() {
            if ch == '+' || ch == '-' || ch == '*' {
                let left = Solution::helper(&input[..i]);
                let right = Solution::helper(&input[i+1..]);
                for &a in left.iter() {
                    for &b in right.iter() {
                        res.push(match ch {
                            '+' => a + b,
                            '-' => a - b,
                            '*' => a * b,
                            _ => unreachable!(),
                        })
                    }
                }
            }
        }
        res
    }
}