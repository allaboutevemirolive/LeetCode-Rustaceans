// https://leetcode.com/problems/heaters/solutions/2589722/rust-solution-using-binary-search/
impl Solution {
    pub fn find_radius(houses: Vec<i32>, heaters: Vec<i32>) -> i32 {
        let mut ho = houses.into_iter().map(|v| v as usize).collect::<Vec<usize>>();
        let mut he = heaters.into_iter().map(|v| v as usize).collect::<Vec<usize>>();
        he.sort();
        ho.sort();
    
        let n = ho.len();
        let mut l = 0;
        let mut r = 10usize.pow(9)+10;
        while l < r {
            let mid = (l+r) / 2;
            let mut ci = 0;
            for i in 0..he.len() {
                let min = he[i].saturating_sub(mid);
                let max = he[i] + mid;
        
                while ci < n {
                    if min <= ho[ci] && ho[ci] <= max {
                        ci += 1;
                    } else {
                        break
                    }
                }
            }
    
            if ci == n {
                r = mid;
            } else {
                l = mid+1;
            }
        }
        l as i32
    }
}