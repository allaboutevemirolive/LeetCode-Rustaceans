// https://leetcode.com/problems/shuffle-an-array/solutions/808073/rust-easy-solution/
Rust Solution

struct Solution {
  nums: Vec<i32>
}


/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
use rand::thread_rng;
use rand::seq::SliceRandom;

impl Solution {

	fn new(nums: Vec<i32>) -> Self {

	  let obj = Solution{nums: nums};      

	  return obj;

	}

	/** Resets the array to its original configuration and return it. */
	fn reset(&self) -> Vec<i32> {

	  return self.nums.clone();
	}

	/** Returns a random shuffling of the array. */
	fn shuffle(&self) -> Vec<i32> {

	  let mut rng = thread_rng();

	  let mut newNumClone = self.nums.clone();

	  newNumClone.shuffle(&mut rng);

	  return newNumClone;

	}
}