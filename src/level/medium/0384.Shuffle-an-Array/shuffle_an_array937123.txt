// https://leetcode.com/problems/shuffle-an-array/solutions/937123/rust-reveals-how-awful-the-solution-checking-done-at-leetcode/
use rand::{Rng, SeedableRng, seq::SliceRandom, rngs::StdRng, rngs::ThreadRng};

struct Solution {
    orig: Vec<i32>,
    //rng: ThreadRng
    rng: StdRng
}


impl Solution {

    fn new(nums: Vec<i32>) -> Self {
       Solution{ 
            orig: nums.clone(),
            //rng: rand::thread_rng()
            rng: StdRng::seed_from_u64(0)
        }
    }

/////////////////

    /** Returns a random shuffling of the array. */
    fn shuffle(&mut self) -> Vec<i32> {
        let N = self.orig.len();
        let mut ret = self.orig.clone();
        for ii in (0..N)
        {
            let x: usize = self.rng.gen();
            let p1 = x % (N-ii);
            ret.swap(ii, ii+p1);
        }
        
        ret
    }