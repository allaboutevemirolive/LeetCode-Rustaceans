// https://leetcode.com/problems/shuffle-an-array/solutions/1356288/rust-partition-array-o-n/
impl Solution {
    pub fn partition_disjoint(nums: Vec<i32>) -> i32 {
        let mx = Solution::max_l(&nums);
        let mn = Solution::rev_min_l(&nums);
        // println!("{:?}\n{:?}", mx, mn);
        for i in 0..nums.len()-1 {
            if mx[i] <= mn[i+1] {
                return (i+1) as i32
            }
        }
        return (nums.len() - 1) as i32
    }
    
    pub fn max_l(a: &Vec<i32>) -> Vec<i32> {
        let n = a.len();
        let mut result = vec![std::i32::MIN; n];
        result[0] = a[0];
        for i in 1..n {
            result[i] = std::cmp::max(a[i], result[i-1]);
        }
        result
    }
    
    pub fn rev_min_l(a: &Vec<i32>) -> Vec<i32> {
        let n = a.len();
        let mut result = vec![std::i32::MAX; n];
        result[n-1] = a[n-1];
        for i in (0..n-1).rev() {
            result[i] = std::cmp::min(a[i], result[i+1]);
        }
        result
    }
}