// https://leetcode.com/problems/multiply-strings/solutions/1564213/rust-solution/
fn calc_one(num1: &str, num2: char) -> impl Iterator<Item = u8> + '_ {
    let x = num2.to_digit(10).unwrap();
    num1.chars()
        .rev()
        .chain(std::iter::once('0'))
        .scan(0, move |carry, c| {
            let ans = c.to_digit(10).unwrap() * x + *carry;
            *carry = ans / 10;
            Some((ans % 10) as _)
        })
}

fn calc(num1: &str, num2: &str) -> String {
    let mut ans = vec![0; num1.len() + num2.len()];
    for (i, c) in num2.chars().rev().enumerate() {
        let mut carry = 0;
        let until = ans.len() - i;
        for (x, y) in ans[..until].iter_mut().rev().zip(calc_one(num1, c)) {
            let z = *x + y + carry;
            *x = z % 10;
            carry = z / 10;
        }
    }
    ans.into_iter()
        .skip_while(|&x| x == 0)
        .map(|x| (x + b'0') as char)
        .collect()
}

impl Solution {
    pub fn multiply(num1: String, num2: String) -> String {
        let ans = calc(&num1, &num2);
        if ans.is_empty() {
            "0".into()
        } else {
            ans
        }
    }
}
