// https://leetcode.com/problems/binary-tree-level-order-traversal/solutions/1743030/rust-0ms-2-4mb/
use std::rc::Rc;
use std::cell::RefCell;
use std::collections::VecDeque;
type Node = Option<Rc<RefCell<TreeNode>>>;

impl Solution {
    pub fn level_order(root: Node) -> Vec<Vec<i32>> {
        let mut res: Vec<Vec<i32>> = vec![];
        let mut q = VecDeque::new();
        q.push_back((0, root.clone()));
        while let Some((lvl, Some(node))) = q.pop_front() { 
            let node = node.borrow();
            //  Create a new vec per level
            if lvl >= res.len() { 
                res.resize(lvl + 1, vec![])
            }
            res[lvl].push(node.val);
            if let Some(l) = node.left.clone() { 
                q.push_back((lvl +1, Some(l)))
            }
            if let Some(r) = node.right.clone() { 
                q.push_back((lvl + 1, Some(r)))
            }
        } 
        res
    } 
}