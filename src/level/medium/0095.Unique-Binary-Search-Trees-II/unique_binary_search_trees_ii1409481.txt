// https://leetcode.com/problems/unique-binary-search-trees-ii/solutions/1409481/simple-scala-solution-recursive-rust-using-flat-map-0ms/
use std::cmp::Ordering;
use std::rc::Rc;
use std::cell::RefCell;

type Node = Option<Rc<RefCell<TreeNode>>>;

impl Solution {
    pub fn generate_trees(n: i32) -> Vec<Node> {
        fn gen_trees(i: i32, j: i32) -> Vec<Node> {
            match i.cmp(&j) {
                Ordering::Greater => vec![None],
                Ordering::Equal => vec![Some(Rc::new(RefCell::new(TreeNode::new(i))))],
                Ordering::Less =>
                    ((i as usize)..=(j as usize)).flat_map(|k| {
                        let left = gen_trees(i, (k-1) as i32);
                        let right = gen_trees((k+1) as i32, j);
                        left.iter().flat_map(|l| {
                            right
                                .iter()
                                .map(|r| Some(Rc::new(RefCell::new(TreeNode {
                                    val: k as i32,
                                    left: l.clone(),
                                    right: r.clone(),
                                })))).collect::<Vec<Node>>()
                        }).collect::<Vec<Node>>()
                    }).collect()
            }
        }

        gen_trees(1, n)
    }
}