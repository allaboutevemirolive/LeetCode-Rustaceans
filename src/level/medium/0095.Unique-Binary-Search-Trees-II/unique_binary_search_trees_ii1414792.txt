// https://leetcode.com/problems/unique-binary-search-trees-ii/solutions/1414792/rust-solution/
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {
        if n == 0 {
            return vec![];
        }
        
        Self::generate_tree(1, n as usize)
    }
    
    fn generate_tree(start: usize, end: usize) -> Vec<Option<Rc<RefCell<TreeNode>>>> {
        let mut trees = vec![];
        if start > end {
            trees.push(None);
            return trees;
        }
        
        for i in start..=end {
            let left = Self::generate_tree(start, i-1);
            let right = Self::generate_tree(i+1, end);
            
            for l in left.iter() {
                for r in right.iter() {
                    let mut root = TreeNode::new(i as i32);
                    root.left = l.clone();
                    root.right = r.clone();
                    
                    trees.push(Some(Rc::new(RefCell::new(root))));
                }
            }
        }
        
        trees

    }
}