// https://leetcode.com/problems/compare-version-numbers/solutions/725004/rust-cheapest-best/
use std::cmp::Ordering;
use std::i32;

impl Solution {
    pub fn compare_version(mut version1: String, mut version2: String) -> i32 {
        match version1.len().cmp(&version2.len()) {
            Ordering::Less => version1.extend(vec![".0"; (version2.len() - version1.len()) / 2]),
            Ordering::Greater => version2.extend(vec![".0"; (version1.len() - version2.len()) / 2]),
            _ => {}
        }

        version1
            .split('.')
            .map(|a| a.parse::<i32>().unwrap())
            .zip(version2.split('.').map(|b| b.parse::<i32>().unwrap()))
            .try_fold(0, |_, (v1, v2)| {
                if v1 > v2 {
                    Err(1)
                } else if v2 > v1 {
                    Err(-1)
                } else {
                    Ok(0)
                }
            })
            .unwrap_or_else(|x| x)
    }
}