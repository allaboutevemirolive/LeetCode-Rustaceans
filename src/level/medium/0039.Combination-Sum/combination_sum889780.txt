// https://leetcode.com/problems/combination-sum/solutions/889780/simple-rust-solution/
impl Solution {
    pub fn combination_sum(candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {
        match candidates.split_last() {
            None => {
                if target == 0 {
                    vec![vec![]]
                } else {
                    vec![]
                }
            }
            Some((candidate, rest)) => {
                let mut result = vec![];
                for i in 0..=target / candidate {
                    result.append(&mut add_candidate(
                        Solution::combination_sum(Vec::from(rest), target - i * candidate),
                        *candidate,
                        i,
                    ));
                }
                result
            }
        }
    }
}

fn add_candidate(mut results: Vec<Vec<i32>>, candidate: i32, occurrence: i32) -> Vec<Vec<i32>> {
    for result in &mut results {
        result.append(&mut vec![candidate; occurrence as usize])
    }
    results
}
