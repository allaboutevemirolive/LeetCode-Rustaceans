// https://leetcode.com/problems/insert-interval/solutions/1775513/rust-efficient-rust-solution/
pub fn insert(mut intervals: Vec<Vec<i32>>, new_interval: Vec<i32>) -> Vec<Vec<i32>> {
    if intervals.is_empty() {
        // This is the only interval, nothing to do
        return vec![new_interval];
    }

    // Find out the position where it must be inserted in order to
    // preserve the sorting by "start-i"
    let insert_pos = intervals
        .binary_search_by(|ivl| ivl[0].cmp(&new_interval[0]))
        .unwrap_or_else(|e| e);

    let mut sln = vec![];

    // Move the elements that does not need to be merged/processed
    sln.extend(intervals.drain(..insert_pos));

    // Either push or merge the new interval with the last one
    if let Some(last) = sln.last_mut() {
        if last[1] < new_interval[0] {
            sln.push(new_interval);
        } else {
            last[1] = last[1].max(new_interval[1]);
        }
    } else {
        sln.push(new_interval);
    }

    // Either merge ot move the remaining intervals
    for ivl in intervals.into_iter() {
        let last = sln.len() - 1;

        if sln[last][1] >= ivl[0] {
            sln[last][1] = sln[last][1].max(ivl[1]);
            continue;
        }

        sln.push(ivl);
    }

    sln
}