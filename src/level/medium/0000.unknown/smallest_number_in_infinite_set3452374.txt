// https://leetcode.com/problems/smallest-number-in-infinite-set/solutions/3452374/rust-and-python-explanation/
use std::collections::BinaryHeap;
use std::collections::HashSet;

struct SmallestInfiniteSet {
  heap: BinaryHeap<i32>,
  set: HashSet<i32>,
  last: i32,
}

impl SmallestInfiniteSet {

  fn new() -> Self {
    return SmallestInfiniteSet {
      heap: BinaryHeap::new(),
      set: HashSet::new(),
      last: 1,
    }
  }
  
  fn pop_smallest(&mut self) -> i32 {
    if self.heap.len() == 0 {
      self.last += 1;
      return self.last - 1;
    }

    let res = -self.heap.pop().unwrap();
    self.set.remove(&res);
    return res;
  }
  
  fn add_back(&mut self, num: i32) {
    if num < self.last && !self.set.contains(&num) {
      self.heap.push(-num);
      self.set.insert(num);
    }
  }
}