// https://leetcode.com/problems/binary-tree-level-order-traversal-ii/solutions/3197016/rust-bfs-solution/
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn level_order_bottom(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
        use std::collections::*;
        if root.is_none() {
            return vec![];
        }
        let mut paths = vec![];
        let mut q = VecDeque::new();
        q.push_back(root);
        while !q.is_empty() {
            let mut len = q.len();
            let mut same_level_siblings = vec![];
            while len > 0 {
                len -= 1;
                let node = q.pop_front().unwrap().unwrap();
                let node = node.borrow();
                same_level_siblings.push(node.val);
                if node.left.is_some() {
                    q.push_back(node.left.clone());
                }
                if node.right.is_some() {
                    q.push_back(node.right.clone());
                }
            }
            paths.push(same_level_siblings);
        }
        paths.into_iter().rev().collect()    
    }
}