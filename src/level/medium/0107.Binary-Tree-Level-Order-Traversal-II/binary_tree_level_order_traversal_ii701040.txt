// https://leetcode.com/problems/binary-tree-level-order-traversal-ii/solutions/701040/concise-rust-solution-100/
impl Solution { 
    fn helper(root: &Option<Rc<RefCell<TreeNode>>>, result: &mut Vec<Vec<i32>>, depth: usize) {
        let root = match root {
            Some(root) => root,
            None => { return; }
        };
        
        match result.get(depth) {
            Some(_) => result[depth].push(root.borrow().val),
            None => {
                let mut new_row = vec![root.borrow().val];
                result.push(new_row);
            }
        }
        
        Solution::helper(&root.borrow().left, result, depth + 1);
        Solution::helper(&root.borrow().right, result, depth + 1);
    }
    
    pub fn level_order_bottom(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
        let mut result = vec![];
        Solution::helper(&root, &mut result, 0);
        result.reverse();
        result
    }
}