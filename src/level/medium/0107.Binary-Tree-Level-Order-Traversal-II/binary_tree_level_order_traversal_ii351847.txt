// https://leetcode.com/problems/binary-tree-level-order-traversal-ii/solutions/351847/my-bfs-and-dfs-rust-solution/
use std::cell::RefCell;
use std::collections::VecDeque;
use std::rc::Rc;
impl Solution {
    pub fn level_order_bottom(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
        let mut res: Vec<Vec<i32>> = Vec::new();
        if root.is_none() {
            return res;
        }

        let mut vd = VecDeque::new();
        if let Some(ref root) = root {
            res.push(vec![root.borrow().val]);
        }
        vd.push_back(root.unwrap());

        while !vd.is_empty() {
            let mut tmp = Vec::new();
            let len = vd.len();
            for _ in 0..len {
                if let Some(node) = vd.pop_front() {
                    if let Some(left) = node.borrow().left.clone() {
                        tmp.push(left.borrow().val);
                        vd.push_back(left);
                    }
                    if let Some(right) = node.borrow().right.clone() {
                        tmp.push(right.borrow().val);
                        vd.push_back(right);
                    }
                }
            }
            if !tmp.is_empty() {
                res.push(tmp);
            }
        }

        res.reverse();
        res
    }
}