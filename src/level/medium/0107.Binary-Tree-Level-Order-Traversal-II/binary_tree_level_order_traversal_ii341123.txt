// https://leetcode.com/problems/binary-tree-level-order-traversal-ii/solutions/341123/rust-bfs-solution/
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn level_order_bottom(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
        if root.is_none() {
           return vec![]; 
        }
        
        let mut res: Vec<Vec<i32>> = vec![];
        let mut q = vec![root.unwrap()];
        
        while q.len() > 0 {
            let mut new_q = vec![];
            let mut level = vec![];
            for node in &q {
                level.push(node.borrow().val);
            }
            res.push(level);
            
            for node in &q {
                if let Some(left) = node.borrow().left.clone() {
                    new_q.push(left);
                }
                if let Some(right) = node.borrow().right.clone() {
                    new_q.push(right);
                }
            }
            q = new_q;
        }
        res.reverse();
        res
    }
}