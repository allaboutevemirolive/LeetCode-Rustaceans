// https://leetcode.com/problems/binary-tree-level-order-traversal-ii/solutions/874305/rust-bfs-using-vecdeque-0ms/
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn level_order_bottom(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
        use std::collections::VecDeque;
        
        let mut deque: VecDeque<Option<Rc<RefCell<TreeNode>>>> = VecDeque::new();
        let mut res: Vec<Vec<i32>> = Vec::new();
        
        deque.push_back(root.clone());
        while deque.len() > 0 {
            let mut level_vec: Vec<i32> = vec![];
            for i in 0..deque.len() {
                if let Some(Some(node)) = deque.pop_front() {
                    if node.borrow().left.is_some() { deque.push_back(node.borrow().left.clone()); }
                    if node.borrow().right.is_some() { deque.push_back(node.borrow().right.clone()); }
                    level_vec.push(node.borrow().val);
                }
            }
            if level_vec.len() > 0 {
                res.push(level_vec.clone());
            }
        }
        res.reverse();
        res
    }
}