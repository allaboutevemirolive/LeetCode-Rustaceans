// https://leetcode.com/problems/longest-consecutive-sequence/solutions/1255366/rust-hashset-binaryheap-experiment/
use std::collections::{BinaryHeap, HashSet};
use std::iter::FromIterator;

impl Solution {
    pub fn longest_consecutive(nums: Vec<i32>) -> i32 {
        if nums.len() < 2 { return nums.len() as _ }
        let set = HashSet::<i32>::from_iter(nums);
        let mut heap = BinaryHeap::with_capacity(set.len() >> 1);
        set.iter()
            .filter(|&x| set.contains(&(x - 1)) ^ set.contains(&(x + 1))) // either end or start, ignore solos and mid sequence
            .for_each(|&x| heap.push(x));
        (0..heap.len() >> 1)
            .map(|_| (heap.pop().unwrap(), heap.pop().unwrap())) // (high, low) pairs
            .map(|(right, left)| right - left + 1)
            .max()
            .unwrap_or(1)
    }
}