// https://leetcode.com/problems/combination-sum-ii/solutions/224330/rust-backtracking-solution-0ms/
impl Solution {
    pub fn combination_sum2(candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {
        let mut seq = candidates;
        let mut res = Vec::new();
        seq.sort_unstable_by(|a, b| { b.cmp(a) });
        let mut vec = Vec::new();
        Solution::backtrack(&seq, target, vec, &mut res, 0);
        res
    }

    fn backtrack(seq: &Vec<i32>, target: i32, mut curr: Vec<i32>, result: &mut Vec<Vec<i32>>, start_idx: usize) {
        let mut i = start_idx;
        while i < seq.len() {
            let item = seq[i];
            if target - item < 0 {
                i += 1;
                continue
            }
            let mut new_vec = curr.clone();
            new_vec.push(item);
            if target == item {
                result.push(new_vec);
            }  else {
                Solution::backtrack(seq, target - item, new_vec, result, i + 1);
            }
            // skip duplicate result
            while i < seq.len() && seq[i] == item {
                i += 1;
            }
        }
    }
}