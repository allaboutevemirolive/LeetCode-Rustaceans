// https://leetcode.com/problems/combination-sum-ii/solutions/509357/rust-backtracking/
impl Solution {
    pub fn combination_sum2(candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {
        let mut a = candidates;
        a.sort();
        let mut ans = Vec::new();
        let mut cur = Vec::new();

        fn f(i: usize, t: i32, a: &Vec<i32>, cur: &mut Vec<i32>, ans: &mut Vec<Vec<i32>>) {
            if t == 0 {
                ans.push(cur.clone());
                return;
            }
            let start = i;
            let mut i = i;
            while i < a.len() && t >= a[i] {
                if i == start || a[i] != a[i - 1] {
                    cur.push(a[i]);
                    f(i + 1, t - a[i], a, cur, ans);
                    cur.pop();
                }
                i += 1;
            }
        }
        f(0, target, &a, &mut cur, &mut ans);
        ans
    }
}