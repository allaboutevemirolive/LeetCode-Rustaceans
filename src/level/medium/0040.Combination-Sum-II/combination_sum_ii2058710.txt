// https://leetcode.com/problems/combination-sum-ii/solutions/2058710/rust-dfs/
impl Solution {
    pub fn combination_sum2(mut candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {
        fn dfs(candidates: &Vec<i32>, target: i32, start:usize, cur: &mut Vec<i32>,  res: &mut Vec<Vec<i32>>){
            if target == 0 {
                res.push(cur.clone());
                return;
            } else if target < 0 {
                return;
            }
            for i in start..candidates.len(){
                if i > start && candidates[i] == candidates[i-1]{ // skip same elements in a sorted Vec
                    continue;
                }
                let n = candidates[i];
                cur.push(n);
                dfs(candidates, target-n, i+1, cur, res);
                cur.pop();
            }
        }
        candidates.sort();
        let mut res = vec![];
        dfs(&candidates, target, 0, &mut vec![], &mut res);
        res
    }
}