// https://leetcode.com/problems/combination-sum-ii/solutions/1142030/rust-accepted-solution/
use std::iter::FromIterator;
use std::collections::HashSet;

impl Solution {
    pub fn combination_sum2(mut candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {
        fn helper(candidates: &Vec<i32>, current_vec: &mut Vec<i32>, start: usize, target: i32, res: &mut HashSet<Vec<i32>>) {
            if target < 0 {
                return;
            } else if target == 0 {
                res.insert(current_vec.clone());
            } else {
                for i in start..candidates.len() {
                    let current = candidates[i].clone();
                    current_vec.push(current);
                    helper(&candidates, current_vec, i+1, target-current, res);
                    current_vec.pop();
                }
            }
        }
        let mut current_vec = vec![];
        let mut res = HashSet::new();
        candidates.sort();
        helper(&candidates, &mut current_vec, 0, target, &mut res);
        Vec::from_iter(res)
    }
}
