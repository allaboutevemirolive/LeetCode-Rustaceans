// https://leetcode.com/problems/validate-binary-search-tree/solutions/1004664/rust-recursive-solution/
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_valid_bst(root: Option<Rc<RefCell<TreeNode>>>) -> bool {
        fn validate(
            n: Option<Rc<RefCell<TreeNode>>>,
            min: Option<Rc<RefCell<TreeNode>>>,
            max: Option<Rc<RefCell<TreeNode>>>,
        ) -> bool {
            match n {
                None => true,
                Some(n) => {
                    if let Some(max) = max.clone() {
                        if max.borrow().val <= n.borrow().val {
                            return false;
                        }
                    }
                    if let Some(min) = min.clone() {
                        if min.borrow().val >= n.borrow().val {
                            return false;
                        }
                    }
                    validate(n.borrow().left.clone(), min, Some(n.clone()))
                        && validate(n.borrow().right.clone(), Some(n.clone()), max)
                }
            }
        }
        validate(root, None, None)
    }
}