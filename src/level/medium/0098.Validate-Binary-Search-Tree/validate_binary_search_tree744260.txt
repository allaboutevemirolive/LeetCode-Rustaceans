// https://leetcode.com/problems/validate-binary-search-tree/solutions/744260/recursive-rust-0ms/
use std::i64;
use std::rc::Rc;
use std::cell::RefCell;

impl Solution {
    fn _is_valid_bst(node: &Option<Rc<RefCell<TreeNode>>>, min: i64, max: i64) -> bool {
        if let Some(n) = node {
            let v = n.borrow().val as i64;

            if v <= min || v >= max { return false; }

            Self::_is_valid_bst(&n.borrow().left, min, v) &&
                Self::_is_valid_bst(&n.borrow().right, v, max)
        } else {
            true
        }
    }
    
    pub fn is_valid_bst(root: Option<Rc<RefCell<TreeNode>>>) -> bool {
        Self::_is_valid_bst(&root, i64::MIN, i64::MAX)
    }
}