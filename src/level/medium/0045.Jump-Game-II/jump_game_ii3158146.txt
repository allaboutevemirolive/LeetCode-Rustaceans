// https://leetcode.com/problems/jump-game-ii/solutions/3158146/rust-python-bfs/
use std::collections::{HashSet,VecDeque};

impl Solution {
    pub fn jump(nums: Vec<i32>) -> i32 {
        let n = nums.len();
        let mut q = VecDeque::from([(0usize,0i32)]);
        let mut vis = HashSet::from([0usize]);
        while let Some(cur) = q.pop_front() {
            let (curInd,jumps) = cur;
            if curInd >= n-1 { return jumps; }
            let curDist = nums[curInd] as usize;
            for i in (1..curDist+1).rev() {
                if vis.contains(&(curInd+i as usize)) {
                    break;
                } else {
                    q.push_back((curInd+i as usize,jumps+1));
                    vis.insert(curInd+i as usize);
                }
            }
        }
        -1
    }
}