// https://leetcode.com/problems/string-compression/solutions/1311305/rust-solution/
fn compress(s: &str) -> String {
    let mut compressed = String::new();

    let mut chars = s.chars().peekable();
    let mut last_added = None;
    let mut count = 1;

    loop {
        match (chars.next(), chars.peek()) {
            (Some(cur), Some(&nxt)) => {
                if nxt == cur {
                    count += 1;
                } else {
                    last_added = Some(cur);
                    let comp = if count > 1 { format!("{}{}", cur, count) } else { cur.to_string() };
                    compressed.push_str(&comp);
                    count = 1;
                }
            },
            (Some(last), None) => {
                if last_added == Some(last) {
                    count += 1;
                    compressed.push_str(format!("{}{}", last, count).as_str());
                } else {
                    compressed.push(last);
                }
            }
            _ => break compressed
        }
    }
}