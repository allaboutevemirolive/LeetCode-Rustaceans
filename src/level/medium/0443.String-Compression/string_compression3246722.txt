// https://leetcode.com/problems/string-compression/solutions/3246722/rust-splice-solution/

impl Solution {
    pub fn compress(chars: &mut Vec<char>) -> i32 {
        let (mut l, mut r) = (1,1);
        let (_, count) = chars.clone().iter().skip(1).fold((chars[0], 1) , |(val, counter), &cur_val| {
            if cur_val.ne(&val) {
                // println!("{l} {r}");
                if counter > 1 {
                    let res = counter.to_string().chars().collect::<Vec<char>>();
                    let length = res.len();
                    chars.splice(l..r, res);
                    l += length;
                }
                l += 1;
                r = l;
                return (cur_val, 1)
            }
            r += 1;
            (val, counter + 1)
        });
        if count > 1 {
            chars.splice(l..r, count.to_string().chars().collect::<Vec<char>>());
        }
        chars.len() as i32
    }
}