// https://leetcode.com/problems/remove-k-digits/solutions/2291444/rust-0ms-explained/
impl Solution {
	pub fn remove_kdigits(num: String, k: i32) -> String {
		let mut ans: String = String::new();
		let mut k: i32 = k;
		let mut st: Vec<char> = vec![];
		for (i,ch) in num.chars().enumerate() {
			if i == 0 {st.push(ch);} // insert the 1st char in stack 
			else {
				while k>0  && !st.is_empty() && st.last().unwrap().clone() > ch{ // if top of stack is greater than cur char pop the stack and decrement the count
					k-=1;
					st.pop();
				}
				st.push(ch);
				if st.len() == 1 && ch == '0' {st.pop();} // if it is leading zero pop out the element
			}
		}
		while k>0 && !st.is_empty() {
			k-=1;
			st.pop();
		}
		while !st.is_empty() {ans.push(st.pop().unwrap());}
		ans = ans.chars().rev().collect();
		return if ans.len()==0 {'0'.to_string()} else {ans};
	}
}