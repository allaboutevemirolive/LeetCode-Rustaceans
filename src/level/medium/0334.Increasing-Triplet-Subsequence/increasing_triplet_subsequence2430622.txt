// https://leetcode.com/problems/increasing-triplet-subsequence/solutions/2430622/idiomatic-rust-written-with-the-help-of-copilot/
impl Solution {
    pub fn increasing_triplet(nums: Vec<i32>) -> bool {
        // min_i_so_far[i] = j (with j <=i ) if nums[j] is the smallest number in nums[0..i]
        let min_i_so_far = 
            nums.iter().enumerate().scan(0, |state, (i, x)| {
                *state = if x <= &nums[*state] { i } else { *state };
                Some(*state)
            });
        // increasing_doublet[i] = true iff there exists j < i such that nums[j] < nums[i]
        let increasing_doublet = 
            (0..nums.len()).zip(min_i_so_far).map(|(i, j)| i > j);
        // min_i_so_far_2[i] = j (with j <= i) if nums[j] is the smallest number in nums[0..i] that satifies increasing_doublet[j]
        let min_i_so_far_2 = 
            nums.iter().enumerate()
            .zip(increasing_doublet)
            .scan(None, |state, ((i, x), b)| {
                *state = if !b { *state } else {
                    match &state {
                        None => { Some(i)},
                        Some(j) => { if x < &nums[*j] { Some(i) } else { *state } }
                    }};
                Some(*state)
            });
        // increasing_triplet[i] = true iff there exists k < j < i such that nums[k] < nums[j] < nums[i]
        // this happens if min_i_so_far_2[i] is Some(j) and j < i
        let mut increasing_triplet = 
            nums.iter()
                .zip(min_i_so_far_2)
                .map(|(x, j_q)|
                    match j_q {
                        None => false,
                        Some(j) => x > &nums[j]
                    });

        increasing_triplet.any(|x| x)
    }
}

struct Solution;

fn main() {
    println!("{:?}", Solution::increasing_triplet(vec![1,2,3,4,5]));
    println!("{:?}", Solution::increasing_triplet(vec![5,4,3,2,1]));
    println!("{:?}", Solution::increasing_triplet(vec![5,10,3,20,1,30]));
    println!("{:?}", Solution::increasing_triplet(vec![2,4,-2,-3]));
    println!("{:?}", Solution::increasing_triplet(vec![1,1,-2,6]));
}