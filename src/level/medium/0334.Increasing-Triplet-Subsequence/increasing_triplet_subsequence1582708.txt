// https://leetcode.com/problems/increasing-triplet-subsequence/solutions/1582708/rust-using-dp-and-binary-search/
impl Solution {
    pub fn increasing_triplet(nums: Vec<i32>) -> bool {
        let mut dp: Vec<i64> = vec![std::i64::MAX; nums.len()+1];
        dp[0] = std::i64::MIN;
        let size = dp.len();
        let binary_search = |target: i32, cdp: &Vec<i64>| -> usize{
            let mut start = 0;
            let mut end = size-1;
            while start <= end{
                let mid = start + (end-start)/2;
                if cdp[mid] == target as i64{
                    return mid;
                }else if cdp[mid] > target as i64{
                    end = mid - 1;
                }else{
                    start = mid + 1;
                }
            }
            
            return start;
            
        };
        
        
        for i in 0..nums.len(){
            let j = binary_search(nums[i], dp.as_ref());
            if dp[j-1] < nums[i] as i64 && nums[i] as i64 <= dp[j]{
                dp[j] = nums[i] as i64; 
            }
        }
        
        let result = dp[0];
        for i in 0..dp.len(){
            if dp[i] > result && dp[i] <= std::i32::MAX as i64 && i > 2{
                return true;
            }
        }
        return false;
        
    }
}