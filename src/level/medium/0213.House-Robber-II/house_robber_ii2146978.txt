// https://leetcode.com/problems/house-robber-ii/solutions/2146978/rust-functional-style-2-variations/
impl Solution {
    pub fn rob(nums: Vec<i32>) -> i32 {
        match nums.len() {
            1 => nums[0],
            2 => nums[0].max(nums[1]),
            n => {
                let (robbed1, left1) = nums[0..n-1].iter().fold((0, 0), |(robbed, left), num| (left + *num, robbed.max(left)));
                let (robbed2, left2) = nums[1..n-1].iter().fold((0, 0), |(robbed, left), num| (left + *num, robbed.max(left)));
                
                robbed1.max(left1).max(robbed2).max(left2 + nums[n-1])
            }
        }
    }
}