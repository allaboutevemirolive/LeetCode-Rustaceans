// https://leetcode.com/problems/house-robber-ii/solutions/293023/rust-solution-in-0ms/
use std::cmp::max;

impl Solution {
    pub fn rob(nums: Vec<i32>) -> i32 {
        match nums.len() {
            0 => 0,
            1 => nums[0],
            2 => max(nums[0], nums[1]),
            _ => {
                // dp without last
                let mut head_dp: Vec<i32> = vec![0; nums.len() - 1];
                // dp without first
                let mut tail_dp = head_dp.clone();
                
                // initialize dp without last
                head_dp[0] = nums[0];
                head_dp[1] = max(nums[0], nums[1]);
                // initialize dp without first
                tail_dp[0] = nums[1];
                tail_dp[1] = max(nums[1], nums[2]);
                
                // construct head_dp
                for i in 2..nums.len()-1 {
                    head_dp[i] = max(head_dp[i-1], head_dp[i-2]+nums[i]);
                }
                
                // construct tail_dp
                for i in 2..nums.len()-1 {
                    tail_dp[i] = max(tail_dp[i-1], tail_dp[i-2]+nums[i+1]);
                }
                
                max(head_dp[nums.len()-2], tail_dp[nums.len()-2])
            }
        }
    }
}