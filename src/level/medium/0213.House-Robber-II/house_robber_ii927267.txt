// https://leetcode.com/problems/house-robber-ii/solutions/927267/rust-1-9mb-memory-0ms-runtime/
use std::cmp::max;

fn dp(nums: &[i32]) -> i32 {
    let mut arr = [nums[0], nums[1]];
    for i in 2..nums.len() {
        let new_adj = arr[0] + nums[i];
        arr[0] = max(arr[0], arr[1]);
        arr[1] = new_adj;
    }
    return max(arr[0], arr[1]);
}

impl Solution {
    pub fn rob(nums: Vec<i32>) -> i32 {
        match nums.len() {
            1 => nums[0],
            2 => max(nums[0], nums[1]),
            _ => max(dp(&nums[..(nums.len()-1)]),
                     dp(&nums[1..]))
        }
    }
}