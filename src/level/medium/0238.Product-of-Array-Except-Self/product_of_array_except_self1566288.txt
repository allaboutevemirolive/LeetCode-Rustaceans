// https://leetcode.com/problems/product-of-array-except-self/solutions/1566288/rust-using-iterators/
use std::iter::once;

impl Solution {
    pub fn product_except_self(nums: Vec<i32>) -> Vec<i32> {
        let n = nums.len();
        let mut left_prod = 1;
        let prod_left = once(left_prod).chain(nums.iter().take(n - 1).map(|num| {
            left_prod *= *num;
            left_prod
        }));
        let mut right_prod = 1;
        let prod_right = once(right_prod)
            .chain(nums.iter().skip(1).rev().map(|num| {
                right_prod *= *num;
                right_prod
            }))
            .collect::<Vec<_>>()
            .into_iter()
            .rev();
        prod_left
            .zip(prod_right)
            .map(|(left, right)| left * right)
            .collect()
    }
}