// https://leetcode.com/problems/longest-absolute-file-path/solutions/828411/rust-safe-time-o-n-space-o-1-0ms-2-1mb/
use std::cmp::max;
use std::collections::HashMap;

// thanks for Pochmann idea
// https://leetcode.com/problems/longest-absolute-file-path/discuss/86619/Simple-Python-solution
impl Solution {
    // Time O(N), Space O(1) N is len of input string
	// Dynamic Programming
    pub fn length_longest_path(input: String) -> i32 {
        let mut dict: HashMap<i32, i32> = HashMap::new();
        dict.insert(0, 0);
        let mut maxlen = 0;
        for line in input.split("\n") {
            let name = &line.trim_matches('\t');
            let depth: i32 = (line.len() - name.len()) as i32;
            if name.contains(".") {
                maxlen = max(maxlen, *dict.get(&depth).unwrap() + name.len() as i32);
            } else {
                let tmp = *dict.get(&depth).unwrap() + name.len() as i32 + 1;
                dict.insert(depth + 1, tmp);
            }
        }

        maxlen
    }
}
