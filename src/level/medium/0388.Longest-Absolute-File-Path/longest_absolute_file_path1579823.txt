// https://leetcode.com/problems/longest-absolute-file-path/solutions/1579823/rust-stack/
use std::str;

impl Solution {
    pub fn length_longest_path(input: String) -> i32 {
        let paths: Vec<&str> = input.split("\n").collect();
        let mut S: Vec<usize> = Vec::new();
        let mut longest: usize = 0;
        let mut length: usize = 0;
        
        for p in 0..paths.len() {
            let c = paths[p].as_bytes();
            let mut l: usize = 0;
            // count tabs to determine the path depth
            while c[l] as char == '\t' {
                l += 1;
            }
            let w = str::from_utf8(&c[l..]);
            match w {
                Ok(v) => {
                    // unwind the stack and current length
                    while l < S.len() {
                        length -= S.pop().unwrap();
                    }
                    let mut is_file: bool = false;
                    for d in v.chars() {
                        if d == '.' {
                            is_file = true;
                            break;
                        }
                    }
                    // push new directories on the stack
                    if is_file == false {
                        S.push(v.len());
                        length += v.len();
                    } else {
                        // check files for a new longest path
                        let nl = length + S.len() + v.len();
                        if nl > longest {
                            longest = nl;
                        }
                    } 
                }
                Err(e) => {}
            }  
        }
        return longest as i32;
    }
}