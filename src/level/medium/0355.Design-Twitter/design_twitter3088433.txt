// https://leetcode.com/problems/design-twitter/solutions/3088433/simple-rust-solution-100-time/
use std::collections::{HashMap, HashSet, BinaryHeap};

#[derive(Default)]
struct Twitter {
    time: usize,
    tweets: HashMap<i32, Vec<(usize, i32)>>,
    following: HashMap<i32, HashSet<i32>>
}


/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
impl Twitter {

    fn new() -> Self {
        Default::default()
    }
    
    fn post_tweet(&mut self, user_id: i32, tweet_id: i32) {
        
        self.tweets.entry(user_id).or_default().push((self.time, tweet_id));

        self.time += 1;
    }
    
    fn get_news_feed(&self, user_id: i32) -> Vec<i32> {
        let mut heap: BinaryHeap<(usize, i32)> = self.following.get(&user_id)
                .unwrap_or(&HashSet::new())
                .iter()
                .chain(std::iter::once(&user_id))
                .flat_map(|f| self.tweets.get(f).into_iter().flatten())
                .copied()
                .collect();
        let mut ret_vec = vec![];
        while heap.len() > 0 && ret_vec.len() < 10 {
            ret_vec.push(heap.pop().unwrap().1);
        }
        ret_vec
    }
    
    fn follow(&mut self, follower_id: i32, followee_id: i32) {
        self.following.entry(follower_id).or_default().insert(followee_id);
    }
    
    fn unfollow(&mut self, follower_id: i32, followee_id: i32) {
        self.following.get_mut(&follower_id).map(|s| s.remove(&followee_id));
    }
}