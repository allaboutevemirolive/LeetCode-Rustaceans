// https://leetcode.com/problems/design-twitter/solutions/1825574/rust-binaryheap-with-itertools-kmerge/
use std::{
    collections::{BinaryHeap, HashMap, HashSet, VecDeque},
    ops::RangeFrom,
};

struct Twitter {
    count: RangeFrom<i32>,
    tweets: HashMap<i32, VecDeque<(i32, i32)>>,
    followers: HashMap<i32, HashSet<i32>>,
}

impl Twitter {
    fn new() -> Self {
        Self {
            count: 1..,
            tweets: Default::default(),
            followers: Default::default(),
        }
    }

    fn post_tweet(&mut self, user_id: i32, tweet_id: i32) {
        self.tweets
            .entry(user_id)
            .or_insert(Default::default())
            .push_front((self.count.next().unwrap(), tweet_id));
    }

    fn get_news_feed(&mut self, user_id: i32) -> Vec<i32> {
        let others = self.followers.entry(user_id).or_insert(Default::default());
        let us = HashSet::from([user_id]);
        let users: Vec<_> = us.union(others).collect();

        let tweets = users.iter().filter_map(|&user| self.tweets.get(user));

        BinaryHeap::from_iter(itertools::kmerge(tweets))
            .iter()
            .take(10)
            .map(|(_, tweet_id)| *tweet_id)
            .collect()
    }

    fn follow(&mut self, follower_id: i32, followee_id: i32) {
        self.followers
            .entry(follower_id)
            .or_insert(Default::default())
            .insert(followee_id);
    }

    fn unfollow(&mut self, follower_id: i32, followee_id: i32) {
        self.followers
            .get_mut(&follower_id)
            .map(|x| x.remove(&followee_id));
    }
}
