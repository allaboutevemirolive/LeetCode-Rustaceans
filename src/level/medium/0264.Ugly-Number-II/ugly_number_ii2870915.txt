// https://leetcode.com/problems/ugly-number-ii/solutions/2870915/0ms-faster-than-100-rust-solution/
use std::cmp::min;

impl Solution {
    pub fn nth_ugly_number(n: i32) -> i32 {
        let mut ugly_numbers = vec![1];

        let mut indices = [0, 0, 0];

        while ugly_numbers.len() < n as usize {
            let next_2 = ugly_numbers[indices[0]] * 2;
            let next_3 = ugly_numbers[indices[1]] * 3;
            let next_5 = ugly_numbers[indices[2]] * 5;

            let next_ugly = min(next_2, min(next_3, next_5));

            if next_ugly == next_2 {
                indices[0] += 1;
            }
            if next_ugly == next_3 {
                indices[1] += 1;
            }
            if next_ugly == next_5 {
                indices[2] += 1;
            }

            ugly_numbers.push(next_ugly);
        }

        *ugly_numbers.last().unwrap()
    }
}
