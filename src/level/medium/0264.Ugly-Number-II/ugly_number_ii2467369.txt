// https://leetcode.com/problems/ugly-number-ii/solutions/2467369/rust-heap-and-dp-solution-with-benchmark-code/
#![feature(test)]

extern crate test;

// @lc code=start
use std::cmp::Reverse;
use std::collections::{BinaryHeap, HashMap};
impl Solution {
    pub fn nth_ugly_number(n: i32) -> i32 {
        Self::dp_sol(n)
    }

    pub fn sol_heap(n: i32) -> i32 {
        let mut pq = BinaryHeap::new();
        let mut inserted = HashMap::new();
        pq.push(Reverse(1));

        for _ in 0..n - 1 {
            let top = pq.pop().unwrap();
            let num = top.0;
            if !inserted.contains_key(&(num * 2)) {
                pq.push(Reverse(top.0 * 2));
                inserted.insert(num * 2, true);
            }
            if !inserted.contains_key(&(num * 3)) {
                pq.push(Reverse(num * 3));
                inserted.insert(num * 3, true);
            }
            if !inserted.contains_key(&(num * 5)) {
                pq.push(Reverse(num * 5));
                inserted.insert(num * 5, true);
            }
        }
        pq.peek().unwrap().0
    }

    pub fn dp_sol(n: i32) -> i32 {
        let mut ugly_nums = Vec::new();
        ugly_nums.push(1);
        let mut p2 = 0;
        let mut p3 = 0;
        let mut p5 = 0;
        while ugly_nums.len() < n as usize {
            let next_ugly_num = std::cmp::min(
                ugly_nums[p2] * 2,
                std::cmp::min(ugly_nums[p3] * 3, ugly_nums[p5] * 5),
            );
            ugly_nums.push(next_ugly_num);
            if next_ugly_num == ugly_nums[p2] * 2 {
                p2 += 1;
            }
            if next_ugly_num == ugly_nums[p3] * 3 {
                p3 += 1;
            }
            if next_ugly_num == ugly_nums[p5] * 5 {
                p5 += 1;
            }
        }
        ugly_nums[n as usize - 1]
    }
}

// @lc code=end

pub struct Solution;

#[cfg(test)]
mod tests {
    use test::Bencher;

    use super::*;
    macro_rules! one_test {
        ($param: expr, $expected: expr) => {
            assert_eq!(Solution::nth_ugly_number($param), $expected)
        };
    }
    #[test]
    fn test() {
        one_test!(1, 1);
        one_test!(2, 2);
        one_test!(3, 3);
        one_test!(4, 4);
        one_test!(5, 5);
        one_test!(6, 6);
        one_test!(7, 8);
        one_test!(10, 12);
        one_test!(1352, 402653184);
    }

    #[bench]
    fn bench_dp_sol(b: &mut Bencher) {
        b.iter(|| {
            Solution::dp_sol(1352);
        });
    }

    #[bench]
    fn bench_heap_sol(b: &mut Bencher) {
        b.iter(|| {
            Solution::sol_heap(1352);
        });
    }
}