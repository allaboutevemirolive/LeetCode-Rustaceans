// https://leetcode.com/problems/4sum/solutions/2665523/rust-4-pointers-4-loops/
impl Solution {
    pub fn four_sum(mut nums: Vec<i32>, target: i32) -> Vec<Vec<i32>> {
        let mut res = vec![];
        
        nums.sort_unstable();
        
        let last = nums[nums.len()-1];
        
        let mut i = 0;
        while i < nums.len() {
            if nums[i] as i64 * 4 > target as i64 {
                break
            }
            
            if !(nums[i] as i64 + last as i64 * 3 < target as i64) {
                let mut j = i + 1;
                let t2 = target - nums[i];

                
                while j < nums.len() {
                    if nums[i] as i64 * 3 > t2 as i64 {
                        break
                    }
                    
                    if !(nums[j] as i64 + last as i64 * 2 < t2 as i64) {
                        let mut k = j + 1;
                        let t3 = t2 - nums[j];
                        
                        while k < nums.len() {
                            if nums[k] as i64 * 2 > t3 as i64 {
                                break
                            }
                            
                            if !(nums[k] + last < t3) {
                                let mut l = k + 1;
                                let t4 = t3 - nums[k];
                                
                                while l < nums.len() {
                                    if nums[l] > t4 {
                                        break
                                    }
                                    
                                    if nums[l] == t4 {
                                        res.push(vec![nums[i], nums[j], nums[k], nums[l]]);
                                    }
                                    
                                    l += 1;
                                    while l < nums.len() && nums[l-1] == nums[l] {
                                        l += 1
                                    }
                                }
                            }
                            
                            k += 1;
                            while k < nums.len() && nums[k-1] == nums[k] {
                                k += 1
                            };
                        }
                    }
                    
                    j += 1;
                    while j < nums.len() && nums[j-1] == nums[j] {
                        j += 1
                    };
                }
            }
            
            i += 1;
            while i < nums.len() && nums[i-1] == nums[i] {
                i += 1
            };
        }
        
        res
    }
}