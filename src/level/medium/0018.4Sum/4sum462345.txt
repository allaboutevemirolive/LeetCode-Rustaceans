// https://leetcode.com/problems/4sum/solutions/462345/rust-solution-in-8ms-o-n-3/
impl Solution {
    pub fn four_sum(mut nums: Vec<i32>, target: i32) -> Vec<Vec<i32>> {
        nums.sort();
        Solution::combine_sum(nums, target)
    }
    
    fn combine_sum(nums: Vec<i32>, target: i32) -> Vec<Vec<i32>> {
        let mut a = Vec::new();
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                let c_sum = nums[i] + nums[j];
                let mut start = j+1;
                let mut end = nums.len() - 1;
                while start < end {
                    let total = c_sum + nums[start] + nums[end]; 
                    if target == total {
                        let new_vec = vec![nums[i], nums[j], nums[start], nums[end]];
                        if !a.contains(&new_vec) {
                            a.push(new_vec);
                        }
                        start += 1;
                        end -= 1;
                    }
                    else if total < target {
                        start += 1;
                    }
                    else {
                        end -= 1;
                    }
                }
            }
        }
        a
    }
}
