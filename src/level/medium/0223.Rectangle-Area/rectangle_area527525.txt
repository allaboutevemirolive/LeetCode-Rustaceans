// https://leetcode.com/problems/rectangle-area/solutions/527525/rust/
use std::cmp::{min, max};

impl Solution {

    pub fn compute_area(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32, g: i32, h: i32) -> i32 {
        let rec1 = Rectangle::new(Point(a, b), Point(c, d));
        let rec2 = Rectangle::new(Point(e, f), Point(g, h));
        let rec3 = rec1.intersection(&rec2);
        rec1.area() + rec2.area() - rec3.area()
    }
}

struct Point(i32, i32);
struct Rectangle { a: Point, b: Point }

impl Rectangle {
    fn new(a: Point, b: Point) -> Self {
        Rectangle { a, b }
    }

    fn width(&self) -> i32 {
        (self.a.0 - self.b.0).abs()
    }

    fn height(&self) -> i32 {
        (self.a.1 - self.b.1).abs() 
    }

    fn area(&self) -> i32 {
        self.width() * self.height()
    }

    fn intersection(&self, other: &Rectangle) -> Self {
        let a = Point(max(self.a.0, other.a.0), max(self.a.1, other.a.1));
        let b = Point(min(self.b.0, other.b.0), min(self.b.1, other.b.1));
        
        if a.0 > b.0 || a.1 > b.1 {
            return Rectangle::new(Point(0,0), Point(0,0))
        }
        
        Rectangle::new(a, b)
    }
}
