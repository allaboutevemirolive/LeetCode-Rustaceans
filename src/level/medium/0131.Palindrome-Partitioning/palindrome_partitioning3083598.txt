// https://leetcode.com/problems/palindrome-partitioning/solutions/3083598/rust-solution/
impl Solution {
    pub fn partition(s: String) -> Vec<Vec<String>> {
        let mut result = vec![];
        Solution::p(0, &mut vec![], &mut result, &s);
        result
    }

    fn p(i: usize, cur: &mut Vec<String>, result: &mut Vec<Vec<String>>, s: &str) {
        if i == s.len() {
            result.push(cur.clone());
        }
        for j in (i + 1)..=s.len() {
            if Solution::is_palindrome(&s[i..j]) {
                cur.push(s[i..j].to_string());
                Solution::p(j, cur, result, s);
                cur.pop();
            }
        }
    }

    fn is_palindrome(s: &str) -> bool {
        let n = s.len();
        let sb = s.as_bytes();
        (0..n / 2).all(|i| sb[i] == sb[n - 1 - i])
    }
}
