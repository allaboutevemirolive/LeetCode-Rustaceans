// https://leetcode.com/problems/letter-combinations-of-a-phone-number/solutions/2022012/rust-over-engineered/
impl Solution {
    pub fn letter_combinations(digits: String) -> Vec<String> {
        let n = digits.len();
        if n == 0 {
            // early exit
            return vec![];
        }
        const MAX_N: usize = 4; // n <= 4 is given
        // Allocate required arrays on the stack for efficiency
        let mut bases = [0u8; MAX_N];
        let mut modulos = [0u8; MAX_N];
        let mut stack = [' '; MAX_N];
        // Build up the required arrays without tables
        digits
            .chars()
            .map(|c| c.to_digit(10).unwrap() as u8)
            .map(|d| {
                (
                    ((d - 2) * 3) + b'a' + if d > 7 { 1 } else { 0 },
                    if d == 7 || d == 9 { 4 } else { 3 },
                )
            })
            .zip(bases.iter_mut())
            .zip(modulos.iter_mut())
            .zip(stack.iter_mut())
            .for_each(
                |((((base_src, modulo_src), base_dst), modulo_dst), stack_dst)| {
                    *base_dst = base_src;
                    *modulo_dst = modulo_src;
                    *stack_dst = base_src as char;
                },
            );
        // We know the number of combinations, so we can preallocate the result for efficiency
        let n_combinations = modulos[0..n]
            .iter()
            .map(|&modulo| modulo as usize)
            .product();
        let mut rez = vec![String::with_capacity(0); n_combinations];
        let mut offsets = [0; MAX_N];
        for r in rez.iter_mut() {
            *r = stack[0..n].iter().collect();
            let it = bases
                .iter()
                .zip(modulos.iter())
                .zip(stack.iter_mut())
                .zip(offsets.iter_mut())
                .take(n);
            for (((b, m), s), o) in it {
                *o = (*o + 1) % *m;
                *s = (*b + *o) as char;
                if *o != 0 {
                    break;
                }
            }
        }
        rez
    }
}