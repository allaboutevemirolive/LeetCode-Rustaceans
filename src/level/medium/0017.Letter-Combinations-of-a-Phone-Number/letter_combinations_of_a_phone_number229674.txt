// https://leetcode.com/problems/letter-combinations-of-a-phone-number/solutions/229674/rust-0ms/
impl Solution {
    pub fn letter_combinations(digits: String) -> Vec<String> {
        if digits.is_empty() {
            return vec![]
        }

        let mut letters = digits.chars();
        let head = letters.next().unwrap().to_string();
        let tail = Solution::letter_combinations(letters.collect());

        let letters = vec!["", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"];

        if tail.is_empty() {
            letters[head.parse::<usize>().unwrap()]
                .chars()
                .map(|letter| letter.to_string())
                .collect()
        } else if head == "1" {
            tail
        } else {
            letters[head.parse::<usize>().unwrap()]
                .chars()
                .map(|prefix|
                    tail
                        .iter()
                        .map(|suffix| std::iter::once(prefix)
                            .chain(suffix.chars())
                            .collect::<String>())
                        .collect::<Vec<String>>())
                .flatten()
                .collect()
        }
    }
}