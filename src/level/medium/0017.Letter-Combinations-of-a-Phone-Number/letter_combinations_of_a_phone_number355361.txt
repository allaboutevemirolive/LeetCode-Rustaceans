// https://leetcode.com/problems/letter-combinations-of-a-phone-number/solutions/355361/rust-backtracking-solution/
impl Solution {
        pub fn letter_combinations(digits: String) -> Vec<String> {
        if digits.is_empty() {
            return vec![];
        }
        let num_to_letter = vec!["", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"];

        fn combs(out: &mut Vec<String>, cur: &mut  Vec<char>, digits: &str, num_to_letter: &Vec<&str>) {
            match digits.chars().next() {
                None => out.push(cur.iter().collect()),
                Some(c) => {
                    for letter in num_to_letter[c.to_digit(10).unwrap() as usize].chars() {
                        cur.push(letter);
                        combs(out, cur, &digits[1..], num_to_letter);
                        cur.pop();
                    }
                }
            }
        }

        let mut out: Vec<String> = vec![];
        let mut cur: Vec<char> = vec![];
        combs(&mut out, &mut cur, &digits, &num_to_letter);

        return out;
    }
}