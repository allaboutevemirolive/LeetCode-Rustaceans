// https://leetcode.com/problems/utf-8-validation/solutions/2569904/rust-finite-state-machine/
#[derive(Copy, Clone, Eq, PartialEq)]
enum State {
    NoExpectation,
    ExpectOneMore,
    ExpectTwoMore,
    ExpectThreeMore,
    Error,
}

impl State {
    fn is_valid(self) -> bool {
        match self {
            State::NoExpectation => true,
            _ => false,
        }
    }

    fn next(self, b: u8) -> Self {
        match self {
            State::NoExpectation => on_no_expectation(b),
            State::ExpectOneMore => on_one_more(b),
            State::ExpectTwoMore => on_two_more(b),
            State::ExpectThreeMore => on_three_more(b),
            State::Error => State::Error,
        }
    }
}
fn on_no_expectation(b: u8) -> State {
    if b & 0b1000_0000 == 0 {
        State::NoExpectation
    } else if b & 0b1110_0000 == 0b1100_0000 {
        State::ExpectOneMore
    } else if b & 0b1111_0000 == 0b1110_0000 {
        State::ExpectTwoMore
    } else if b & 0b1111_1000 == 0b1111_0000 {
        State::ExpectThreeMore
    } else {
        State::Error
    }
}

fn on_one_more(b: u8) -> State {
    if b & 0b1100_0000 == 0b1000_0000 {
        State::NoExpectation
    } else {
        State::Error
    }
}

fn on_two_more(b: u8) -> State {
    if b & 0b1100_0000 == 0b1000_0000 {
        State::ExpectOneMore
    } else {
        State::Error
    }
}

fn on_three_more(b: u8) -> State {
    if b & 0b1100_0000 == 0b1000_0000 {
        State::ExpectTwoMore
    } else {
        State::Error
    }
}

pub fn valid_utf8(data: impl AsRef<[i32]>) -> bool {
    let data = data.as_ref();
    let mut state = State::NoExpectation;

    for b in data.iter().map(|&i| i as u8) {
        state = state.next(b);
        if state == State::Error {
            break;
        }
    }

    state.is_valid()
}