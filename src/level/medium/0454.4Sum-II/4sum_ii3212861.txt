// https://leetcode.com/problems/4sum-ii/solutions/3212861/rust-70ms-with-two-hashmap-lookup-o-n-2/
use std::collections::HashMap;

impl Solution {
    pub fn twovec2map(nums1: Vec<i32>, nums2: Vec<i32>) -> HashMap<i32,i32> {
        let mut map:HashMap<i32,i32> = HashMap::new();
        for i in 0..nums1.len() {
            for j in 0..nums2.len() {
                let v = nums1[i] + nums2[j];
                match map.get_mut(&v) {
                    Some(x) => {*x += 1;},
                    None => {map.insert(v, 1);},
                };
            }
        }
        map
    }

    pub fn four_sum_count(mut nums1: Vec<i32>, mut nums2: Vec<i32>, mut nums3: Vec<i32>, mut nums4: Vec<i32>) -> i32 {
        let map12 = Solution::twovec2map(nums1, nums2);
        let map34 = Solution::twovec2map(nums3, nums4);

        let mut res = 0;
        for item in map12.iter() {
            let need = -item.0;
            match map34.get(&need) {
                Some(x) => res += item.1*x,
                None => {}
            }
        }
        return res;       
    }
}