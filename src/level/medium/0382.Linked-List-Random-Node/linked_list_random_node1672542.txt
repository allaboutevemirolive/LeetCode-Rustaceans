// https://leetcode.com/problems/linked-list-random-node/solutions/1672542/rust-reservoir-sampling/
use rand::{thread_rng, Rng};
use rand::rngs::ThreadRng;

struct Solution {
    head: Option<Box<ListNode>>,
    rng: ThreadRng,
}


/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
impl Solution {

    fn new(head: Option<Box<ListNode>>) -> Self {
        Self {
            head: head,
            rng: thread_rng()
        }
    }
    
    fn get_random(&mut self) -> i32 {
        let mut ans = 0;
        let mut cnt = 0;
        let mut cur = &self.head;
        
        while cur.is_some() {
            cnt += 1;
            let r = self.rng.gen_range(1, cnt + 1);
            if r == cnt {
                ans = cur.as_ref().unwrap().val;
            }
            cur = &cur.as_ref().unwrap().next;
        }
        
        ans
    }
}