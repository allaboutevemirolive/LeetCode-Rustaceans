// https://leetcode.com/problems/linked-list-random-node/solutions/497092/rust-44ms-3-6mb-100/
// Definition for singly-linked list.
#[derive(PartialEq, Eq, Clone, Debug)]
pub struct ListNode {
    pub val: i32,
    pub next: Option<Box<ListNode>>,
}

impl ListNode {
    #[inline]
    fn new(val: i32) -> Self {
        ListNode {
            next: None,
            val,
        }
    }
}

use rand::prelude::*;

struct Solution {
    rng: ThreadRng,
    head: Option<Box<ListNode>>,
}


impl Solution {
    fn new(head: Option<Box<ListNode>>) -> Self {
        Solution { rng: Default::default(), head }
    }

    fn get_random(&mut self) -> i32 {
        let mut count = 0;
        let mut node = self.head.clone();
        let mut candidate = self.head.clone();
        while node.is_some() {
            if self.rng.gen_range(0, count + 1) == count {
                candidate = node.clone();
            }
            node = node.unwrap().next;
            count += 1;
        }
        candidate.unwrap().val
    }
}