// https://leetcode.com/problems/super-ugly-number/solutions/449677/rust-solution/
impl Solution {
    pub fn nth_super_ugly_number(n: i32, primes: Vec<i32>) -> i32 {
        let (mut indexes, mut res) = (vec![0; primes.len()], vec![1i32; n as usize]);
        for i in 1..n as usize {
            res[i] = indexes.iter().enumerate().map(|(ii, &i)| {
                if let (t, false) = res[i].overflowing_mul(primes[ii]) {
                    t } else { return std::i32::MAX}
            }).min().unwrap();
            indexes.iter_mut().enumerate().for_each(
                |(jj, j)| if res[*j]*primes[jj] <= res[i] { *j += 1; })
        }
        *res.last().unwrap()
    }
}