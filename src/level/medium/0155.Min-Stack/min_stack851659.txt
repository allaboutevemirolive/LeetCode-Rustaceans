// https://leetcode.com/problems/min-stack/solutions/851659/rust-basic-vec-wrapper/
struct MinStack {
    stack: Vec<i32>
}


/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
impl MinStack {

    /** initialize your data structure here. */
    fn new() -> Self {
        MinStack {
            stack: Vec::new(),
        }
    }
    
    fn push(&mut self, x: i32) {
        self.stack.push(x);
    }
    
    fn pop(&mut self) {
        self.stack.pop();
    }
    
    fn top(&self) -> i32 {
        self.stack.get(self.stack.len() - 1).unwrap().clone()
    }
    
    fn get_min(&self) -> i32 {
        self.stack.iter().fold(std::i32::MAX, |acc, &x| if x < acc {x} else {acc})
    }
}