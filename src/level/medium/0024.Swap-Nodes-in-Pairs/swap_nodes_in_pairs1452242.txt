// https://leetcode.com/problems/swap-nodes-in-pairs/solutions/1452242/rust-iterative/
impl Solution {
    pub fn swap_pairs(mut head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {
        let mut list = ListNode::new(0);
        let mut tail = &mut list.next;

        let mut temp = None;
        while let Some(mut node) = head.take() {
            head = node.next.take();

            match temp.take() {
                None => temp = Some(node),
                Some(temp) => {
                    node.next = Some(temp);
                    *tail = Some(node);
                    tail = &mut tail
                        .as_mut().unwrap().next // i.e. node's next
                        .as_mut().unwrap().next; // i.e. temp's next
                }
            }
        }

        *tail = temp; // in case there is a leftover
        list.next.take()
    }
}