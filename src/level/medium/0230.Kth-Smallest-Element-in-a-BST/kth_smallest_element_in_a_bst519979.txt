// https://leetcode.com/problems/kth-smallest-element-in-a-bst/solutions/519979/rust-in-order-traversal-solution/
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn kth_smallest(root: Option<Rc<RefCell<TreeNode>>>, k: i32) -> i32 {
        let mut k = k;
        Solution::inorder(&root, &mut k).unwrap()
    }
    fn inorder(node: &Option<Rc<RefCell<TreeNode>>>, k: &mut i32) -> Option<i32> {
        if let Some(n) = node {
            if let Some(val) = Solution::inorder(&n.borrow().left, k) {
                return Some(val);
            }
            *k -= 1;
            if *k == 0 {
                return Some(n.borrow().val);
            }
            if let Some(val) = Solution::inorder(&n.borrow().right, k) {
                return Some(val);
            }
        }
        None
    }
}