// https://leetcode.com/problems/kth-smallest-element-in-a-bst/solutions/787604/rust-recursive-solution/
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn kth_smallest(root: Option<Rc<RefCell<TreeNode>>>, k: i32) -> i32 {
        fn traversal(n: Option<Rc<RefCell<TreeNode>>>, tmp: &mut Vec<i32>) {
            match n {
                Some(n) => {
                    traversal(n.borrow().left.clone(), tmp);
                    tmp.push(n.borrow().val);
                    traversal(n.borrow().right.clone(), tmp);
                },
                None => (),
            }
        }
        
        let mut tmp = vec![];
        traversal(root.clone(), &mut tmp);
        tmp[k as usize - 1]
    }
}