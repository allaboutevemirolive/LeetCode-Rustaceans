// https://leetcode.com/problems/permutations-ii/solutions/2059204/rust-backtrack/
impl Solution {
    pub fn permute_unique(mut nums: Vec<i32>) -> Vec<Vec<i32>> {
        fn dfs(nums:&Vec<i32>, cur:&mut Vec<i32>, res: &mut Vec<Vec<i32>>, visited: &mut Vec<bool>){
            if cur.len() == nums.len(){
                res.push(cur.clone());
                return;
            }
            for i in 0..nums.len(){
                let n = nums[i];
                if visited[i]{
                    continue;
                }
                if i > 0 && n == nums[i-1] && !visited[i-1]{
                    continue;
                } 
                cur.push(n);
                visited[i] = true;
                dfs(nums, cur, res, visited);
                cur.pop();
                visited[i] = false;
            }
        }
        nums.sort();
        let mut res = vec![];   
        dfs(&nums, &mut vec![], &mut res, &mut vec![false; nums.len()]);
        res
    }
}