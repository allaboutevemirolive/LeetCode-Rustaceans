// https://leetcode.com/problems/permutations-ii/solutions/1536446/o-n-rust-solution/
impl Solution {
    pub fn permute_unique(nums: Vec<i32>) -> Vec<Vec<i32>> {
        let mut sortedNums = nums;
        sortedNums.sort(); 
        Self::quick_permute_unique(sortedNums)
    }

    fn quick_permute_unique(sortedNums: Vec<i32>) -> Vec<Vec<i32>> {
        if sortedNums.len() == 1 { return vec![sortedNums]; }
        let mut results: Vec<Vec<i32>> = Vec::new(); 
        let last = sortedNums.len();
        let mut prev = i32::MAX;
        for i in 0..last {
            let val = sortedNums[i];
            if prev != val {
                prev = val; 
                let mut nextSortedNums = sortedNums.clone();
                nextSortedNums.remove(i);
                let subResults = Self::quick_permute_unique(nextSortedNums);
                for subResult in subResults {
                    let mut appendedSubResult: Vec<i32> = vec![val];
                    appendedSubResult.extend(subResult);
                    results.push(appendedSubResult);
                }
            }
        }
        
        results
    }
}