// https://leetcode.com/problems/restore-ip-addresses/solutions/3082674/simple-rust-solution/
impl Solution {
    pub fn restore_ip_addresses(s: String) -> Vec<String> {
        let n = match s.len() {
            1..=3 => return vec![],
            n @ 4..=12 => n,
            _ => return vec![],
        };

        let mut result: Vec<String> = vec![];

        for i in 1..4 {
            for j in i + 1..i + 4 {
                for k in j + 1..j + 4 {
                    if k < n {
                        let (s1, s2, s3, s4) = (&s[..i], &s[i..j], &s[j..k], &s[k..]);
                        if Self::is_valid(s1)
                            && Self::is_valid(s2)
                            && Self::is_valid(s3)
                            && Self::is_valid(s4)
                        {
                            result.push(format!("{}.{}.{}.{}", s1, s2, s3, s4));
                        }
                    }
                }
            }
        }
        result
    }
    pub fn is_valid(s: &str) -> bool {
        let n = s.parse::<i32>().unwrap();
        return 0 <= n && n <= 255 && n.to_string() == s;
    }
}