// https://leetcode.com/problems/restore-ip-addresses/solutions/1063557/rust-linear-solution/
impl Solution {
    pub fn restore_ip_addresses(s: String) -> Vec<String> {
        let n = s.len();
        let mut vals: Vec<u8> = vec![0; 4];
        let mut results: Vec<String> = Vec::new();

        // it's an invalid ip address with more than 12 digits
        if n > 12 {
            println!("received string with len: {}", n);
            return vec![];
        }

        // index represents end of octet, so we start at index 1
        for i in 1..4 {
            // if the index of i goes too far right, there may be insufficient
            // remaining indices for the rest of the octets (same rule applies
            // for the other octets)
            if i + 3 > n {
                break;
            }
            // u8::MAX = 255, so parsing to u8 solves for max allowed value of octet
            if let Ok(val) = s[0..i].parse::<u8>() {
                vals[0] = val;
            } else {
                break;
            }

            for j in 1..4 {
                // if the index of j goes too far right, there may be insufficient
                // remaining indices for the rest of the octets
                if i + j + 2 > n {
                    break;
                }
                if let Ok(val) = s[i..i + j].parse::<u8>() {
                    vals[1] = val;
                } else {
                    break;
                }

                for k in 1..4 {
                    // if the index of k goes too far right, there may be insufficient
                    // remaining indices for the rest of the octets
                    if i + j + k + 1 > n {
                        break;
                    }
                    if let Ok(val) = s[i + j..i + j + k].parse::<u8>() {
                        vals[2] = val;
                    } else {
                        break;
                    }

                    for l in 1..4 {
                        if i + j + k + l != n {
                            continue;
                        }

                        if let Ok(val) = s[i + j + k..n].parse::<u8>() {
                            vals[3] = val;
                            let ip: String = vals
                                .iter()
                                .map(|x| x.to_string())
                                .collect::<Vec<String>>()
                                .join(".");

                            if ip.len() == n + 3 {
                                results.push(ip);
                            }
                        } else {
                            break;
                        }
                    }
                }
            }
        }

        results
    }
}