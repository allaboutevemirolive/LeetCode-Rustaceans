// https://leetcode.com/problems/implement-trie-prefix-tree/solutions/2121064/rust-solution/
const ASCII_A: usize = 97;

// converts ASCII char into usize
fn to_index(ch: char) -> usize {
    ch as usize - ASCII_A
}

#[derive(Debug, Default)]
struct Trie {
    children: [Option<Box<Trie>>; 26],
    is_end: bool,
}

impl Trie {
    fn new() -> Self {
        Default::default()
    }
    
    fn insert(&mut self, word: String) {
        let mut node = self;

        for index in word.chars().map(to_index) {
            node = node.children[index].get_or_insert_with(|| Box::new(Trie::new()));
        }

        node.is_end = true;
    }
    
    fn search(&self, word: String) -> bool {
        self.find(word).map_or(false, |trie| trie.is_end)
    }
    
    fn starts_with(&self, prefix: String) -> bool {
        self.find(prefix).is_some()
    }
    
    fn find(&self, word: String) -> Option<&Trie> {
        let mut node = self;

        for index in word.chars().map(to_index) {
            match &node.children[index] {
                Some(new_node) => node = new_node,
                None => return None,
            }
        }

        Some(node)
    }
}