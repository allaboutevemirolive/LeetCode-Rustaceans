// https://leetcode.com/problems/implement-trie-prefix-tree/solutions/2835080/rust/
use std::collections::HashMap;

struct TrieNode {
    children: HashMap<char, TrieNode>, 
    is_word: bool,
}

impl TrieNode {
    fn new() -> Self {
        Self {
            children: HashMap::new(),
            is_word: false
        }
    }
}

struct Trie {
    root: TrieNode,
}

/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
impl Trie {

    fn new() -> Self {
        Self {
            root: TrieNode::new()
        }
    }
    
    fn insert(&mut self, word: String) {
        let mut curr_node = &mut self.root;
        
        for c in word.chars() {
            let next_node = curr_node.children.entry(c).or_insert(TrieNode::new());
            curr_node = next_node;
        }
        curr_node.is_word = true;
    }
    
    fn search(&self, word: String) -> bool {
        let mut curr_node = &self.root;
        match Self::contains_prefix(word, &mut curr_node) {
            false => false,
            true => curr_node.is_word
        }
    }
    
    fn starts_with(&self, prefix: String) -> bool {
        let mut curr_node = &self.root;
        Self::contains_prefix(prefix, &mut curr_node)
               
    }
    
    fn contains_prefix(prefix: String, curr_node: &mut &TrieNode) -> bool {
        for c in prefix.chars() {
            match (*curr_node).children.get(&c) {
                Some(mut next_node) => *curr_node = next_node,
                None => return false,
            }
        }
        true        
    }
}