// https://leetcode.com/problems/implement-trie-prefix-tree/solutions/2881657/trie-ing-rust/
struct Trie {
    children: [Option<Box<Trie>>; 26],
    sz: i32,
    end: bool,
}

/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
 fn print_type_of<T>(_: &T) {
    println!("{}", std::any::type_name::<T>())
}
impl Trie {

    fn new() -> Self {
        const none: Option<Box<Trie>> = None;
        Trie {
            children: [none; 26],
            sz: 1, 
            end: false,
        }
    }
    
    fn insert(self: &mut Trie, word: String) {
        let mut cur = self;
        for c in word.chars() {
            cur = cur.children[c as usize - 'a' as usize].get_or_insert(Box::new(Trie::new()));
        }
        cur.end = true;
    }

    fn search(self: &mut Trie, word: String) -> bool {
        let mut cur = self;
        for c in word.chars() {
            match cur.children[c as usize - 'a' as usize].as_mut() {
                Some(v) => cur = v,
                None => return false,
            }
        }
        return cur.end;
    }
    
    fn starts_with(self: &mut Trie, prefix: String) -> bool {
        let mut cur = self;
        for c in prefix.chars() {
            match cur.children[c as usize - 'a' as usize].as_mut() {
                Some(v) => cur = v,
                None => return false,
            }
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * let obj = Trie::new();
 * obj.insert(word);
 * let ret_2: bool = obj.search(word);
 * let ret_3: bool = obj.starts_with(prefix);
 */