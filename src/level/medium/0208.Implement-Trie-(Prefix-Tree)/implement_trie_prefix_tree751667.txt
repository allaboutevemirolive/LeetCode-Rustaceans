// https://leetcode.com/problems/implement-trie-prefix-tree/solutions/751667/rust/
#[derive(Default)]
struct Trie {
    is_word: bool,
    children: [Option<Box<Trie>>; 26],
}


/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
impl Trie {

    /** Initialize your data structure here. */
    fn new() -> Self {
        Default::default()
    }
    
    /** Inserts a word into the trie. */
    fn insert(&mut self, word: String) {
        let mut cur = self;
        for c in word.chars()
        {
            match &cur.children[c as usize - 'a' as usize]
            {
                None => cur.children[c as usize - 'a' as usize] = Some(Box::new(Trie::new())),
                Some(n) => (),
            }
            cur = cur.children[c as usize - 'a' as usize].as_mut().unwrap();
        }
        cur.is_word = true;
    }
    
    /** Returns if the word is in the trie. */
    fn search(&self, word: String) -> bool {
        let mut cur = self;
        for c in word.chars()
        {
            match cur.children[c as usize - 'a' as usize].as_ref()
            {
                None => return false,
                Some(n) => cur = n.as_ref(),
            }
        }
        return cur.is_word;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    fn starts_with(&self, prefix: String) -> bool {
        let mut cur = self;
        for c in prefix.chars()
        {
            match cur.children[c as usize - 'a' as usize].as_ref()
            {
                None => return false,
                Some(n) => cur = n.as_ref(),
            }
        }
        return true;
    }
}