// https://leetcode.com/problems/path-sum-iii/solutions/1317371/rust-recursive-with-prefix-sum/
use std::rc::Rc;
use std::cell::RefCell;
use std::collections::HashMap;
impl Solution {
    fn helper(root: Option<&Rc<RefCell<TreeNode>>>, target_sum: i32, table: &mut HashMap<i32, i32>, cur_sum: i32) -> i32 {
        match root {
            None => {
                0
            },
            Some(node) => {
                let mut res = 0;
                let mut cur = cur_sum + node.borrow().val;
                let prev = table.get(&(cur - target_sum));
                if let Some(p_node) = prev {
                    res += *p_node;
                }
                table.entry(cur).or_insert(0);
                *table.get_mut(&cur).unwrap() += 1;
                res += Self::helper(node.borrow().left.as_ref(), target_sum, table, cur);
                res += Self::helper(node.borrow().right.as_ref(), target_sum, table, cur);
                *table.get_mut(&cur).unwrap() -= 1;
                res
            },
        }
    }
    pub fn path_sum(root: Option<Rc<RefCell<TreeNode>>>, target_sum: i32) -> i32 {
        let mut table: HashMap<i32, i32> = HashMap::new();
        table.entry(0).or_insert(1);
        Self::helper(root.as_ref(), target_sum, &mut table, 0)
    }
}