// https://leetcode.com/problems/path-sum-iii/solutions/218138/rust-solution/
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn path_sum(root: Option<Rc<RefCell<TreeNode>>>, sum: i32) -> i32 {
        let mut res = 0;
        res += Self::traverse(root.clone(), sum);
        if let Some(r) = root {
            res += Self::path_sum(r.borrow().left.clone(), sum);
            res += Self::path_sum(r.borrow().right.clone(), sum);
        }

        return res;
    }
    
    fn traverse(root: Option<Rc<RefCell<TreeNode>>>, target: i32) -> i32 {
        let mut res = 0;
        if let Some(r) = root {
            let val = r.borrow().val;
            if val == target {
                res += 1;
            }
            res += Self::traverse(r.borrow().left.clone(), target-val);
            res += Self::traverse(r.borrow().right.clone(), target-val);
        }
        return res;
    }
}