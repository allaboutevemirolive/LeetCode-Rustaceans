// https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/solutions/3282229/rust-no-vec/
// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn sorted_list_to_bst(head: Option<Box<ListNode>>) -> Option<Rc<RefCell<TreeNode>>> {
        Self::build(head.as_ref(), None)
    }

    fn build(head: Option<&Box<ListNode>>, tail: Option<&Box<ListNode>>) -> Option<Rc<RefCell<TreeNode>>> {
        if head.is_none() || head == tail {
            return None;
        }

        if head.unwrap().next.as_ref() == tail {
            return Some(Rc::new(RefCell::new(TreeNode::new(head.unwrap().val))));
        }

        let mut slow = head;
        let mut fast = head;

        while fast != tail && fast.unwrap().next.as_ref() != tail {
            slow = slow.unwrap().next.as_ref();
            fast = fast.unwrap().next.as_ref().unwrap().next.as_ref();
        }

        Some(Rc::new(RefCell::new(TreeNode {
            val: slow.unwrap().val,
            left: Self::build(head, slow),
            right: Self::build(slow.unwrap().next.as_ref(), tail),
        })))
    }
}