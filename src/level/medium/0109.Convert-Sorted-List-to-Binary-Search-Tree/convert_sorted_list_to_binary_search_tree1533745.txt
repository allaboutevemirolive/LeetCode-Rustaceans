// https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/solutions/1533745/rust-sol-using-leetcode-108/
use std::rc::Rc;
use std::cell::RefCell;
type Node = Option<Rc<RefCell<TreeNode>>>;
impl Solution {
    pub fn sorted_list_to_bst(mut head: Option<Box<ListNode>>) -> Node {
        //  turn linked list into array -> vec into binary tree 
        let mut stack = Vec::new();
        while let Some(node) = head { 
            stack.push(node.val);
            head = node.next;
        }
        Solution::sorted_array_to_bst(&stack[..])
    }
    //  108: leetcode solution
     pub fn sorted_array_to_bst(nums: &[i32]) -> Node {
        let mut n = nums.len();
        
        match n { 
             0 => None,
            _ => { 
                let m = n/2;
                let mut node = TreeNode::new(nums[m]);
                node.left = Solution::sorted_array_to_bst(&nums[..m]);
                node.right = Solution::sorted_array_to_bst(&nums[m + 1..]);
                
                Some(Rc::new(RefCell::new(node)))
            }
        }
    }
}
