// https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/solutions/2309387/rust-recursion-using-slice/
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn sorted_list_to_bst(head: Option<Box<ListNode>>) -> Option<Rc<RefCell<TreeNode>>> {
        let mut head = head;
        let mut data = vec![];
        
        while let Some(mut node) = head {
            head = node.next.take();
            node.next = None;
            data.push(node.val);
        }
        
        Self::build(&data[0..]) 
    }
    
    fn build(data: &[i32]) -> Option<Rc<RefCell<TreeNode>>> {
        if data.len() == 0 { return None; }
        
        let mid = data.len() / 2;
        let l = Self::build(&data[0..mid]);
        let r = Self::build(&data[mid +1..]);
        
        Some(Rc::new(RefCell::new(TreeNode{val: data[mid], left: l, right: r})))
    }
}