// https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/solutions/3284130/rust-elixir-yars-yet-another-recursive-solution/
use std::rc::Rc;
use std::cell::RefCell;
type OptLN = Option<Box<ListNode>>;
type OptTN = Option<Rc<RefCell<TreeNode>>>;

impl Solution {
    pub fn sorted_list_to_bst(head: OptLN) -> OptTN {
        let mut length = 0;
        let mut node = &head;
        while let Some(n) = node.as_ref() {
            length += 1;
            node = &n.next;
        }
        Self::convert(&head, length).0
    }

    fn convert<'a>(head: &'a OptLN, length: i32) -> (OptTN, &'a OptLN) {
        if length == 0 {
            return (None, head);
        }
        let (left, mid) = Self::convert(head, length / 2);
        let node = &mid.as_ref().unwrap().next;
        let (right, remaining) = Self::convert(node, (length - 1) / 2);
        let parent = Some(Rc::new(RefCell::new(TreeNode {
            val: mid.as_ref().unwrap().val,
            left,
            right,
        })));
        (parent, remaining)
    }
}