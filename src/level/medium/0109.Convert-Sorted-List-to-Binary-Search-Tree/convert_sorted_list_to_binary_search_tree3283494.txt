// https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/solutions/3283494/javascript-rust-very-simple-recursive-solution-beats-99-2/
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn sorted_list_to_bst(head: Option<Box<ListNode>>) -> Option<Rc<RefCell<TreeNode>>> {
        let mut values = vec![];
        let mut node_option = head;
        while let Some(node) = node_option {
            values.push(node.val);
            node_option = node.next;
        }
        Self::sorted_array_to_bst(&values)
    }

    fn sorted_array_to_bst(nums: &[i32]) -> Option<Rc<RefCell<TreeNode>>> {
        if nums.is_empty() { return None; }
        let mid = nums.len() / 2;
        let mut root = TreeNode::new(nums[mid]);
        root.left = Self::sorted_array_to_bst(&nums[..mid]);
        root.right = Self::sorted_array_to_bst(&nums[mid + 1..]);
        Some(Rc::new(RefCell::new(root)))
    }
}
