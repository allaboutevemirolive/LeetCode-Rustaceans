// https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/solutions/503950/rust-short-o-n-time-iterator-trait/
struct OptListNodeIterator<'a>(&'a OptListNode);
impl<'a> Iterator for OptListNodeIterator<'a> {
    type Item = &'a Box<ListNode>;
    fn next(&mut self) -> Option<Self::Item> {
        self.0.as_ref().map(|ln| { self.0 = &ln.next; ln })
    }
}

impl Solution {
    pub fn sorted_list_to_bst(head: Option<Box<ListNode>>) -> Option<Rc<RefCell<TreeNode>>> {
        Self::construct_new(&mut OptListNodeIterator(&head), OptListNodeIterator(&head).count())
    }
    fn construct_new(iter: &mut OptListNodeIterator, size: usize) -> OptTreeNode {
        if size == 0 { return None; }
        let left = Self::construct_new(iter, size / 2);
        let mut root = TreeNode::new(iter.next().unwrap().val);
        let right = Self::construct_new(iter, size - size / 2 - 1);
        root.left = left;
        root.right = right;
        Some(Rc::new(RefCell::new(root)))
    }
}