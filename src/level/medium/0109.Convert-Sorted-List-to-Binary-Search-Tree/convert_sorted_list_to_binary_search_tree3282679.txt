// https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/solutions/3282679/rust-two-pointer-solution/
// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }


use std::cell::RefCell;
use std::rc::Rc;
impl Solution {
    pub fn sorted_list_to_bst(head: Option<Box<ListNode>>) -> Option<Rc<RefCell<TreeNode>>> {
        if head.is_none() {
            return None;
        }
        Self::_sorted_list_to_bst(head.as_ref(), None)
    }

    fn _sorted_list_to_bst(
        head: Option<&Box<ListNode>>,
        tail: Option<&Box<ListNode>>,
    ) -> Option<Rc<RefCell<TreeNode>>> {
        // 1. head is None
        // 2. head is tail node
        if head == tail {
            return None;
        }
        // two pointer
        let mut slow = head;
        let mut fast = head;

        // fast is not None or tail node
        while fast != tail {
            let fast_next = fast.and_then(|n| n.next.as_ref());
            if fast_next == tail {
                break;
            }
            // move one step
            slow = slow.and_then(|n| n.next.as_ref());
            // move  two step
            fast = fast_next.and_then(|n| n.next.as_ref());
        }
        let mut tree_node = TreeNode::new(slow.unwrap().val);
        tree_node.left = Self::_sorted_list_to_bst(head, slow);
        tree_node.right = Self::_sorted_list_to_bst(slow.unwrap().next.as_ref(), tail);

        Some(Rc::new(RefCell::new(tree_node)))
    }
}
