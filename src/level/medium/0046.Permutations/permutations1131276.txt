// https://leetcode.com/problems/permutations/solutions/1131276/rust-backtracking/
use std::collections::HashSet;

impl Solution {
    pub fn permute(nums: Vec<i32>) -> Vec<Vec<i32>> {
        let mut res = vec![];
        Self::dfs(&nums, &mut vec![], &mut res, &mut HashSet::new());
        res
    }
    
    fn dfs(
        nums: &[i32],
        acc: &mut Vec<i32>, 
        res: &mut Vec<Vec<i32>>, 
        visited: &mut HashSet<i32>
    ) {
        if acc.len() == nums.len() {
            res.push(acc.clone());
        }
        for &num in nums {
            if visited.contains(&num) {
                continue;
            }
            visited.insert(num);
            acc.push(num);
            Self::dfs(nums, acc, res, visited);
            visited.remove(&num);
            acc.pop();
        }
    }
}