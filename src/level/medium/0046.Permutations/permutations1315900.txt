// https://leetcode.com/problems/permutations/solutions/1315900/rust-dfs-0ms/
use std::collections::HashSet;

impl Solution {
    pub fn permute(nums: Vec<i32>) -> Vec<Vec<i32>> {
        let mut result = vec![];
        let current = vec![];
        let visited = HashSet::new();
        dfs(&nums, &mut result, current, visited);
        result
    }
}

fn dfs(nums : &Vec<i32>, result : &mut Vec<Vec<i32>>, current : Vec<i32>, visited : HashSet<i32>) {
    
    let mut at_end = true;
    
    for (index, value) in nums.iter().enumerate() {
        
        let mut new_current = current.clone();
        let mut new_visited = visited.clone();
        
        if new_visited.contains(value) {
            continue;
        }
        
        new_visited.insert(*value);
        
        new_current.push(*value);
        
        at_end = false;
        
        dfs(nums, result, new_current, new_visited);
        
    }
    
    if at_end {
        result.push(current);
    }
}