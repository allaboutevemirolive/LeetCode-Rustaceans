// https://leetcode.com/problems/matchsticks-to-square/solutions/2061460/100-100-rust-backtracking/
impl Solution {
    pub fn makesquare(matchsticks: Vec<i32>) -> bool {
        let sum: i32 = matchsticks.iter().sum();
        if sum % 4 != 0 {
            false
        } else {
            let side_len = sum / 4;
            // check for sticks that are too big to fit in any side before we start the expensive operations
            for stick in matchsticks.iter() {
                if stick > &side_len {
                    return false;
                }
            }
            let mut side_space = [side_len; 4];
            Self::helper(&mut side_space, side_len, &matchsticks)
        }
    }

    fn helper(side_space: &mut [i32; 4], side_len: i32, matchsticks: &[i32]) -> bool {
        if matchsticks.len() == 0 {
            true
        } else {
            let stick = matchsticks[0];
            for i in 0..4 {
                if side_space[i] >= stick {
                    side_space[i] -= stick;
                    if Self::helper(side_space, side_len, &matchsticks[1..]) {
                        return true;
                    }
                    side_space[i] += stick; // while this stick fits in this side, it will cause a fail later
                }
            }
            false
        }
    }
}