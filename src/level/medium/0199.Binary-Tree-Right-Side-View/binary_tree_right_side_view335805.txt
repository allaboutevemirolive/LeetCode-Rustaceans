// https://leetcode.com/problems/binary-tree-right-side-view/solutions/335805/rust-solution/
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    fn traversal(node: Option<Rc<RefCell<TreeNode>>>, res: &mut Vec<i32>, level: usize) {
        if let Some(node) = node {
            if level == res.len() {
                res.push(node.borrow().val);
            }
            Self::traversal(node.borrow().right.clone(), res, level+1);
            Self::traversal(node.borrow().left.clone(), res, level+1);            
        }

    }
    
    pub fn right_side_view(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
        let mut res: Vec<i32> = vec![];
        Self::traversal(root, &mut res, 0);
        res
    }
}