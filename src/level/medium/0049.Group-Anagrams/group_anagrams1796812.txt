// https://leetcode.com/problems/group-anagrams/solutions/1796812/rust-solution/
impl Solution {
    fn str_to_wordcnt(input: &str) -> Vec<i32> {
        let mut res = vec![0; 26];
        let a = 'a' as usize;
        for c in input.chars() {
            let idx = c as usize - a;
            res[idx] += 1;
        }
        res
    }
    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {
        let mut res = vec![];
        let mut count = HashMap::new();
        for s in strs {
            let wc = Solution::str_to_wordcnt(&s);
            let e = count.entry(wc).or_insert(vec![]);
            (*e).push(s);
        }
        for r in count {
            res.push(r.1);
        }
        res
    }
}
