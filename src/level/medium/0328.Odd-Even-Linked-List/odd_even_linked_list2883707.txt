// https://leetcode.com/problems/odd-even-linked-list/solutions/2883707/rust-o-n-0ms/
type OptionNode = Option<Box<ListNode>>;

impl Solution {
    pub fn odd_even_list(mut head: OptionNode) -> Option<Box<ListNode>> {
        let mut odd: OptionNode = None;
        let mut odd_head = &mut odd;

        let mut even: OptionNode = None;
        let mut even_head = &mut even;

        let mut i = 0;

        while let Some(mut node) = head {
            i += 1;
            head = node.next.take();
            
            if i % 2 == 1 {
                *odd_head = Some(node);
                odd_head = &mut odd_head.as_mut().unwrap().next;
            } else {
                *even_head = Some(node);
                even_head = &mut even_head.as_mut().unwrap().next;
            }

        }

        *odd_head = even;
 
        odd
    }
}