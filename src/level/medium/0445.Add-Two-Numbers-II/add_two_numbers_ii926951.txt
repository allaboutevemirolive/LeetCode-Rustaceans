// https://leetcode.com/problems/add-two-numbers-ii/solutions/926951/rust-linked-list-traversal-based-solution/
impl Solution {
    pub fn reverse_list(mut head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {
        let mut new_head = None;
        while let Some(mut node) = head {
            head = node.next;
            node.next = new_head;
            new_head = Some(node);
        }
        new_head
    }
    
    pub fn add_two_numbers(mut l1: Option<Box<ListNode>>, mut l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {
        let mut dummy = ListNode::new(0);
        let mut ptr = &mut dummy;
        let mut carry = 0;
        
        l1 = Solution::reverse_list(l1);
        l2 = Solution::reverse_list(l2);
        
        while (l1.is_some() || l2.is_some()) || carry > 0 {
            let mut digit1 = 0; 
            let mut digit2 = 0;
            if let Some(v) = l1 {
                digit1=v.val;
                l1=v.next;
            };
            if let Some(v) = l2 {
                digit2=v.val;
                l2=v.next;
            };            
            
            let mut sum = digit1+digit2+carry;
            carry = sum/10;
            sum = sum %10;
            
            ptr.next = Some (Box::new(ListNode::new(sum)));
            ptr = ptr.next.as_mut().unwrap();         
        }
        Solution::reverse_list(dummy.next)
    }
}