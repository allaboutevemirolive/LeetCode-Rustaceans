// https://leetcode.com/problems/add-two-numbers-ii/solutions/858370/rust-stack-4ms-75/
impl Solution {
    pub fn add_two_numbers(
        l1: Option<Box<ListNode>>,
        l2: Option<Box<ListNode>>,
    ) -> Option<Box<ListNode>> {
        let mut s1 = Vec::<i32>::new();
        let mut s2 = Vec::<i32>::new();
        let mut t1 = &l1;
        while let Some(x) = t1 {
            s1.push(x.val);
            t1 = &x.next;
        }
        let mut t2 = &l2;
        while let Some(x) = t2 {
            s2.push(x.val);
            t2 = &x.next;
        }
        let mut list = ListNode::new(0);
        let mut sum = 0;
        loop {
            match (s1.pop(), s2.pop()) {
                (Some(x1), Some(x2)) => {
                    sum += x1 + x2;
                    list.val = sum % 10;
                    let mut head = ListNode::new(sum / 10);
                    head.next = Some(Box::new(list));
                    list = head;
                    sum /= 10;
                }
                (Some(x1), None) => {
                    sum += x1;
                    list.val = sum % 10;
                    let mut head = ListNode::new(sum / 10);
                    head.next = Some(Box::new(list));
                    list = head;
                    sum /= 10;
                }
                (None, Some(x2)) => {
                    sum += x2;
                    list.val = sum % 10;
                    let mut head = ListNode::new(sum / 10);
                    head.next = Some(Box::new(list));
                    list = head;
                    sum /= 10;
                }
                _ => break,
            }
        }
        if list.val == 0 {
            list.next
        } else {
            Some(Box::new(list))
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_add_two_numbers() {
        let l1 = Some(Box::new(ListNode {
            val: 7,
            next: Some(Box::new(ListNode {
                val: 2,
                next: Some(Box::new(ListNode {
                    val: 4,
                    next: Some(Box::new(ListNode::new(3))),
                })),
            })),
        }));
        let l2 = Some(Box::new(ListNode {
            val: 5,
            next: Some(Box::new(ListNode {
                val: 6,
                next: Some(Box::new(ListNode { val: 4, next: None })),
            })),
        }));
        let expected = Some(Box::new(ListNode {
            val: 7,
            next: Some(Box::new(ListNode {
                val: 8,
                next: Some(Box::new(ListNode {
                    val: 0,
                    next: Some(Box::new(ListNode::new(7))),
                })),
            })),
        }));
        assert_eq!(Solution::add_two_numbers(l1, l2), expected);
    }
}