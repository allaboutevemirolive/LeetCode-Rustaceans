// https://leetcode.com/problems/add-two-numbers-ii/solutions/1891273/rust-iterative-solution/
pub fn add_two_numbers(
    l1: Option<Box<ListNode>>,
    l2: Option<Box<ListNode>>,
) -> Option<Box<ListNode>> {
    let mut l1 = reverse(l1);
    let mut l2 = reverse(l2);

    let mut head = None;
    let mut tail = &mut head;
    let mut carry = 0;

    loop {
        let value = match (l1.take(), l2.take()) {
            (None, None) => break,
            (Some(mut a), Some(mut b)) => {
                l1 = a.next.take();
                l2 = b.next.take();

                a.val + b.val + carry
            }
            (Some(mut a), None) => {
                l1 = a.next.take();

                a.val + carry
            }
            (None, Some(mut b)) => {
                l2 = b.next.take();

                b.val + carry
            }
        };

        carry = value / 10;

        let node = Box::new(ListNode::new(value % 10));
        tail = &mut tail.insert(node).next;
    }

    if carry > 0 {
        *tail = Some(Box::new(ListNode::new(carry)));
    }

    reverse(head)
}

fn reverse(mut list: Option<Box<ListNode>>) -> Option<Box<ListNode>> {
    let mut head = None;

    while let Some(mut node) = list.take() {
        list = node.next.take();
        node.next = head;
        head = Some(node);
    }

    head
}