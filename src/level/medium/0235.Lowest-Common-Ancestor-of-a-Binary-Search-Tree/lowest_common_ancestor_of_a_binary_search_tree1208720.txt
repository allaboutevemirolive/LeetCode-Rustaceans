// https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/solutions/1208720/rust-recursive-0ms-beats-100/
use std::cmp::Ordering::*;
use std::rc::Rc;
use std::cell::RefCell;

type Node = Option<Rc<RefCell<TreeNode>>>;

impl Solution {
    fn node_val(node: &Node) -> i32 {
        node.as_ref().unwrap().borrow().val
    }

    pub fn lowest_common_ancestor(root: Node, p: Node, q: Node) -> Node {
        if let Some(node) = root {
            let p_val = Self::node_val(&p);
            let q_val = Self::node_val(&q);
            let v = node.borrow().val;

            match (p_val.cmp(&v), q_val.cmp(&v)) {
                (Greater, Greater) =>
                    Self::lowest_common_ancestor(node.borrow().right.as_ref().map(|c| c.clone()), p, q),
                (Less, Less) =>
                    Self::lowest_common_ancestor(node.borrow().left.as_ref().map(|c| c.clone()), p, q),
                _ => Some(node),
            }
        } else {
            None
        }
    }
}