// https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/solutions/3166967/rust-simple-binary-tree-search/
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }

use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn lowest_common_ancestor(mut root: Option<Rc<RefCell<TreeNode>>>, p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {
        let mut lo = p.unwrap().borrow().val;
        let mut hi = q.unwrap().borrow().val;
        if lo > hi {
            let tmp = lo;
            lo = hi;
            hi = tmp;
        }
        println!("lo {lo:?}");

        while let Some(n) = root {
            let v = n.borrow().val;
            if v == hi || v == lo || (hi > v && v > lo) {
                return Some(n);
            }
            if v > hi {
                root = n.borrow().left.clone();
            } else {
                root = n.borrow().right.clone();
            }
        }
        root
    }
}