// https://leetcode.com/problems/add-two-numbers/solutions/2829453/rust-recursion/
// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {
    fn helper(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>, acc: i32) -> Option<Box<ListNode>> {
        match (l1, l2) {
            (None, None) => if acc == 1 {Some(Box::new(ListNode::new(1)))} else {None}
            (Some(n), None) => Some(
                Box::new(ListNode { val: (n.val+acc) % 10, next: helper(n.next, None, (n.val+acc) / 10) })
            ),
            (None, Some(n)) => Some(
                Box::new(ListNode { val: (n.val+acc) % 10, next: helper(None, n.next, (n.val+acc) / 10) })
            ),
            (Some(l), Some(r)) => Some(
                Box::new(ListNode { val: (l.val + r.val +acc) % 10, next: helper(l.next, r.next, (l.val + r.val +acc) / 10) })
            )
        }
    }
    
    helper(l1, l2, 0)
}
}