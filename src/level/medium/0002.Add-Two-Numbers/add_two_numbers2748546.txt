// https://leetcode.com/problems/add-two-numbers/solutions/2748546/rust-iterative/
// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {
        let mut carry = 0i32;
        let mut dummy = Box::new(ListNode::new(0));
        let mut cur = &mut dummy;

        let mut l1 = l1;
        let mut l2 = l2;

        while l1.is_some() || l2.is_some() || carry == 1 {
            let mut n1 = 0;
            let mut n2 = 0;
            if l1.is_some() {
               let next = l1.as_mut().unwrap().next.take();
               n1 =  l1.as_mut().unwrap().val;
               l1 = next;
            }

            if l2.is_some() {
               let next = l2.as_mut().unwrap().next.take();
               n2 =  l2.as_mut().unwrap().val;
               l2 = next;
            }

            let sum = n1 + n2 + carry;
            let val = sum % 10;
            carry = sum / 10;
            cur.next = Some(Box::new(ListNode::new(val)));
            cur = cur.next.as_mut().unwrap();
        }

        dummy.next
    }
}