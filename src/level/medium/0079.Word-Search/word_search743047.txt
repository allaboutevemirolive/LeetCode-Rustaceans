// https://leetcode.com/problems/word-search/solutions/743047/rust-cheapest-best/
impl Solution {
    pub fn exist(board: Vec<Vec<char>>, word: String) -> bool {
        let c = word.chars().next().unwrap();
        let mut seen = vec![vec![false; board[0].len()]; board.len()];
        for y in 0..board.len() {
            for x in 0..board[0].len() {
                if c == board[y][x] {
                    if Self::find_remaining(&board, &mut seen, (x, y), &word[1..]) {
                        return true;
                    }
                }
            }
        }
        false
    }

    fn find_remaining(
        board: &Vec<Vec<char>>,
        seen: &mut Vec<Vec<bool>>,
        (cur_x, cur_y): (usize, usize),
        word: &str,
    ) -> bool {
        seen[cur_y][cur_x] = true;
        if word == "" {
            return true;
        }
        let c = word.chars().next().unwrap();
        for (add_x, add_y) in [(0, -1), (-1, 0), (1, 0), (0, 1)].iter() {
            let (new_x, new_y) = (cur_x as i32 + add_x, cur_y as i32 + add_y);
            if new_x >= 0
                && new_x < board[0].len() as i32
                && new_y >= 0
                && new_y < board.len() as i32
                && !seen[new_y as usize][new_x as usize]
                && board[new_y as usize][new_x as usize] == c
                && Self::find_remaining(board, seen, (new_x as usize, new_y as usize), &word[1..])
            {
                return true;
            }
        }
        seen[cur_y][cur_x] = false;
        false
    }
}