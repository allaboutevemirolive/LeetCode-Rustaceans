// https://leetcode.com/problems/word-search/solutions/342147/rust-solution/
impl Solution {
    pub fn exist(board: Vec<Vec<char>>, word: String) -> bool {
        let mut board = board;
        if board.is_empty() {
            return false;
        }

        let height = board.len();
        let width = board[0].len();

        for x in 0..height {
            for y in 0..width {
                if Self::search(&mut board, &word, 0, x, y) {
                    return true;
                }
            }
        }
        false
    }

    fn search(
        board: &mut Vec<Vec<char>>,
        word: &str,
        offset: usize,
        row: usize,
        column: usize,
    ) -> bool {
        if row == board.len() || column == board[0].len() {
            return false;
        }
        if word.chars().nth(offset) != Some(board[row][column]) {
            return false;
        }

        if offset == word.len() - 1 {
            return true;
        }

        let cur = board[row][column];
        board[row][column] = '\0';

        let mut found = Self::search(board, word, offset + 1, row + 1, column);
        if !found {
            found = Self::search(board, word, offset + 1, row, column + 1);
        }
        if !found && row > 0 {
            found = Self::search(board, word, offset + 1, row - 1, column);
        }
        if !found && column > 0 {
            found = Self::search(board, word, offset + 1, row, column - 1);
        }

        board[row][column] = cur;
        found
    }
}