// https://leetcode.com/problems/word-search/solutions/550184/rust-solution/
pub fn helper(board: &mut Vec<Vec<char>>, word: &str, x: i64, y: i64) -> bool {
    if word.len() == 0 {
        return true;
    }
    if x < 0 || y < 0 || x >= board.len() as i64 || y >= board[0].len() as i64 || board[x as usize][y as usize] == 0 as char {
        return false;
    }
    let n = word.chars().next();
    match n {
        Some(c) => {
            if c != board[x as usize][y as usize] {
                return false;
            }
            board[x as usize][y as usize] = 0 as char;
            let remaining = &word[1..];
            if helper(board, remaining, x + 1, y) || 
                helper(board, remaining, x - 1, y) || 
                helper(board, remaining, x, y - 1) || 
                helper(board, remaining, x, y + 1) {
                return true;
            }
            board[x as usize][y as usize] = c;
            return false;
        },
        None => true,
    }
}
impl Solution {
    pub fn exist(mut board: Vec<Vec<char>>, word: String) -> bool {
        for i in 0..board.len() {
            for j in 0..board[0].len() {
                if helper(&mut board, word.as_str(), i as i64, j as i64) {
                    return true;
                }

            }
        }
        return false;
    }
}