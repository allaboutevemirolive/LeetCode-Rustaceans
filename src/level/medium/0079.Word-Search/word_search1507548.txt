// https://leetcode.com/problems/word-search/solutions/1507548/rust-dfs-solution/
impl Solution {
    fn dfs(board: &Vec<Vec<char>>, i: usize, j: usize, count: usize, word: &String, visited: &mut Vec<Vec<bool>>) -> bool {
        if count == word.len() {
            return true;
        }
        
        if i < 0 || i >= board.len() || j < 0 || j >= board[i].len() || board[i][j] != word.chars().nth(count).unwrap() {
            return false;
        }
        
        if visited[i][j] { return false; }
        visited[i][j] = true;
        
        let found: bool = Self::dfs(&board, i-1, j, count+1, &word, visited) 
                    || Self::dfs(&board, i+1, j, count+1, &word, visited)
                    || Self::dfs(&board, i, j-1, count+1, &word, visited) 
                    || Self::dfs(&board, i, j+1, count+1, &word, visited);
        
        visited[i][j] = false;
        
        return found;
    }
    
    pub fn exist(board: Vec<Vec<char>>, word: String) -> bool {
        let mut visited: Vec<Vec<bool>> = vec![vec![false; board[0].len()]; board.len()];
        
        for i in 0..board.len() {
            for j in 0..board[i].len() {
                if board[i][j] == word.chars().nth(0).unwrap() && Self::dfs(&board, i, j, 0, &word, &mut visited) {
                    return true;
                }
            }
        }
        return false;
    }
}