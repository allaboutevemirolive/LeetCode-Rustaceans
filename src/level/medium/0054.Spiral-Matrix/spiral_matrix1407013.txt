// https://leetcode.com/problems/spiral-matrix/solutions/1407013/easy-to-understand-rust-solution/
enum Direction {
    Right,
    Left,
    Up,
    Down,
}

impl Solution {
    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {
        let mut down_bound = matrix.len() - 1;
        let mut up_bound = 0;
        let mut right_bound = matrix[0].len() - 1;
        let mut left_bound = 0;

        let total = matrix.len() * matrix[0].len();

        let mut i = 0;
        let mut j = 0;
        let mut seen = 0;
        let mut direction = Direction::Right;
        let mut res: Vec<i32> = vec![];

        while seen < total {
            res.push(matrix[i][j]);
            match direction {
                Direction::Right => {
                    if j == right_bound {
                        direction = Direction::Down;
                        i += 1;
                        up_bound += 1;
                    } else {
                        j += 1;
                    }
                }
                Direction::Left => {
                    if j == left_bound {
                        direction = Direction::Up;
                        i -= 1;
                        down_bound -= 1;
                    } else {
                        j -= 1;
                    }
                }
                Direction::Up => {
                    if i == up_bound {
                        direction = Direction::Right;
                        j += 1;
                        left_bound += 1;
                    } else {
                        i -= 1;
                    }
                }
                Direction::Down => {
                    if i == down_bound {
                        direction = Direction::Left;
                        j -= 1;
                        right_bound -= 1;
                    } else {
                        i += 1;
                    }
                }
            }
            seen += 1;
        }

        res
    }
}