// https://leetcode.com/problems/spiral-matrix/solutions/1466681/rust-solution/
impl Solution {
    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {
        let mut bi = (0, matrix.len());
        let mut bj = (0, matrix[0].len());
        
        let left = |x: (_, _)| { if x.0 + 1 != x.1 { Some((x.0 + 1, x.1)) } else { None } };
        let right = |x: (_, _)| { if x.0 + 1 != x.1 { Some((x.0, x.1 - 1)) } else { None } };
        
        let mut ans = vec![];
        || -> Option<()> {
            loop {
                ans.extend((bj.0..bj.1).map(|j| matrix[bi.0][j]));
                bi = left(bi)?;
                ans.extend((bi.0..bi.1).map(|i| matrix[i][bj.1 - 1]));
                bj = right(bj)?;
                ans.extend((bj.0..bj.1).rev().map(|j| matrix[bi.1 - 1][j]));
                bi = right(bi)?;
                ans.extend((bi.0..bi.1).rev().map(|i| matrix[i][bj.0]));
                bj = left(bj)?;
            }
        } ();
        ans
    }
}