// https://leetcode.com/problems/spiral-matrix/solutions/2820404/rust-solution/
enum Direction {
    Right,
    Left,
    Up,
    Down,
}

impl Solution {
    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {
        let (mut i, mut j) = (0, 0);
        let (mut m, mut n) = (matrix.len(), matrix[0].len());
        let (mut m_start, mut n_start) = (0, 0);

        let mut result = Vec::with_capacity(m * n);
        let mut turn = Direction::Right;

        for _ in 0..m * n {
            result.push(matrix[i][j]);

            match turn {
                Direction::Right => {
                    if j < n - 1 {
                        j += 1;
                    } else {
                        turn = Direction::Down;
                        i += 1;
                    }
                }
                Direction::Down => {
                    if i < m - 1 {
                        i += 1;
                    } else {
                        turn = Direction::Left;
                        j -= 1;
                    }
                }
                Direction::Left => {
                    if j > n_start as usize {
                        j -= 1;
                    } else {
                        turn = Direction::Up;
                        i -= 1;
                        m_start += 1;
                    }
                }
                Direction::Up => {
                    if i > m_start as usize {
                        i -= 1;
                    } else {
                        turn = Direction::Right;
                        n_start += 1;
                        i = m_start as usize;
                        j = n_start as usize;
                        m -= 1;
                        n -= 1;
                    }
                }
            }
        }

        result
    }
}