// https://leetcode.com/problems/spiral-matrix/solutions/216132/rust-solution/
impl Solution {
    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {
        let mut rtn = vec![];
        if matrix.is_empty() || matrix[0].is_empty() {
            return rtn;
        }
        let m = matrix.len();
        let n = matrix[0].len();
        
        let mut up = 0;
        let mut down = m - 1;
        let mut left = 0;
        let mut right = n - 1;
        
        loop {
            for i in left..=right {
                rtn.push(matrix[up][i]);
            }
            up += 1;
            if down < up {
                break;
            }
            
            for i in up..=down {
                rtn.push(matrix[i][right]);
            }
            let r = right.overflowing_sub(1); // right is usize type, (right -1) may overflow
            if r.1 || r.0 < left {
                break
            }
            right = r.0;
            
            for i in (left..=right).rev() {
                rtn.push(matrix[down][i]);
            }
            let r = down.overflowing_sub(1);
            if r.1 || r.0 < up {
                break
            }
            down = r.0;
            
            for i in (up..=down).rev() {
                rtn.push(matrix[i][left]);
            }
            left += 1;
            if right < left {
                break
            }
        }
        return rtn;
    }
}