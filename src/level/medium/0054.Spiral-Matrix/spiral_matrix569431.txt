// https://leetcode.com/problems/spiral-matrix/solutions/569431/intuitive-rust-solution-using-enum/
impl Solution {
    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {
        
        use Direction::*;
        
        let mut matrix = matrix;
        
        let mut spiral = vec![];
        
        let mut direction = Right;
        
        while matrix.len() > 0 && matrix.iter().any(|v| v.len() > 0) {
            match direction {
                Down => { matrix.iter_mut().for_each(|v| spiral.push(v.pop().unwrap()))}, // if going down, take the last item from each row
                Up => { matrix.iter_mut().rev().for_each(|v| spiral.push(v.remove(0)))}, // if going up, take the first item from each row
                Right => { spiral.append(&mut matrix.remove(0))}, // if going right take the whole first row
                Left => { matrix.pop().unwrap().iter().rev().for_each(|i| spiral.push(*i))} // if going left take the whole last row in reverse
            }
            direction = next_direction(direction);
        }
        
        spiral
        
    }
    

}

enum Direction {
    Down,
    Up,
    Left,
    Right
}

fn next_direction(dir: Direction) -> Direction {
    use Direction::*;
    
    match dir {
        Down => Left,
        Up => Right,
        Right => Down,
        Left => Up
    }
}