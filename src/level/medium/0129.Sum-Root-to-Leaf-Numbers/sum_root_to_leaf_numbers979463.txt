// https://leetcode.com/problems/sum-root-to-leaf-numbers/solutions/979463/rust-cheapest-best/
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn sum_numbers(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {
        Self::go(&root, &mut 0, 0)
    }

    fn go(root: &Option<Rc<RefCell<TreeNode>>>, cur: &mut i32, mut sum: i32) -> i32 {
        if let Some(node) = root {
            *cur *= 10;
            *cur += node.borrow().val;
            if node.borrow().left.is_none() && node.borrow().right.is_none() {
                sum += *cur;
            }
            sum = Self::go(&node.borrow().left, cur, sum);
            sum = Self::go(&node.borrow().right, cur, sum);
            *cur /= 10;
        }
        sum
    }
}