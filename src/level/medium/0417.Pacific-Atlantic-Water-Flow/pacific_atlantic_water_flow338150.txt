// https://leetcode.com/problems/pacific-atlantic-water-flow/solutions/338150/rust-4ms/
pub fn mark(matrix: &Vec<Vec<i32>>,
    mark_matrix: &mut Vec<Vec<i32>>,
    nrow: usize, ncolumn: usize, 
    row: usize, column: usize, 
    mark_bit: i32) {
    
    mark_matrix[row][column] |= mark_bit;
    let v = matrix[row][column];
    // right
    if column < ncolumn - 1 && (mark_bit & mark_matrix[row][column + 1]) == 0 && v <= matrix[row][column + 1] {
        mark(matrix, mark_matrix, nrow, ncolumn, row, column + 1, mark_bit);
    }
    // bottom
    if row < nrow - 1 && (mark_bit & mark_matrix[row + 1][column]) == 0 && v <= matrix[row + 1][column] {
        mark(matrix, mark_matrix, nrow, ncolumn, row + 1, column, mark_bit);
    }
    // left
    if row > 0 && (mark_bit & mark_matrix[row - 1][column]) == 0 && v <= matrix[row - 1][column]{
        mark(matrix, mark_matrix, nrow, ncolumn, row - 1, column, mark_bit);
    }
    // top
    if column > 0 && (mark_bit & mark_matrix[row][column - 1]) == 0 && v <= matrix[row][column - 1] {
        mark(matrix, mark_matrix, nrow, ncolumn, row, column - 1, mark_bit);
    }
}

impl Solution {
    pub fn pacific_atlantic(matrix: Vec<Vec<i32>>) -> Vec<Vec<i32>> {
        let mut re:Vec<Vec<i32>> = Vec::new();
        let nrow = matrix.len();
        if nrow <= 0 {
            return re;
        } 
        let ncolumn = matrix[0].len();
        let mut mark_matrix: Vec<Vec<i32>> = Vec::with_capacity(nrow);
        for _ in 0..nrow {
            mark_matrix.push(vec![0; ncolumn]);
        }
        const PACIFIC_BIT: i32 = 1;
        const ATLANTIC_BIT: i32 = 2;
        for row in 0..nrow {
            mark(&matrix, &mut mark_matrix, nrow, ncolumn, row, 0, PACIFIC_BIT);
            mark(&matrix, &mut mark_matrix, nrow, ncolumn, row, ncolumn - 1, ATLANTIC_BIT);
        }
        for column in 0..ncolumn {
            mark(&matrix, &mut mark_matrix, nrow, ncolumn, 0, column, PACIFIC_BIT);
            mark(&matrix, &mut mark_matrix, nrow, ncolumn, nrow - 1, column, ATLANTIC_BIT);
        }
       
        for row in 0..nrow {
            for column in 0..ncolumn {
                if mark_matrix[row][column] == (PACIFIC_BIT + ATLANTIC_BIT) {
                    re.push(vec![row as i32, column as i32]);
                }
            }
        }
        re
    }
}