// https://leetcode.com/problems/divide-two-integers/solutions/1882178/rust-solution-without-cheating-with-or-checked-div-only-and/
use std::i32::{ MIN, MAX };

const HALF_MAX: i32 = 1073741823;
const HALF_MIN: i32 = -1073741824;


impl Solution {
    pub fn divide(dividend: i32, divisor: i32) -> i32 {
        assert!( divisor != 0 );

        if dividend == 0 {
            return 0;
        }

        if divisor == 1 {
            return dividend;
        }

        if divisor == MIN {
            return if dividend == MIN {
                1

            } else {
                0
            }
        }

        if dividend == MIN && divisor == -1 {
            return MAX;
        }

        match ( dividend.signum(), divisor.signum() ) {
            ( 1, 1 ) => divide_positive( dividend, divisor ),
            ( 1, -1 ) => -divide_positive( dividend, -divisor ),
            ( -1, 1 ) => -divide_negative( dividend, -divisor ),
            ( -1, -1 ) => divide_negative( dividend, divisor ),
            _ => unreachable!(),
        }
    }
}

fn divide_positive( dividend: i32, divisor: i32 ) -> i32 {
    let mut pairs = vec![];
    let mut pair = ( 1, divisor );
    loop {
        pairs.push( pair );
        if pair.1 > HALF_MAX || pair.1 + pair.1 > dividend {
            break;
        }
        pair = ( pair.0 + pair.0, pair.1 + pair.1 );
    }

    let mut dividend = dividend;
    let mut quotient = 0;
    for pair in pairs.iter().rev() {
        if pair.1 <= dividend {
            dividend -= pair.1;
            quotient += pair.0;
        }
        if dividend == 0 {
            break;
        }
    }

    quotient
}

fn divide_negative( dividend: i32, divisor: i32 ) -> i32 {
    let mut pairs = vec![];
    let mut pair = ( -1, divisor );
    loop {
        pairs.push( pair );
        if pair.1 < HALF_MIN || pair.1 + pair.1 < dividend {
            break;
        }
        pair = ( pair.0 + pair.0, pair.1 + pair.1 );
    }

    let mut dividend = dividend;
    let mut quotient = 0;
    for pair in pairs.iter().rev() {
        if pair.1 >= dividend {
            dividend -= pair.1;
            quotient += pair.0;
        }
        if dividend == 0 {
            break;
        }
    }

    -quotient
}