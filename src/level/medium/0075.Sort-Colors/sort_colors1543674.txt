// https://leetcode.com/problems/sort-colors/solutions/1543674/rust-0ms-with-explainations/
impl Solution {
    pub fn sort_colors(nums: &mut Vec<i32>) {
        let mut red_write_index = 0;
        let mut blue_write_index = nums.len() - 1;
        let mut check_index = 0;
        while check_index <= blue_write_index {
            let current_num = nums[check_index];
            match current_num {
                0 => {
                    // red, move all red to the front
                    nums.swap(red_write_index, check_index);
                    red_write_index += 1;
                    check_index += 1;
                }
                1 => {
                    // white, ignore it
                    check_index += 1;
                }
                2 => {
                    //blue, move it to the end, and check the swapped new value
                    nums.swap(blue_write_index, check_index);
                    if blue_write_index == 0 {
                        break;
                    }
                    blue_write_index -= 1;
                }
                _ => {
                    unreachable!("not possible");
                }
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use crate::Solution;

    #[test]
    fn it_works() {
        let mut vec1 = vec![2, 0, 1];
        Solution::sort_colors(&mut vec1);
        assert_eq!(vec1, vec![0, 1, 2]);
        let mut vec1 = vec![2, 0, 2, 1, 1, 0];
        Solution::sort_colors(&mut vec1);
        assert_eq!(vec1, vec![0, 0, 1, 1, 2, 2]);
        let mut vec1 = vec![2];
        Solution::sort_colors(&mut vec1);
        assert_eq!(vec1, vec![2]);
    }
}