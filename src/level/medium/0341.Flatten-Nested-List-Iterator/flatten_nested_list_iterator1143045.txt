// https://leetcode.com/problems/flatten-nested-list-iterator/solutions/1143045/rust-stack-o-n-time-o-h-space-no-list-flattening/
// #[derive(Debug, PartialEq, Eq)]
// pub enum NestedInteger {
//   Int(i32),
//   List(Vec<NestedInteger>)
// }
struct NestedIterator {
    stack: Vec<Vec<NestedInteger>>,
    current: Option<i32>,
}


/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
impl NestedIterator {
    fn new(nestedList: Vec<NestedInteger>) -> Self {
        let mut nested_list = nestedList;
        
        nested_list.reverse();
        
        let mut result = Self {
            stack: vec![nested_list],
            current: None,
        };
        
        result.advance_next();
        
        result
    }
    
    
    fn next(&mut self) -> i32 {
        let result = self.current.unwrap();
        self.advance_next();
        result
    }
    
    fn advance_next(&mut self) {
        while let Some(top_list) = self.stack.last_mut() {
            if let Some(nint) = top_list.pop() {
                match nint {
                    NestedInteger::Int(i) => {
                        self.current = Some(i);
                        return;
                    },
                    NestedInteger::List(mut list) => {
                        list.reverse();
                        self.stack.push(list);
                    }
                }
            } else {
                self.stack.pop();
            }
        }
        
        self.current = None;
    }
    
    fn has_next(&self) -> bool {
        self.current.is_some()
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * let obj = NestedIterator::new(nestedList);
 * let ret_1: i32 = obj.next();
 * let ret_2: bool = obj.has_next();
 */