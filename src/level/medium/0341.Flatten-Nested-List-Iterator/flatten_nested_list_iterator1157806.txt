// https://leetcode.com/problems/flatten-nested-list-iterator/solutions/1157806/rust-stack-of-iterators-solution/
// #[derive(Debug, PartialEq, Eq)]
// pub enum NestedInteger {
//   Int(i32),
//   List(Vec<NestedInteger>)
// }
struct NestedIterator {
    iter_stack: Vec<Box<dyn Iterator<Item=NestedInteger>>>,
    val: Option<i32>
}


/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
impl NestedIterator {
    fn iterate(&mut self) {
        if let Some(mut last) = self.iter_stack.pop() {
            if let Some(next_val) = last.next() {
                self.iter_stack.push(last);
                match next_val {
                    NestedInteger::Int(x) => self.val = Some(x),
                    NestedInteger::List(v) => {
                        self.iter_stack.push(Box::new(v.into_iter()));
                        self.iterate();
                    }
                }
            }
            else {
                self.iterate();
            }
        }
        else {
            self.val = None;
        }
    }

    fn new(nestedList: Vec<NestedInteger>) -> Self {
        let mut iter = NestedIterator { 
            iter_stack: vec![Box::new(nestedList.into_iter())], 
            val: None 
        };
        iter.iterate();
        iter
    }
    
    fn next(&mut self) -> i32 {
        let val = self.val.unwrap();
        self.iterate();
        val
    }
    
    fn has_next(&self) -> bool {
        !self.iter_stack.is_empty()
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * let obj = NestedIterator::new(nestedList);
 * let ret_1: i32 = obj.next();
 * let ret_2: bool = obj.has_next();
 */