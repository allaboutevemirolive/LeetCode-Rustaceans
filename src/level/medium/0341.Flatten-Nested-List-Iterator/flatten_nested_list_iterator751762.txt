// https://leetcode.com/problems/flatten-nested-list-iterator/solutions/751762/rust-cheapest-best/
use std::{iter::Peekable, vec::IntoIter};

struct NestedIterator {
    iter: Peekable<IntoIter<i32>>,
}

impl NestedIterator {
    fn new(mut nestedList: Vec<NestedInteger>) -> Self {
        Self {
            iter: Self::unnest(nestedList).into_iter().peekable(),
        }
    }

    fn next(&mut self) -> i32 {
        self.iter.next().unwrap()
    }

    fn has_next(&mut self) -> bool {
        self.iter.peek().is_some()
    }
    fn unnest(mut nestedList: Vec<NestedInteger>) -> Vec<i32> {
        nestedList.into_iter().fold(vec![], |mut acc, cur| {
            match cur {
                NestedInteger::Int(x) => {
                    acc.push(x);
                }
                NestedInteger::List(x) => acc.extend(Self::unnest(x)),
            }
            acc
        })
    }
}