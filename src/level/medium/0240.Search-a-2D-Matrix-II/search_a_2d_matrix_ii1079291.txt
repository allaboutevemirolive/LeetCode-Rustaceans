// https://leetcode.com/problems/search-a-2d-matrix-ii/solutions/1079291/rust-binary-search-row-by-row/
use std::cmp::Ordering;

impl Solution {
    // time: O(mlogn), space: O(1)
    pub fn search_matrix(matrix: Vec<Vec<i32>>, target: i32) -> bool {
        for row in matrix {
            if Self::binary_search(&row, target) {
                return true;
            }
        }
        false
    }
    
    fn binary_search(data: &[i32], target: i32) -> bool {        
        let mut l = 0;
        let mut r = data.len() - 1;
        
        while l <= r {
            let mid = (l + r) / 2;
            match data[mid].cmp(&target) {
                Ordering::Equal => return true,
                Ordering::Greater => {
                    if mid == 0 {
                        return false;
                    }
                    r = mid - 1;
                },
                Ordering::Less => {
                    if mid == r {
                        return false;
                    }
                    l = mid + 1;
                },
            }
        }
        false
    }
}