// https://leetcode.com/problems/range-sum-query-2d-immutable/solutions/2105104/rust-o-m-n-creation-o-n-for-calculating/
struct NumMatrix {
    matrix:Vec<Vec<i32>>,
    matrix_results:Vec<Vec<i32>>
}


/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
impl NumMatrix {

    fn new(mat: Vec<Vec<i32>>) -> Self {
        let mut summations = vec![];
        for outer_ in 0..mat.len(){
            let mut inee = vec![];
            let mut previous = 0;
            for inner_ in 0..mat[outer_].len(){
                let ss = mat[outer_ as usize][inner_ as usize]+previous;
                previous = ss;
                inee.push(ss);
            }
            summations.push(inee);
        }
        Self{
            matrix:mat,
            matrix_results:summations,
        }
    }
    
    fn sum_region(&self, row1: i32, col1: i32, row2: i32, col2: i32) -> i32 {
        let mut sum = 0;
        for row in row1..row2+1{
            let left =  if col1-1<0 {0} else {self.matrix_results[row as usize ][(col1-1) as usize]};
            sum += (self.matrix_results[row as usize][col2 as usize]-left)
        }
        return sum;
    }
}