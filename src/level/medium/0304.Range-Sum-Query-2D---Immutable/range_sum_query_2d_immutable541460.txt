// https://leetcode.com/problems/range-sum-query-2d-immutable/solutions/541460/rust-solution/
struct NumMatrix {
    m: Vec<Vec<i32>>,
}

impl NumMatrix {

    fn new(matrix: Vec<Vec<i32>>) -> Self {
        let mut m = matrix.clone();
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                if i > 0 {
                    m[i][j] += m[i - 1][j];
                }
                if j > 0 {
                    m[i][j] += m[i][j - 1];
                }
                if i > 0 && j > 0 {
                    m[i][j] -= m[i - 1][j - 1];
                }
            }
        }
        NumMatrix { m }
    }
    
    fn sum_region(&self, row1: i32, col1: i32, row2: i32, col2: i32) -> i32 {
        let mut answer = self.m[row2 as usize][col2 as usize];
        if row1 > 0 {
            answer -= self.m[row1 as usize - 1][col2 as usize];
        }
        if col1 > 0 {
            answer -= self.m[row2 as usize][col1 as usize - 1];
        }
        if row1 > 0 && col1 > 0 {
            answer += self.m[row1 as usize - 1][col1 as usize - 1];
        }
        answer
    }
}