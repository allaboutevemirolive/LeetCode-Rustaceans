// https://leetcode.com/problems/range-sum-query-2d-immutable/solutions/1906331/rust-build-accumulator-matrix/

struct NumMatrix {
    am: Vec<Vec<i32>>
}

impl NumMatrix {

    fn new(m: Vec<Vec<i32>>) -> Self {
        // accumulator matrix has 1 more row and 1 more col
        let mut rows = 1 + m.len();
        let mut cols = 0;
        if rows > 0 { cols = 1 + m[0].len(); }
        
        let mut sm = vec![vec![0; cols]; rows];
        
        for r in 1..rows {
            for c in 1..cols {
                sm[r][c] = m[r-1][c-1] + sm[r][c-1] + sm[r-1][c] - sm[r-1][c-1]
            }
        }
        
        Self{
            am: sm
        }
    }
    
    fn sum_region(&self, r1: i32, c1: i32, r2: i32, c2: i32) -> i32 {
        self.am[(r2+1) as usize][(c2+1) as usize] 
            + self.am[r1 as usize][c1 as usize]
            - (self.am[(r2+1) as usize][c1 as usize] 
                + self.am[r1 as usize][(c2+1) as usize])
    }
}