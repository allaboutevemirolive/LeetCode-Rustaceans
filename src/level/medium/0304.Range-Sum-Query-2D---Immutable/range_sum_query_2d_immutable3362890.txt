// https://leetcode.com/problems/range-sum-query-2d-immutable/solutions/3362890/rust-clean-solution/
struct NumMatrix {
    data: Vec<Vec<i32>>,
}


/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
impl NumMatrix {

    fn new(matrix: Vec<Vec<i32>>) -> Self {
        let mut data = vec![vec![0; matrix[0].len()]; matrix.len()];
        let mut num_matrix = NumMatrix {
            data,
        };
        for (i, row) in matrix.iter().enumerate() {
            for (j, n) in row.iter().enumerate() {
                let x = j as i32;
                let y = i as i32;
                num_matrix.data[i][j] = matrix[i][j]
                    + num_matrix.get_data(x - 1, y)
                    + num_matrix.get_data(x, y - 1)
                    - num_matrix.get_data(x - 1, y - 1)
            }
        }
        return num_matrix;
    }
    
    fn sum_region(&self, row1: i32, col1: i32, row2: i32, col2: i32) -> i32 {
        return self.get_data(col2, row2)
            - self.get_data(col2, row1 - 1)
            - self.get_data(col1 - 1, row2)
            + self.get_data(col1 - 1, row1 - 1)
    }

    fn get_data(&self, x: i32, y: i32) -> i32 {
        if x < 0 || y < 0 {
            return 0;
        }

        return self.data[y as usize][x as usize];
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * let obj = NumMatrix::new(matrix);
 * let ret_1: i32 = obj.sum_region(row1, col1, row2, col2);
 */