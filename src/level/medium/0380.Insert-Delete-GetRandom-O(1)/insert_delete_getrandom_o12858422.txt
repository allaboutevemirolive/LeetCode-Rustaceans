// https://leetcode.com/problems/insert-delete-getrandom-o1/solutions/2858422/rust-hashmap-solution/
use rand::{Rng, thread_rng, rngs::ThreadRng};
use std::collections::HashMap;

struct RandomizedSet {
    rng: ThreadRng,
    vals: Vec<i32>,
    index_map: HashMap<i32, usize>
}


/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
impl RandomizedSet {

    fn new() -> Self {
        Self { 
            rng: thread_rng(),
            vals: vec![],
            index_map: HashMap::new()
        }
    }
    
    fn insert(&mut self, val: i32) -> bool {
        if self.index_map.contains_key(&val) {
            return false;
        }
        self.index_map.insert(val, self.vals.len());
        self.vals.push(val);
        true
    }
    
    fn remove(&mut self, val: i32) -> bool {
        if self.index_map.contains_key(&val) == false {
            return false;
        }
        
        let i = self.index_map.remove(&val).unwrap();
        
        if i != self.vals.len() - 1 {
            self.vals[i] = self.vals[self.vals.len()-1];
            (*self.index_map.get_mut(&self.vals[i]).unwrap()) = i;
        }
        
        self.vals.pop();
        true
    }
    
    fn get_random(&mut self) -> i32 {
        if self.vals.len() == 0 {
            panic!(":P")
        }
        self.vals[self.rng.gen_range(0, self.vals.len())]
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * let obj = RandomizedSet::new();
 * let ret_1: bool = obj.insert(val);
 * let ret_2: bool = obj.remove(val);
 * let ret_3: i32 = obj.get_random();
 */