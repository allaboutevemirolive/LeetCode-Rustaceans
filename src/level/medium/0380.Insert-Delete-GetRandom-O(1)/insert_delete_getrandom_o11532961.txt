// https://leetcode.com/problems/insert-delete-getrandom-o1/solutions/1532961/rust-solution/
use std::collections::HashMap;
use rand::Rng;

struct RandomizedSet {
    hash_table: HashMap<i32, usize>,
    vec: Vec<i32>
}

impl RandomizedSet {

    fn new() -> Self {
        Self {
            hash_table: HashMap::new(),
            vec: Vec::new()
        }
    }
    
    fn insert(&mut self, val: i32) -> bool {
        
        if let Some(x) = self.hash_table.get(&val) {
            return false;
        } else {
            self.hash_table.insert(val, self.hash_table.len());
            self.vec.push(val);
            return true;
        }
    }
    
    fn remove(&mut self, val: i32) -> bool {
        if let Some(idx) = self.hash_table.remove(&val) {
            //'Swap' places of the last item in the list with the item to be removed
            let temp: i32 = self.vec[idx];
            let idx_last = self.vec.len() - 1;
            self.vec[idx] = self.vec[idx_last];
            self.vec[idx_last] = temp;
            
            // update index for last item that we 'Swapped'
            if let Some(last_idx) = self.hash_table.get_mut(&self.vec[idx]) {
                *last_idx = idx; 
            }
            
            // remove item in vec
            self.vec.pop();
            
            return true;
        } else {
            return false;
        }
    }
    
    fn get_random(&self) -> i32 {
        let len = self.vec.len();
        let random: usize = rand::thread_rng().gen_range(0, len);
        self.vec[random]
    }
}