// https://leetcode.com/problems/insert-delete-getrandom-o1/solutions/2859886/rust-hashset/
use std::collections::HashSet;
use rand::Rng;

struct RandomizedSet {
    set: HashSet<i32>
}


/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */
impl RandomizedSet {

    fn new() -> Self {
        Self{
            set: HashSet::new()
        }
    }
    
    fn insert(&mut self, val: i32) -> bool {
        self.set.insert(val)
        
    }
    
    fn remove(&mut self, val: i32) -> bool {
        self.set.remove(&val)
    }
    
    fn get_random(&self) -> i32 {
        *self.set.iter().nth(rand::thread_rng().gen_range(0, self.set.len())).unwrap()
    }
}