// https://leetcode.com/problems/find-right-interval/solutions/1770230/rust-two-solutions-sorting-binary-search-btreemap/
pub fn find_right_interval(intervals: Vec<Vec<i32>>) -> Vec<i32> {
    let mut intervals = intervals.into_iter().enumerate().collect::<Vec<_>>();
    intervals.sort_by(|(_, a), (_, b)| a[0].cmp(&b[0]));

    let mut solution = vec![-1; intervals.len()];

    for (sln, left) in intervals.iter() {
        match intervals.binary_search_by(|(_, right)| right[0].cmp(&left[1])) {
            Ok(idx) => {
                // If there is an exact match, get its original index
                solution[*sln] = intervals[idx].0 as i32;
            }

            Err(idx) => {
                // If there is not an exact match, then find the first
                // interval that satisfies the requirements
                if idx < intervals.len() {
                    solution[*sln] = intervals[idx].0 as i32;
                }
            }
        }
    }

    solution
}