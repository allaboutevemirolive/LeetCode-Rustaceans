// https://leetcode.com/problems/find-right-interval/solutions/815757/overly-verbose-rust-feedback-welcome/
impl Solution {
    pub fn find_right_interval(mut intervals: Vec<Vec<i32>>) -> Vec<i32> {
        for (i, x) in intervals.iter_mut().enumerate() {
            x.push(i as i32); // track the *original* index
        } // now our list items are like [1,2,3] where '3' is the orig index
		
        intervals.sort_by_key(|x| x[0]); // sort by index 0 (left part of segment)
		
        let mut out = vec![-1; intervals.len()]; //init output list w/ -1's
        for (i, x) in intervals.iter().enumerate() {
            for (j, y) in intervals.iter().enumerate() {
                if i == j { continue };
                if y[0] >= x[1] {
                    out[ x[2 as usize] as usize ] = y[2 as usize];
                    break; // bail out at first hit
                }
            } // if no match, it's already initialized to -1
        }
        return out;
    }
}