// https://leetcode.com/problems/decode-string/solutions/2029744/rust-0ms/
#[derive(Debug)]
struct Pattern {
    parent: Option<Box<Pattern>>,
    repeat: u32,
    strings: Vec<String>
}

impl Pattern {
    fn new(parent: Option<Box<Pattern>>, repeat: u32) -> Self {
        Self {
            parent,
            repeat,
            strings: Vec::new()
        }
    }
    
    fn add_string(&mut self, s: String) {
        self.strings.push(s);
    }
    
    fn close(self) -> (String, Option<Box<Pattern>>) {
        (vec![self.strings.join(""); self.repeat as usize].join(""), self.parent)
    }
}

impl Solution {
    pub fn decode_string(s: String) -> String {
        let chars: Vec<char> = s.chars().collect();
        let mut idx = 0;
        
        let mut current_pattern: Option<Box<Pattern>> = None;
        
        let mut output: Vec<String> = Vec::new();
        
        while idx < chars.len() {
            let mut c = chars[idx];
            if c.is_digit(10) {
                let mut current_nbr: u32 = 0;
                while let Some(digit) = c.to_digit(10) {
                    current_nbr *= 10;
                    current_nbr += digit;
                    idx += 1;
                    c = chars[idx];
                }
                let new_pattern = Pattern::new(current_pattern.take(), current_nbr);
                current_pattern = Some(Box::new(new_pattern));
                idx += 1;
            } else if c.is_alphabetic() {
                let mut current_string: Vec<char> = Vec::new();
                while c.is_alphabetic() {
                    current_string.push(c);
                    idx += 1;
                    if idx == chars.len() {
                        break;
                    }
                    c = chars[idx];
                }
                if let Some(pattern) = &mut current_pattern {
                    pattern.add_string(current_string.into_iter().collect());
                } else {
                    output.push(current_string.into_iter().collect());
                }
            } else if c == ']' {
                let (s, parent) = current_pattern.unwrap().close();
                current_pattern = parent;
                if let Some(pattern) = &mut current_pattern {
                    pattern.add_string(s);
                } else {
                    output.push(s);
                }
                idx += 1;
            }
        }
        output.join("")
    }
}