// https://leetcode.com/problems/house-robber-iii/solutions/600957/rust-15-lines-simple-solution-with-explanation/
impl Solution {
    pub fn dfs(node: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
        if let Some(node) = node {
            let mut res = vec![0, 0];
            let lv = Self::dfs(node.borrow().left.clone()); 
            let rv = Self::dfs(node.borrow().right.clone()); 
            res[0] = node.borrow().val + lv[1] + rv[1]; 
            res[1] = max(lv[0], lv[1]) + max(rv[0], rv[1]);
            return res ;
        }
        vec![0, 0]
    }

    pub fn rob(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {
        let res = Self::dfs(root); 
        max(res[0], res[1])
    }
}