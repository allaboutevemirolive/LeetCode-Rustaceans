// https://leetcode.com/problems/house-robber-iii/solutions/792414/python-rust-dfs-solution/
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn rob(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {
        return *Self::dfs(root).iter().max().unwrap();
    }
    
    pub fn dfs(node: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
        if let Some(n) = node {
            let (l, r) = (Self::dfs(n.borrow().left.clone()), Self::dfs(n.borrow().right.clone()));
        
            let rob = n.borrow().val + l[0] + r[0];
            let notRob = l[0].max(l[1]) + r[0].max(r[1]);
            
            return vec![notRob, rob];
        } else {
            return vec![0, 0];
        }
    }
}