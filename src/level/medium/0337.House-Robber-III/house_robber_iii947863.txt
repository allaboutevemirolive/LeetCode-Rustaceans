// https://leetcode.com/problems/house-robber-iii/solutions/947863/rust-recursive-solution/

use std::cell::RefCell;
use std::cmp::max;
use std::rc::Rc;
impl Solution {
    pub fn rob(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {
        fn rob_recursive(root: Option<Rc<RefCell<TreeNode>>>) -> (i32, i32) {
            match root {
                None => (0, 0),
                Some(node) => {
                    let l = rob_recursive(node.borrow().left.clone());
                    let r = rob_recursive(node.borrow().right.clone());
                    let max_with_root = node.borrow().val + l.1 + r.1;
                    let max_without_root = max(l.0, l.1) + max(r.0, r.1);
                    (max_with_root, max_without_root)
                }
            }
        }
        let (a, b) = rob_recursive(root);
        max(a, b)
    }
}