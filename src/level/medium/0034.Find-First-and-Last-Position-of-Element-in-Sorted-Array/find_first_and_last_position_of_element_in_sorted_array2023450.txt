// https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/solutions/2023450/rust-binary-search-iterative/
use std::cmp::Ordering;

impl Solution {
    pub fn search_range(nums: Vec<i32>, target: i32) -> Vec<i32> {
        let n = nums.len();
        let mut rez = vec![-1, -1];
        // Edge cases
        if n == 0 || nums[0] > target || nums[n-1] < target {
            return rez;
        }
        let mut left = 0;
        let mut right = n-1;
        let mut mid;

        loop {
            mid = left + (right - left)/2;

            match nums[mid].cmp(&target) {
                Ordering::Less => left = mid + 1,
                Ordering::Equal => break,
                Ordering::Greater => {
                    right = mid.wrapping_sub(1);
                },
            }
            
            if right < left || right > n-1 {
                return vec![-1, -1];
            }
        }

        let saved_right = right;
        let saved_mid = mid;

        loop {
            mid = left + (right - left)/2;

            if nums[mid] == target {
                right = mid;
            } else {
                left = mid + 1;
            }

            if nums[left] == target {
                rez[0] = left as i32;
                break
            }
        }

        left = saved_mid;
        right = saved_right;

        loop {
            mid = left + (right - left + 1)/2;

            if nums[mid] == target {
                left = mid;
            } else {
                right = mid - 1;
            }

            if nums[right] == target {
                rez[1] = right as i32;
                break
            }
        }

        rez
    }
}