// https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/solutions/1168967/my-rust-solution/
impl Solution {
    pub fn search_range(nums: Vec<i32>, target: i32) -> Vec<i32> {

        return vec![search_front(&nums, target), search_back(&nums, target)];

        pub fn search_front(nums : &Vec<i32>, target : i32) -> i32 {

            if nums.len() == 0 {
                return -1;
            }
            let mut start = 0;
            let mut end = nums.len() - 1;
    
            while start + 1 < end {
                let mut mid = (end - start)/2 + start;
                if nums[mid] == target {
                    end = mid;
                }else if nums[mid] > target {
                    end = mid;
                }else {
                    start = mid;
                }
            }
            if nums[start] == target {
                return start as i32;
            }
            if nums[end] == target {
                return end as i32;
            }
            return -1;
        }
        pub fn search_back(nums : &Vec<i32>, target : i32) -> i32 {
    
            if nums.len() == 0 {
                return -1;
            }
            let mut start = 0;
            let mut end = nums.len() - 1;
    
            while start + 1 < end {
                let mut mid = (end - start)/2 + start;
                if nums[mid] == target {
                    start = mid;
                }else if nums[mid] > target {
                    end = mid;
                }else {
                    start = mid;
                }
            }
            if nums[end] == target {
                return end as i32;
            }
            if nums[start] == target {
                return start as i32;
            }
           
            return -1;
        }
    

    }
}