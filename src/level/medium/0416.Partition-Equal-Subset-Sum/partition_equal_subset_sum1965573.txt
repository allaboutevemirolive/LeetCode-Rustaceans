// https://leetcode.com/problems/partition-equal-subset-sum/solutions/1965573/rust-ver/
fn accumulate(nums: &Vec<i32>) -> i32 {
    let mut sum = 0;
    for i in nums {
        sum += i;
    }
    sum
}

fn can_partition(nums: Vec<i32>) -> bool {
    let sum = accumulate(&nums);
    if sum % 2 != 0 {
        return false;
    }
    let target = (sum >> 1) as usize;
    let n = nums.len();
    let mut dp = vec![0; target + 1];
    for i in 0..n {
        let value = nums[i] as usize;
        for j in (value..=target).rev() {
            dp[j] = std::cmp::max(dp[j-value] + value, dp[j]);
            if dp[j] == target {
                return true;
            }
        }
    }
    false
}