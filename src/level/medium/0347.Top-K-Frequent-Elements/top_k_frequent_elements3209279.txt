// https://leetcode.com/problems/top-k-frequent-elements/solutions/3209279/rust-solution/
impl Solution {
    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {
        use std::cmp::*;
        use std::collections::*;
        let mut frequencies = HashMap::new();
        let mut heap = BinaryHeap::new();
        for num in nums {
            *frequencies.entry(num).or_insert(0) += 1;
        }
        for (num, freq) in frequencies {
            heap.push(Reverse((freq, num)));
            if heap.len() > k as usize {
                heap.pop();
            }
        }
        heap.into_vec()
            .into_iter()
            .map(|Reverse((_, v))| v)
            .collect()        
    }
}