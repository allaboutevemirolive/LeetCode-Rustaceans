// https://leetcode.com/problems/top-k-frequent-elements/solutions/922402/rust-cheapest-best/
use std::collections::HashMap;

impl Solution {
    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {
        let mut max_freq = 0;
        let mut count = HashMap::new();
        for n in &nums {
            let c = count.entry(n).or_insert(0);
            *c += 1;
            max_freq = max_freq.max(*c);
        }
        let mut buckets = vec![vec![]; max_freq];
        for (n, f) in count {
            buckets[f - 1].push(n);
        }

        let mut res = vec![];
        for freq in (0..max_freq).rev() {
            for n in &buckets[freq] {
                res.push(**n);
                if res.len() == k as usize {
                    return res;
                }
            }
        }

        panic!("Didn't reach k")
    }
}