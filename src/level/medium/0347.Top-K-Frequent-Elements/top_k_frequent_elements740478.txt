// https://leetcode.com/problems/top-k-frequent-elements/solutions/740478/rust-bucket-sort-o-n-method/
impl Solution {
    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {
        let mut cc: HashMap<i32, i32> = HashMap::new();
        for n in nums.iter() {
            *cc.entry(*n).or_insert(0) += 1;
        }
        let mut buckets: Vec<Vec<i32>> = vec![vec![]; nums.len() + 1];
        for (&k, &v) in cc.iter() {
            buckets[v as usize].push(k);
        }
        let ans = buckets
            .iter()
            .map(|b| b.iter().map(|i| *i))
            .flatten()
            .collect::<Vec<i32>>();
        ans[ans.len() - k as usize..].to_vec()
    }
}