// https://leetcode.com/problems/top-k-frequent-elements/solutions/2430181/rust-hashmap-functional-solution/
use std::collections::HashMap;

impl Solution {
    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {        
        let mut map = HashMap::new();
        
        nums.iter().for_each(|&num| *map.entry(num).or_insert(0) += 1);
        
        let mut nums_freqs: Vec<(i32,usize)> = map.into_iter().collect();
        
        nums_freqs.sort_by(|a,b| b.1.cmp(&a.1));
        
        return nums_freqs
            .into_iter()
            .take(k as usize)
            .map(|a| a.0)
            .collect::<Vec<i32>>();
    }
}