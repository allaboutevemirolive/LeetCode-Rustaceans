// https://leetcode.com/problems/top-k-frequent-elements/solutions/1928236/rust-heap-with-hashmap/
/// @author: Leon
/// https://leetcode.com/problems/top-k-frequent-elements/
/// Time Complexity:    O(`_len_n` * lg(`_len_n`))
/// Space Complexity:   O(`_len_n`)
impl Solution {
    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {
        let _len_n: usize = nums.len();
        let num_to_freq: HashMap<i32, u16> = {
            let mut num_to_freq: HashMap<i32, u16> = HashMap::new();
            for num in nums {
                *num_to_freq.entry(num).or_default() += 1;
            }
            num_to_freq
        };
        let mut heap: BinaryHeap<(i16, i32)> = BinaryHeap::new();
        for (num, freq) in num_to_freq.into_iter() {
            heap.push((-(freq as i16), num));
            if heap.len() > k as usize {
                heap.pop();
            }
        }
        let ans: Vec<i32> = {
            let mut ans: Vec<i32> = Vec::new();
            while let Some((_freq, num)) = heap.pop() {
                ans.push(num);
            }
            ans
        };
        ans
    }
}