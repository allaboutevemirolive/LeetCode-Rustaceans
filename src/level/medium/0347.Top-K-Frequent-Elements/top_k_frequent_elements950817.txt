// https://leetcode.com/problems/top-k-frequent-elements/solutions/950817/rust-hashmap-4ms/
use std::collections::HashMap;

impl Solution {
    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {
        let mut map = HashMap::new();
        for num in nums {
            *map.entry(num).or_insert(0) += 1;
        }
        let mut freqs: Vec<(i32, i32)> = map
            .into_iter()
            .map(|(a, b)| (a, b))
            .collect::<Vec<(i32, i32)>>();
        freqs.sort_by(|a, b| a.1.cmp(&b.1).reverse());
        let mut res = vec![];
        for idx in 0..k {
            res.push(freqs[idx as usize].0);
        }
        res
    }
}