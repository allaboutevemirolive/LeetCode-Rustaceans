// https://leetcode.com/problems/top-k-frequent-elements/solutions/3279337/rust-hashmap/
impl Solution {
    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {
        use std::collections::HashMap;

        let mut map = HashMap::new();

        // Count the frequency of each element in the array
        for n in nums {
            *map.entry(n).or_insert(0) += 1;
        }

        // Convert the hash map into a vector of tuples and sort by frequency
        let mut vec: Vec<(i32, i32)> = map.into_iter().collect();
        vec.sort_by(|a, b| b.1.cmp(&a.1));

        // Return the top k elements from the sorted vector
        let mut result = vec![];
        for i in 0..k {
            result.push(vec[i as usize].0);
        }

        result
    }
}
