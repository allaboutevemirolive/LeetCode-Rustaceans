// https://leetcode.com/problems/top-k-frequent-elements/solutions/1330116/rust-binaryheap-hashmap/
use std::collections::{HashMap, BinaryHeap};

impl Solution {
    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {
        let mut map = HashMap::new();
        for elem in nums.iter() {
            if let Some(num) = map.get_mut(elem) {
                *num += 1;
            } else {
                map.insert(*elem, 1);
            }
        }
        
        let mut heap:BinaryHeap<(i32,i32)> = map.into_iter().map(|(k,v)| { (v,k) }).collect();
        let mut ret = Vec::new();
        for i in 0..k {
            ret.push(heap.pop().unwrap().1);
        }
        return ret;
    }
}