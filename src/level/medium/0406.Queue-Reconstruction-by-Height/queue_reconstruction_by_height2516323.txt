// https://leetcode.com/problems/queue-reconstruction-by-height/solutions/2516323/rust-solution-with-segment-tree-o-n-log-n/
impl Solution {
    pub fn reconstruct_queue(mut people: Vec<Vec<i32>>) -> Vec<Vec<i32>> {
        struct SegTree {
            t: Vec<i32>,
            n: usize,
        }

        impl SegTree {
            fn new(v: Vec<i32>) -> Self {
                let mut p = 0;
                {
                    let mut k = v.len();
                    while k > 0 {
                        k = k >> 1;
                        p += 1;
                    }
                }
                let n = 1 << (p + 1);
                let mut t = vec![0; n];
                let sidx = n >> 1;
                v.iter().enumerate().for_each(|(i, num)| t[i + sidx] = *num);

                for i in (1..sidx).rev() {
                    t[i] = t[2 * i] + t[2 * i + 1];
                }
                SegTree { t: t, n: n }
            }

            fn find_kth_rec(&self, k: usize, i: usize) -> usize {
                if i >= (self.n >> 1) {
                    return i - (self.n >> 1);
                }

                if k < self.t[2 * i] as usize {
                    self.find_kth_rec(k, 2 * i)
                } else {
                    self.find_kth_rec(k - self.t[2 * i] as usize, 2 * i + 1)
                }
            }

            fn find_kth(&self, k: usize) -> usize {
                self.find_kth_rec(k, 0)
            }

            fn zero(&mut self, k: usize) {
                let mut idx = (self.n >> 1) + k;
                let val = self.t[idx];
                self.t[idx] = 0;
                idx = idx >> 1;
                while idx > 0 {
                    self.t[idx] -= val;
                    idx = idx >> 1;
                }
            }
        }

        people.sort_by_key(|v| (v[0], -v[1]));
        let pos = vec![1; people.len()];
        let mut seg = SegTree::new(pos);
        let mut res = vec![Vec::new(); people.len()];

        people.into_iter().for_each(|v| {
            let i = seg.find_kth(v[1] as usize);
            seg.zero(i);
            res[i] = v;
        });

        res
    }
}
