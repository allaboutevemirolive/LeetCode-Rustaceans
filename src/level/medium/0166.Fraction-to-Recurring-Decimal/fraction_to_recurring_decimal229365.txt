// https://leetcode.com/problems/fraction-to-recurring-decimal/solutions/229365/0-ms-rust-solution/
impl Solution {
    pub fn fraction_to_decimal(numerator: i32, denominator: i32) -> String {
        let mut result = String::new();
        if (numerator > 0 && denominator < 0) || (numerator < 0 && denominator > 0) {
            result.push('-');
        }
        let mut num = Solution::abs(numerator);
        let denom = Solution::abs(denominator);
        let mut quo = num/denom;
        let mut mem: Vec<(i64, i64)> = vec![(-1, quo)];
        let mut loop_start = -1;
        loop {
            num = (num-quo*denom)*10;
            quo = num/denom; 
            if num == 0 {
                break;
            }
            for (n, _) in &mem {
                if *n == num {
                    loop_start = num;
                }
            }
            if loop_start != -1 {
                break;
            }
            mem.push((num, quo));
        }
        let mut first = true;
        for (n, q) in &mem {
            if first {
                result += &q.to_string();
                first = false;
                if mem.len() > 1 {
                    result.push('.');
                }
                continue;
            }
            if loop_start == *n {
                result.push('(');
            }
            result += &q.to_string();
        }
        if loop_start != -1 {
            result.push(')');
        }
        result
    }
    fn abs(num: i32) -> i64 {
        let re = num as i64;
        if re > 0 {
            re
        } else {
            -re
        }
    }
}