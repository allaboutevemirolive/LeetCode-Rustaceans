// https://leetcode.com/problems/generate-parentheses/solutions/950023/rust-index-solution/
impl Solution {
    pub fn generate_parenthesis(n: i32) -> Vec<String> {
        fn perm(positions: &mut Vec<usize>, p: usize, iteration: usize) -> Vec<Vec<usize>> {
            let mut combs = Vec::new();
            let saved_p = positions[p];
            positions[p] += iteration;
            for i in 0.. {
                if p < positions.len() - 1 {
                    combs.extend(perm(positions, p + 1, iteration + i));
                } else {
                    combs.push(positions.clone());
                }
                positions[p] += 1;
                if positions[p] > p * 2 {
                    break;
                }
            }
            positions[p] = saved_p;
            combs
        }

        if n == 1 {
            return vec![String::from("()")];
        }
        perm(&mut (0..n as usize).collect(), 1, 0)
            .into_iter()
            .map(|r| {
                let mut iter = r.iter();
                (0..n as usize * 2)
                    .scan(iter.next(), |it, j| {
                        Some(if Some(&j) == *it {
                            *it = iter.next();
                            '('
                        } else {
                            ')'
                        })
                    })
                    .collect()
            })
            .collect()
    }
}