// https://leetcode.com/problems/count-and-say/solutions/404902/another-simple-rust-solution/
pub fn count_and_say(n: i32) -> String {
        let mut n = n;
        assert!(n > 0);
		
        let mut say: String = String::from("1");
		
        while n > 1 {
            let prev = say.chars().collect::<Vec<char>>();
            say.clear();
            let mut i = 0;
            
            while i < prev.len() {
                let mut count = 0;
                let cur_num = prev[i];
                while i < prev.len() && prev[i] == cur_num {
                    count += 1;
                    i += 1;
                }

                say.push_str(&count.to_string());
                say.push_str(&cur_num.to_string());
            }

            n -= 1;
            
        }

        say
    }