// https://leetcode.com/problems/count-and-say/solutions/1251827/rust-solution-no-recursion/
impl Solution {
    pub fn count_and_say(n: i32) -> String {
       
        if n == 1 {
            String::from("1")
        }
        else if n == 2 {
            String::from("11")
        }
        else {
            
            let mut final_result = Solution::count_and_say(2);
            
            for _ in 3..(n+1) {
            
                let previous = final_result;
                let mut result = String::new();
                let mut count : u8 = 0;
                let characters : Vec<char> = previous.chars().collect();
                for (i,c)in characters.iter().enumerate() {

                   if i > 0 { 

                        let previous_char = &characters[i-1];
                        if *previous_char != *c {
                            result += format!("{}{}", count, *previous_char).as_str();
                            count = 0;
                        }
                   }

                   count += 1;
                }           

                result += format!("{}{}", count, characters[characters.len()-1]).as_str();

                final_result = result;
                
            }
            
            final_result
        }
        
    }
}