// https://leetcode.com/problems/count-and-say/solutions/1754409/rust-solution/
impl Solution {
    pub fn just_say(strs: &str) -> String {
        let mut result = String::from("");
        let chars: Vec<char> = strs.chars().collect();
        let mut counting_char = chars[0];
        let mut counting_counts = 1;
        for i in 1..chars.len() {
            if chars[i] == counting_char {
                counting_counts += 1;
                continue;
            }
            result.push(char::from_digit(counting_counts, 10).unwrap());
            result.push(counting_char);
            counting_char = chars[i];
            counting_counts = 1;
        }
        result.push(char::from_digit(counting_counts, 10).unwrap());
        result.push(counting_char);
        result
    }
    pub fn count_and_say(n: i32) -> String {
        if n == 1 {
            return String::from("1")
        }
        Solution::just_say(&Solution::count_and_say(n - 1))
    }
}