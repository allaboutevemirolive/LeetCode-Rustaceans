// https://leetcode.com/problems/path-sum-ii/solutions/2413343/rust-dfs-recusive/
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn path_sum(root: Option<Rc<RefCell<TreeNode>>>, target_sum: i32) -> Vec<Vec<i32>> {
        // dfs
        fn helper(res: &mut Vec<Vec<i32>>, tree: &Option<Rc<RefCell<TreeNode>>>, path: &mut Vec<i32>, sum: &mut i32, target_sum: i32) {
          let mut is_leaf = true;
          let mut val = 0;
          if let Some(leaf) = tree.as_ref().unwrap().borrow().left.clone() {
            is_leaf = false;
            val = (&leaf).borrow().val;
            *sum += val;
            path.push(val);
            helper(res, &Some(leaf), path, sum, target_sum);
            if let Some(ele) = path.pop() {
              *sum -= ele;
            } else {
              panic!("Error: vector pop");
            }
          }
          if let Some(leaf) = tree.as_ref().unwrap().borrow().right.clone() {
            is_leaf = false;
            val = (&leaf).borrow().val;
            *sum += val;
            path.push(val);
            helper(res, &Some(leaf), path, sum, target_sum);
            if let Some(ele) = path.pop() {
              *sum -= ele;
            } else {
              panic!("Error: vector pop");
            }
          }
          if is_leaf && *sum==target_sum {
            (*res).push(path.clone());
          }
        }
        
        // init
        let mut res = Vec::new();
        if root.is_some() {
          let mut path = Vec::new();
          let mut sum = root.as_ref().unwrap().borrow().val;
          path.push(root.as_ref().unwrap().borrow().val);
          helper(&mut res, &root, &mut path, &mut sum, target_sum);
        }
        res
    }
}