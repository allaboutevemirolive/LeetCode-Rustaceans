// https://leetcode.com/problems/path-sum-ii/solutions/1320324/rust-dfs-4ms/
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn path_sum(root: Option<Rc<RefCell<TreeNode>>>, target_sum: i32) -> Vec<Vec<i32>> {
        let mut result = vec![];
        let current = vec![];
        dfs(&root, target_sum, &mut result, current);
        result
    }
}



fn dfs(node : &Option<Rc<RefCell<TreeNode>>>, target_sum : i32, result : &mut Vec<Vec<i32>>, current : Vec<i32>) {
    if node.is_none() {
        return;
    }
    else if let Some(node_ref) = node {
        let node = node_ref.borrow();
        let mut new_current = current.clone();
        new_current.push(node.val);
        let new_value = target_sum - node.val;
        if new_value == 0 && node.left.is_none() && node.right.is_none() {
            result.push(new_current);
            return;
        }
        dfs(&node.left, new_value, result, new_current.clone());
        dfs(&node.right, new_value, result, new_current);
    }
}