// https://leetcode.com/problems/path-sum-ii/solutions/1382540/rust-dfs-2-5mb-0ms/

impl Solution {
    pub fn path_sum(root: Option<Rc<RefCell<TreeNode>>>, target_sum: i32) -> Vec<Vec<i32>> {
        let mut result = vec![];
        dfs(&mut result, root, &mut vec![], target_sum, 0);
        result
    }
}

fn dfs(
    result: &mut Vec<Vec<i32>>,
    root: Option<Rc<RefCell<TreeNode>>>,
    path: &mut Vec<i32>,
    target: i32,
    current: i32,
) {
    if let Some(node) = root {
        let v = node.borrow().val;
        let c = current + v;
        path.push(v);

        let node = node.borrow();
        if node.left.is_some() || node.right.is_some() {
            dfs(result, node.left.clone(), path, target, c);
            dfs(result, node.right.clone(), path, target, c);
        } else if c == target {
            result.push(path.clone());
        }

        path.pop();
    }
}