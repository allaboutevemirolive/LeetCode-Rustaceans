// https://leetcode.com/problems/path-sum-ii/solutions/2617758/rust-dfs/
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn path_sum(root: Option<Rc<RefCell<TreeNode>>>, target_sum: i32) -> Vec<Vec<i32>> {
        let mut answer = Vec::new();
        let mut path = Vec::new();
        Self::dfs(root, &mut answer, &mut path, target_sum);
        answer
    }
    
    fn dfs(mut node: Option<Rc<RefCell<TreeNode>>>, answer: &mut Vec<Vec<i32>>, path: &mut Vec<i32>, mut sum: i32) {
        if let Some(node) = node.take() {
            let mut node = node.as_ref().borrow_mut();
            path.push(node.val);
            sum = sum - node.val;
            if node.left.is_none() && node.right.is_none() {
                if sum == 0 {
                    answer.push(path.to_vec());
                }
            } else {
                Self::dfs(node.left.take(), answer, path, sum);
                Self::dfs(node.right.take(), answer, path, sum);
            }
            path.pop();
        }
    }
}