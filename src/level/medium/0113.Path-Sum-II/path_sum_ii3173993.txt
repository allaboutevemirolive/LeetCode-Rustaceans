// https://leetcode.com/problems/path-sum-ii/solutions/3173993/rust-simple-solution/
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn solve(root: &Option<Rc<RefCell<TreeNode>>>, target_sum: i32,ans : &mut Vec<Vec<i32>>, temp : &mut Vec<i32>) {
        if let Some(v) = root {
            let n = v.borrow();

            if n.left.is_none() && n.right.is_none(){
                if target_sum == n.val{
                    temp.push(n.val);
                    ans.push(temp.clone());
                    temp.pop();
                }
                return;
            }
            temp.push(n.val);

            Self::solve(&n.left,target_sum - n.val,ans,temp);
            Self::solve(&n.right,target_sum - n.val,ans,temp);

            temp.pop();

        }
    }

    pub fn path_sum(root: Option<Rc<RefCell<TreeNode>>>, target_sum: i32) -> Vec<Vec<i32>> {
        let mut ans : Vec<Vec<i32>> = vec![];
        let mut temp : Vec<i32> = vec![];

        Self::solve(&root,target_sum,&mut ans,&mut temp);

        ans
    }
}