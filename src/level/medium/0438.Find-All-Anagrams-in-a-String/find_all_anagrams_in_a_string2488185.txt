// https://leetcode.com/problems/find-all-anagrams-in-a-string/solutions/2488185/rust-solution/
fn helper(c:char) -> usize {
    (c as u8 - 'a' as u8) as usize
}

fn helper2(a:&Vec<i32>, b:&Vec<i32>) -> bool {
    for i in 0..a.len() {
        if a[i] != b[i] {
            return false
        }
    }
    true
}

impl Solution {
    pub fn find_anagrams(s: String, p: String) -> Vec<i32> {
        let mut base = vec![0;26];
        let s = s.chars().collect::<Vec<char>>();
        let p = p.chars().collect::<Vec<char>>();
        let n = s.len();
        let m = p.len();
        if n < m { return vec![] }
            
        for &c in &p {
            base[helper(c)] += 1;
        }


        let mut memo = vec![0;26];
        
        for i in 0..m {
            memo[helper(s[i])] += 1;
        }

        let mut result = vec![];
        if helper2(&base, &memo) {
            result.push(0);
        }

        for i in m..n {
            let li = i - m;
            memo[helper(s[i])] += 1;
            memo[helper(s[li])] -= 1;

            if helper2(&base, &memo) {
                result.push((i - m + 1) as i32);
            }
        }
        result
    }
}