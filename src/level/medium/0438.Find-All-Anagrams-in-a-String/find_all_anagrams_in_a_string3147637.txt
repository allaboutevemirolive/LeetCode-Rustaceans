// https://leetcode.com/problems/find-all-anagrams-in-a-string/solutions/3147637/rust-counter/
impl Solution {
    pub fn find_anagrams(s: String, p: String) -> Vec<i32> {
        let (n, m) = (s.len(), p.len());

        if m > n { return vec![] }

        let s: Vec<usize> = s.as_bytes().iter().map(|&x| (x - b'a') as usize).collect();
        let p: Vec<usize> = p.as_bytes().iter().map(|&x| (x - b'a') as usize).collect();

        let (mut c1, mut c2) = ([0; 26], [0; 26]);

        for &i in p.iter() { c1[i] += 1 }
        for i in 0..m { c2[s[i]] += 1 }

        let (mut res, mut i, mut j) = (vec![], 0, m);

        if c1 == c2 { res.push(i as i32) }

        while j < n {
            c2[s[i]] -= 1; c2[s[j]] += 1;
            i += 1; j += 1;

            if c1 == c2 { res.push(i as i32) }
        }

        res
    }
}