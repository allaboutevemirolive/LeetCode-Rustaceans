// https://leetcode.com/problems/remove-nth-node-from-end-of-list/solutions/2055672/rust-5ms-2-1mb/
type Node = Option<Box<ListNode>>;
impl Solution {
    pub fn remove_nth_from_end(mut head: Node, mut n: i32) -> Node {
        
        /*
			Time | Space Complexity: O(n) where n is the size of the list and 'n' integer
			
            The main idea is to start from an index-zero and 
            decrement 'n' as you move right and left pointers
            
            R   |   L
            1   |   0
            2   |   0 --> As soon as n <= 0, we move the left pointer forward
            3   |   1
            4   |   2
            5   |   3 --> Once we reached this node, we set the 
							left.next = left.next.next,
                            this skipping the node-to-be deleted
            
        */
        //  Initialise the list on index-zero        
        let mut dummy = Box::new(ListNode { 
            next: head,
            val: 0,
        });
        let mut right = dummy.clone();
        let mut left = dummy.as_mut();
        //  Set the right node to the head
        while let Some(node) = right.next.take() { 
            if n <= 0 { 
                left = left.next.as_mut().unwrap();
            }
            right = node.clone();
            n -=1;
        }
        //  Delete the node 
        left.next = left.next.as_mut().unwrap().next.clone();
        dummy.next
    }
}