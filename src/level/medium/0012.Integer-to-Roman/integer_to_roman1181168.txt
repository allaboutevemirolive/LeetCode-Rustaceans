// https://leetcode.com/problems/integer-to-roman/solutions/1181168/rust-0-ms/
impl Solution {
    pub fn int_to_roman(num: i32) -> String {
        let mut temp:f32 = num as f32;
        let mut result = String::new();
        
        let rem_1000 = (temp/1000_f32).floor();
        result.push_str(&"M".repeat(rem_1000 as usize));
        temp = temp % 1000_f32;
        
        let rem_100 = (temp/100_f32).floor();
        match rem_100 as usize {
            9 =>  result.push_str("CM"),
            4 =>  result.push_str("CD"),
            5..=8 => {
                result.push_str("D");
                result.push_str(&"C".repeat(rem_100 as usize - 5 as usize));
            },
            _ => result.push_str(&"C".repeat(rem_100 as usize)),
        }
        temp = temp % 100_f32;
        
        let rem_10 = (temp/10_f32).floor();
        match rem_10 as usize {
            9 =>  result.push_str("XC"),
            4 =>  result.push_str("XL"),
            5..=8 => {
                result.push_str("L");
                result.push_str(&"X".repeat(rem_10 as usize - 5 as usize));
            },
            _ => result.push_str(&"X".repeat(rem_10 as usize)),
        }
        temp = temp % 10_f32;
        
        let rem_1 = temp;
         match rem_1 as usize {
            9 =>  result.push_str("IX"),
            4 =>  result.push_str("IV"),
            5..=8 => {
                result.push_str("V");
                result.push_str(&"I".repeat(rem_1 as usize - 5 as usize));
            },
            _ => result.push_str(&"I".repeat(rem_1 as usize)),
        }
        
        result
    }
}