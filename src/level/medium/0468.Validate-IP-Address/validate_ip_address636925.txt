// https://leetcode.com/problems/validate-ip-address/solutions/636925/rust-solution/
impl Solution {
    pub fn valid_ip_address(ip: String) -> String {
        if validate_ip4(&ip) {
            "IPv4".to_owned()
        } else if validate_ip6(&ip) {
            "IPv6".to_owned()
        } else {
            "Neither".to_owned()
        }
    }
}

fn validate_ip4(s: &str) -> bool {
    let parts: Vec<&str> = s.split('.').collect();
    if parts.len() != 4 {
        return false;
    }

    parts.into_iter().all(|part| {
        if part.len() > 1 && part.starts_with('0') {
            return false;
        }
        let num = part.parse::<u32>().unwrap_or(1 << 8);
        num >= 0 && num < 1 << 8
    })
}

fn validate_ip6(s: &str) -> bool {
    let parts: Vec<&str> = s.split(':').collect();
    if parts.len() != 8 {
        return false;
    }

    parts.into_iter().all(|part| {
        if part.is_empty() || part.len() > 4 {
            return false;
        }

        let num = u32::from_str_radix(part, 16).unwrap_or(1 << 16);
        num >= 0 && num < 1 << 16
    })
}